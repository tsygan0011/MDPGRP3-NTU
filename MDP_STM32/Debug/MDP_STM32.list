
MDP_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fff0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b5c  08010180  08010180  00020180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cdc  08010cdc  000301a0  2**0
                  CONTENTS
  4 .ARM          00000008  08010cdc  08010cdc  00020cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ce4  08010ce4  000301a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ce4  08010ce4  00020ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ce8  08010ce8  00020ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08010cec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301a0  2**0
                  CONTENTS
 10 .bss          00005284  200001a0  200001a0  000301a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005424  20005424  000301a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d5d3  00000000  00000000  00030213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003cea  00000000  00000000  0004d7e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ad8  00000000  00000000  000514d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001526  00000000  00000000  00052fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000554d  00000000  00000000  000544ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ef8e  00000000  00000000  00059a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e912a  00000000  00000000  000789a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007b7c  00000000  00000000  00161ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a5  00000000  00000000  00169650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a0 	.word	0x200001a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010168 	.word	0x08010168

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	08010168 	.word	0x08010168

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 b970 	b.w	8000ef4 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	460d      	mov	r5, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	460f      	mov	r7, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4694      	mov	ip, r2
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0xe2>
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	b143      	cbz	r3, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	f1c3 0220 	rsb	r2, r3, #32
 8000c50:	409f      	lsls	r7, r3
 8000c52:	fa20 f202 	lsr.w	r2, r0, r2
 8000c56:	4317      	orrs	r7, r2
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5e:	fa1f f58c 	uxth.w	r5, ip
 8000c62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c66:	0c22      	lsrs	r2, r4, #16
 8000c68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c70:	fb01 f005 	mul.w	r0, r1, r5
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c78:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c80:	f080 811c 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f240 8119 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	4462      	add	r2, ip
 8000c8e:	1a12      	subs	r2, r2, r0
 8000c90:	b2a4      	uxth	r4, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x90>
 8000ca6:	eb1c 0404 	adds.w	r4, ip, r4
 8000caa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cae:	f080 8107 	bcs.w	8000ec0 <__udivmoddi4+0x294>
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	f240 8104 	bls.w	8000ec0 <__udivmoddi4+0x294>
 8000cb8:	4464      	add	r4, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11e      	cbz	r6, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40dc      	lsrs	r4, r3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e9c6 4300 	strd	r4, r3, [r6]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0xbc>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80ed 	beq.w	8000eb6 <__udivmoddi4+0x28a>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce8:	fab3 f183 	clz	r1, r3
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d149      	bne.n	8000d84 <__udivmoddi4+0x158>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d302      	bcc.n	8000cfa <__udivmoddi4+0xce>
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	f200 80f8 	bhi.w	8000eea <__udivmoddi4+0x2be>
 8000cfa:	1a84      	subs	r4, r0, r2
 8000cfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	4617      	mov	r7, r2
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d0e2      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	e9c6 4700 	strd	r4, r7, [r6]
 8000d0c:	e7df      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xe6>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f382 	clz	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1c:	1a8a      	subs	r2, r1, r2
 8000d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	2101      	movs	r1, #1
 8000d28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d30:	0c22      	lsrs	r2, r4, #16
 8000d32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d36:	fb0e f005 	mul.w	r0, lr, r5
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d42:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	f200 80cb 	bhi.w	8000ee4 <__udivmoddi4+0x2b8>
 8000d4e:	4645      	mov	r5, r8
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d58:	fb07 2210 	mls	r2, r7, r0, r2
 8000d5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d60:	fb0e fe00 	mul.w	lr, lr, r0
 8000d64:	45a6      	cmp	lr, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x14e>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d70:	d202      	bcs.n	8000d78 <__udivmoddi4+0x14c>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f200 80bb 	bhi.w	8000eee <__udivmoddi4+0x2c2>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d82:	e79f      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d84:	f1c1 0720 	rsb	r7, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d92:	fa05 f401 	lsl.w	r4, r5, r1
 8000d96:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9a:	40fd      	lsrs	r5, r7
 8000d9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dcc:	f080 8088 	bcs.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd0:	42a5      	cmp	r5, r4
 8000dd2:	f240 8085 	bls.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dda:	4464      	add	r4, ip
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	b29d      	uxth	r5, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dfc:	d26c      	bcs.n	8000ed8 <__udivmoddi4+0x2ac>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	d96a      	bls.n	8000ed8 <__udivmoddi4+0x2ac>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	4464      	add	r4, ip
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	46c8      	mov	r8, r9
 8000e16:	46ae      	mov	lr, r5
 8000e18:	d356      	bcc.n	8000ec8 <__udivmoddi4+0x29c>
 8000e1a:	d053      	beq.n	8000ec4 <__udivmoddi4+0x298>
 8000e1c:	b156      	cbz	r6, 8000e34 <__udivmoddi4+0x208>
 8000e1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e22:	eb64 040e 	sbc.w	r4, r4, lr
 8000e26:	fa04 f707 	lsl.w	r7, r4, r7
 8000e2a:	40ca      	lsrs	r2, r1
 8000e2c:	40cc      	lsrs	r4, r1
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	e9c6 7400 	strd	r7, r4, [r6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	f1c3 0120 	rsb	r1, r3, #32
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	fa20 f201 	lsr.w	r2, r0, r1
 8000e48:	fa25 f101 	lsr.w	r1, r5, r1
 8000e4c:	409d      	lsls	r5, r3
 8000e4e:	432a      	orrs	r2, r5
 8000e50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e60:	0c11      	lsrs	r1, r2, #16
 8000e62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e66:	fb00 f50e 	mul.w	r5, r0, lr
 8000e6a:	428d      	cmp	r5, r1
 8000e6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x258>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7a:	d22f      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d92d      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	b292      	uxth	r2, r2
 8000e88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	fb05 f10e 	mul.w	r1, r5, lr
 8000e98:	4291      	cmp	r1, r2
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x282>
 8000e9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea4:	d216      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d914      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000eaa:	3d02      	subs	r5, #2
 8000eac:	4462      	add	r2, ip
 8000eae:	1a52      	subs	r2, r2, r1
 8000eb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb4:	e738      	b.n	8000d28 <__udivmoddi4+0xfc>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e708      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	e6e6      	b.n	8000c8e <__udivmoddi4+0x62>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	e6fb      	b.n	8000cbc <__udivmoddi4+0x90>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d2a9      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ecc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	e7a3      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	e7ea      	b.n	8000eae <__udivmoddi4+0x282>
 8000ed8:	462b      	mov	r3, r5
 8000eda:	e794      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e7d1      	b.n	8000e84 <__udivmoddi4+0x258>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	e77b      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee4:	3d02      	subs	r5, #2
 8000ee6:	4462      	add	r2, ip
 8000ee8:	e732      	b.n	8000d50 <__udivmoddi4+0x124>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e70a      	b.n	8000d04 <__udivmoddi4+0xd8>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e742      	b.n	8000d7a <__udivmoddi4+0x14e>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <HAL_TIM_IC_CaptureCallback>:

uint32_t IC_Val1 = 0, IC_Val2 = 0;
uint8_t Is_First_Captured = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel2 (TRI: TIM4_CH2)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7f1b      	ldrb	r3, [r3, #28]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d178      	bne.n	8000ffa <HAL_TIM_IC_CaptureCallback+0x102>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000f08:	4b41      	ldr	r3, [pc, #260]	; (8001010 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d11a      	bne.n	8000f46 <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8000f10:	2104      	movs	r1, #4
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f008 ffc0 	bl	8009e98 <HAL_TIM_ReadCapturedValue>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a3e      	ldr	r2, [pc, #248]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000f1c:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000f1e:	4b3c      	ldr	r3, [pc, #240]	; (8001010 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6a1a      	ldr	r2, [r3, #32]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000f32:	621a      	str	r2, [r3, #32]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6a1a      	ldr	r2, [r3, #32]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0220 	orr.w	r2, r2, #32
 8000f42:	621a      	str	r2, [r3, #32]
//
//			  last_curTask_tick = HAL_GetTick();
//		  }
		}
	}
}
 8000f44:	e059      	b.n	8000ffa <HAL_TIM_IC_CaptureCallback+0x102>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000f46:	4b32      	ldr	r3, [pc, #200]	; (8001010 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d155      	bne.n	8000ffa <HAL_TIM_IC_CaptureCallback+0x102>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8000f4e:	2104      	movs	r1, #4
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f008 ffa1 	bl	8009e98 <HAL_TIM_ReadCapturedValue>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a2f      	ldr	r2, [pc, #188]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f5a:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2200      	movs	r2, #0
 8000f62:	625a      	str	r2, [r3, #36]	; 0x24
			obsDist_US = (IC_Val2 > IC_Val1 ? (IC_Val2 - IC_Val1) : (65535 - IC_Val1 + IC_Val2)) * 0.034 / 2;
 8000f64:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d908      	bls.n	8000f82 <HAL_TIM_IC_CaptureCallback+0x8a>
 8000f70:	4b29      	ldr	r3, [pc, #164]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b27      	ldr	r3, [pc, #156]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff faba 	bl	80004f4 <__aeabi_ui2d>
 8000f80:	e00a      	b.n	8000f98 <HAL_TIM_IC_CaptureCallback+0xa0>
 8000f82:	4b25      	ldr	r3, [pc, #148]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f90:	33ff      	adds	r3, #255	; 0xff
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff faae 	bl	80004f4 <__aeabi_ui2d>
 8000f98:	a31b      	add	r3, pc, #108	; (adr r3, 8001008 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9e:	f7ff fb23 	bl	80005e8 <__aeabi_dmul>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb2:	f7ff fc43 	bl	800083c <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fdcd 	bl	8000b5c <__aeabi_d2f>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a15      	ldr	r2, [pc, #84]	; (800101c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000fc6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6a1a      	ldr	r2, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000fdc:	621a      	str	r2, [r3, #32]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6a12      	ldr	r2, [r2, #32]
 8000fe8:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
 8000fea:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0204 	bic.w	r2, r2, #4
 8000ff8:	60da      	str	r2, [r3, #12]
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	f3af 8000 	nop.w
 8001008:	b020c49c 	.word	0xb020c49c
 800100c:	3fa16872 	.word	0x3fa16872
 8001010:	20000574 	.word	0x20000574
 8001014:	2000056c 	.word	0x2000056c
 8001018:	20000570 	.word	0x20000570
 800101c:	2000054c 	.word	0x2000054c
 8001020:	20000378 	.word	0x20000378

08001024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102a:	f005 faf5 	bl	8006618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102e:	f000 f95b 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001032:	f000 fcf9 	bl	8001a28 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001036:	f000 fc23 	bl	8001880 <MX_TIM8_Init>
  MX_TIM2_Init();
 800103a:	f000 fb25 	bl	8001688 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800103e:	f000 fcc9 	bl	80019d4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001042:	f000 fa81 	bl	8001548 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001046:	f000 fb73 	bl	8001730 <MX_TIM3_Init>
  MX_I2C1_Init();
 800104a:	f000 fa4f 	bl	80014ec <MX_I2C1_Init>
  MX_ADC1_Init();
 800104e:	f000 f9a9 	bl	80013a4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001052:	f000 fbc1 	bl	80017d8 <MX_TIM4_Init>
  MX_ADC2_Init();
 8001056:	f000 f9f7 	bl	8001448 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800105a:	f00d fcf1 	bl	800ea40 <OLED_Init>
  ICM20948_init(&hi2c1,0,GYRO_FULL_SCALE_2000DPS);
 800105e:	2203      	movs	r2, #3
 8001060:	2100      	movs	r1, #0
 8001062:	486a      	ldr	r0, [pc, #424]	; (800120c <main+0x1e8>)
 8001064:	f00d faf3 	bl	800e64e <ICM20948_init>

  // initialise command queue
  curCmd.index = 100;
 8001068:	4b69      	ldr	r3, [pc, #420]	; (8001210 <main+0x1ec>)
 800106a:	2264      	movs	r2, #100	; 0x64
 800106c:	701a      	strb	r2, [r3, #0]
  curCmd.val = 0;
 800106e:	4b68      	ldr	r3, [pc, #416]	; (8001210 <main+0x1ec>)
 8001070:	2200      	movs	r2, #0
 8001072:	805a      	strh	r2, [r3, #2]

  cQueue.head = 0;
 8001074:	4b67      	ldr	r3, [pc, #412]	; (8001214 <main+0x1f0>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
  cQueue.tail = 0;
 800107a:	4b66      	ldr	r3, [pc, #408]	; (8001214 <main+0x1f0>)
 800107c:	2200      	movs	r2, #0
 800107e:	705a      	strb	r2, [r3, #1]
  cQueue.size = CMD_BUFFER_SIZE;
 8001080:	4b65      	ldr	r3, [pc, #404]	; (8001218 <main+0x1f4>)
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	4b63      	ldr	r3, [pc, #396]	; (8001214 <main+0x1f0>)
 8001086:	709a      	strb	r2, [r3, #2]
  for (int i = 0; i < CMD_BUFFER_SIZE;i++) {
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	e00c      	b.n	80010a8 <main+0x84>
	  Command cmd;
	  cmd.index = 100;
 800108e:	2364      	movs	r3, #100	; 0x64
 8001090:	703b      	strb	r3, [r7, #0]
	  cmd.val = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	807b      	strh	r3, [r7, #2]
	  cQueue.buffer[i] = cmd;
 8001096:	4a5f      	ldr	r2, [pc, #380]	; (8001214 <main+0x1f0>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < CMD_BUFFER_SIZE;i++) {
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3301      	adds	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	4b5b      	ldr	r3, [pc, #364]	; (8001218 <main+0x1f4>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4293      	cmp	r3, r2
 80010b2:	dbec      	blt.n	800108e <main+0x6a>
  }

  PIDConfigInit(&pidTSlow, 2.5, 0.0,0.8);
 80010b4:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800121c <main+0x1f8>
 80010b8:	eddf 0a59 	vldr	s1, [pc, #356]	; 8001220 <main+0x1fc>
 80010bc:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80010c0:	4858      	ldr	r0, [pc, #352]	; (8001224 <main+0x200>)
 80010c2:	f001 f979 	bl	80023b8 <PIDConfigInit>
  PIDConfigInit(&pidSlow, 2.5, 0.0,0);
 80010c6:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8001220 <main+0x1fc>
 80010ca:	eddf 0a55 	vldr	s1, [pc, #340]	; 8001220 <main+0x1fc>
 80010ce:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80010d2:	4855      	ldr	r0, [pc, #340]	; (8001228 <main+0x204>)
 80010d4:	f001 f970 	bl	80023b8 <PIDConfigInit>
  PIDConfigInit(&pidFast, 1.5, 0.0,0);
 80010d8:	ed9f 1a51 	vldr	s2, [pc, #324]	; 8001220 <main+0x1fc>
 80010dc:	eddf 0a50 	vldr	s1, [pc, #320]	; 8001220 <main+0x1fc>
 80010e0:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 80010e4:	4851      	ldr	r0, [pc, #324]	; (800122c <main+0x208>)
 80010e6:	f001 f967 	bl	80023b8 <PIDConfigInit>
//  PIDConfigInit(&pidFast, 0.75, 0.0,0);

  	HAL_UART_Receive_IT(&huart3, aRxBuffer,RX_BUFFER_SIZE);
 80010ea:	4b51      	ldr	r3, [pc, #324]	; (8001230 <main+0x20c>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	4950      	ldr	r1, [pc, #320]	; (8001234 <main+0x210>)
 80010f4:	4850      	ldr	r0, [pc, #320]	; (8001238 <main+0x214>)
 80010f6:	f009 fd36 	bl	800ab66 <HAL_UART_Receive_IT>

	// servo motor turn
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80010fa:	210c      	movs	r1, #12
 80010fc:	484f      	ldr	r0, [pc, #316]	; (800123c <main+0x218>)
 80010fe:	f007 ff7b 	bl	8008ff8 <HAL_TIM_PWM_Start>
	// motor backwheel move
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001102:	2100      	movs	r1, #0
 8001104:	484e      	ldr	r0, [pc, #312]	; (8001240 <main+0x21c>)
 8001106:	f007 ff77 	bl	8008ff8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800110a:	2104      	movs	r1, #4
 800110c:	484c      	ldr	r0, [pc, #304]	; (8001240 <main+0x21c>)
 800110e:	f007 ff73 	bl	8008ff8 <HAL_TIM_PWM_Start>
	// encoder monitor speed and distance
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001112:	213c      	movs	r1, #60	; 0x3c
 8001114:	484b      	ldr	r0, [pc, #300]	; (8001244 <main+0x220>)
 8001116:	f008 fb03 	bl	8009720 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800111a:	213c      	movs	r1, #60	; 0x3c
 800111c:	484a      	ldr	r0, [pc, #296]	; (8001248 <main+0x224>)
 800111e:	f008 faff 	bl	8009720 <HAL_TIM_Encoder_Start>

	//adjust steering
	__RESET_SERVO_TURN(&htim1);
 8001122:	4b46      	ldr	r3, [pc, #280]	; (800123c <main+0x218>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2247      	movs	r2, #71	; 0x47
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
 800112a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800112e:	f005 fae5 	bl	80066fc <HAL_Delay>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001132:	f00a fce1 	bl	800baf8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of oledTask */
  oledTaskHandle = osThreadNew(runOledTask, NULL, &oledTask_attributes);
 8001136:	4a45      	ldr	r2, [pc, #276]	; (800124c <main+0x228>)
 8001138:	2100      	movs	r1, #0
 800113a:	4845      	ldr	r0, [pc, #276]	; (8001250 <main+0x22c>)
 800113c:	f00a fd26 	bl	800bb8c <osThreadNew>
 8001140:	4603      	mov	r3, r0
 8001142:	4a44      	ldr	r2, [pc, #272]	; (8001254 <main+0x230>)
 8001144:	6013      	str	r3, [r2, #0]

  /* creation of commandTask */
  commandTaskHandle = osThreadNew(runCmdTask, NULL, &commandTask_attributes);
 8001146:	4a44      	ldr	r2, [pc, #272]	; (8001258 <main+0x234>)
 8001148:	2100      	movs	r1, #0
 800114a:	4844      	ldr	r0, [pc, #272]	; (800125c <main+0x238>)
 800114c:	f00a fd1e 	bl	800bb8c <osThreadNew>
 8001150:	4603      	mov	r3, r0
 8001152:	4a43      	ldr	r2, [pc, #268]	; (8001260 <main+0x23c>)
 8001154:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(runADCTask, NULL, &ADCTask_attributes);
 8001156:	4a43      	ldr	r2, [pc, #268]	; (8001264 <main+0x240>)
 8001158:	2100      	movs	r1, #0
 800115a:	4843      	ldr	r0, [pc, #268]	; (8001268 <main+0x244>)
 800115c:	f00a fd16 	bl	800bb8c <osThreadNew>
 8001160:	4603      	mov	r3, r0
 8001162:	4a42      	ldr	r2, [pc, #264]	; (800126c <main+0x248>)
 8001164:	6013      	str	r3, [r2, #0]

  /* creation of moveDistTask */
  moveDistTaskHandle = osThreadNew(runMoveDistTask, NULL, &moveDistTask_attributes);
 8001166:	4a42      	ldr	r2, [pc, #264]	; (8001270 <main+0x24c>)
 8001168:	2100      	movs	r1, #0
 800116a:	4842      	ldr	r0, [pc, #264]	; (8001274 <main+0x250>)
 800116c:	f00a fd0e 	bl	800bb8c <osThreadNew>
 8001170:	4603      	mov	r3, r0
 8001172:	4a41      	ldr	r2, [pc, #260]	; (8001278 <main+0x254>)
 8001174:	6013      	str	r3, [r2, #0]

  /* creation of fastestPathTask */
  fastestPathTaskHandle = osThreadNew(runFastestPathTask, NULL, &fastestPathTask_attributes);
 8001176:	4a41      	ldr	r2, [pc, #260]	; (800127c <main+0x258>)
 8001178:	2100      	movs	r1, #0
 800117a:	4841      	ldr	r0, [pc, #260]	; (8001280 <main+0x25c>)
 800117c:	f00a fd06 	bl	800bb8c <osThreadNew>
 8001180:	4603      	mov	r3, r0
 8001182:	4a40      	ldr	r2, [pc, #256]	; (8001284 <main+0x260>)
 8001184:	6013      	str	r3, [r2, #0]

  /* creation of buzzerTask */
  buzzerTaskHandle = osThreadNew(runBuzzerTask, NULL, &buzzerTask_attributes);
 8001186:	4a40      	ldr	r2, [pc, #256]	; (8001288 <main+0x264>)
 8001188:	2100      	movs	r1, #0
 800118a:	4840      	ldr	r0, [pc, #256]	; (800128c <main+0x268>)
 800118c:	f00a fcfe 	bl	800bb8c <osThreadNew>
 8001190:	4603      	mov	r3, r0
 8001192:	4a3f      	ldr	r2, [pc, #252]	; (8001290 <main+0x26c>)
 8001194:	6013      	str	r3, [r2, #0]

  /* creation of FLTask */
  FLTaskHandle = osThreadNew(runFLTask, NULL, &FLTask_attributes);
 8001196:	4a3f      	ldr	r2, [pc, #252]	; (8001294 <main+0x270>)
 8001198:	2100      	movs	r1, #0
 800119a:	483f      	ldr	r0, [pc, #252]	; (8001298 <main+0x274>)
 800119c:	f00a fcf6 	bl	800bb8c <osThreadNew>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a3e      	ldr	r2, [pc, #248]	; (800129c <main+0x278>)
 80011a4:	6013      	str	r3, [r2, #0]

  /* creation of FRTask */
  FRTaskHandle = osThreadNew(runFRTask, NULL, &FRTask_attributes);
 80011a6:	4a3e      	ldr	r2, [pc, #248]	; (80012a0 <main+0x27c>)
 80011a8:	2100      	movs	r1, #0
 80011aa:	483e      	ldr	r0, [pc, #248]	; (80012a4 <main+0x280>)
 80011ac:	f00a fcee 	bl	800bb8c <osThreadNew>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a3d      	ldr	r2, [pc, #244]	; (80012a8 <main+0x284>)
 80011b4:	6013      	str	r3, [r2, #0]

  /* creation of BLTask */
  BLTaskHandle = osThreadNew(runBLTask, NULL, &BLTask_attributes);
 80011b6:	4a3d      	ldr	r2, [pc, #244]	; (80012ac <main+0x288>)
 80011b8:	2100      	movs	r1, #0
 80011ba:	483d      	ldr	r0, [pc, #244]	; (80012b0 <main+0x28c>)
 80011bc:	f00a fce6 	bl	800bb8c <osThreadNew>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a3c      	ldr	r2, [pc, #240]	; (80012b4 <main+0x290>)
 80011c4:	6013      	str	r3, [r2, #0]

  /* creation of BRTask */
  BRTaskHandle = osThreadNew(runBRTask, NULL, &BRTask_attributes);
 80011c6:	4a3c      	ldr	r2, [pc, #240]	; (80012b8 <main+0x294>)
 80011c8:	2100      	movs	r1, #0
 80011ca:	483c      	ldr	r0, [pc, #240]	; (80012bc <main+0x298>)
 80011cc:	f00a fcde 	bl	800bb8c <osThreadNew>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4a3b      	ldr	r2, [pc, #236]	; (80012c0 <main+0x29c>)
 80011d4:	6013      	str	r3, [r2, #0]

  /* creation of fastestPathV2 */
  fastestPathV2Handle = osThreadNew(runFastestPathTask_V2, NULL, &fastestPathV2_attributes);
 80011d6:	4a3b      	ldr	r2, [pc, #236]	; (80012c4 <main+0x2a0>)
 80011d8:	2100      	movs	r1, #0
 80011da:	483b      	ldr	r0, [pc, #236]	; (80012c8 <main+0x2a4>)
 80011dc:	f00a fcd6 	bl	800bb8c <osThreadNew>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a3a      	ldr	r2, [pc, #232]	; (80012cc <main+0x2a8>)
 80011e4:	6013      	str	r3, [r2, #0]

  /* creation of batteryTask */
  batteryTaskHandle = osThreadNew(runBatteryTask, NULL, &batteryTask_attributes);
 80011e6:	4a3a      	ldr	r2, [pc, #232]	; (80012d0 <main+0x2ac>)
 80011e8:	2100      	movs	r1, #0
 80011ea:	483a      	ldr	r0, [pc, #232]	; (80012d4 <main+0x2b0>)
 80011ec:	f00a fcce 	bl	800bb8c <osThreadNew>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a39      	ldr	r2, [pc, #228]	; (80012d8 <main+0x2b4>)
 80011f4:	6013      	str	r3, [r2, #0]

  /* creation of moveDistObsTask */
  moveDistObsTaskHandle = osThreadNew(runMoveDistObsTask, NULL, &moveDistObsTask_attributes);
 80011f6:	4a39      	ldr	r2, [pc, #228]	; (80012dc <main+0x2b8>)
 80011f8:	2100      	movs	r1, #0
 80011fa:	4839      	ldr	r0, [pc, #228]	; (80012e0 <main+0x2bc>)
 80011fc:	f00a fcc6 	bl	800bb8c <osThreadNew>
 8001200:	4603      	mov	r3, r0
 8001202:	4a38      	ldr	r2, [pc, #224]	; (80012e4 <main+0x2c0>)
 8001204:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001206:	f00a fc9b 	bl	800bb40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800120a:	e7fe      	b.n	800120a <main+0x1e6>
 800120c:	2000024c 	.word	0x2000024c
 8001210:	200004c0 	.word	0x200004c0
 8001214:	2000048c 	.word	0x2000048c
 8001218:	20000001 	.word	0x20000001
 800121c:	3f4ccccd 	.word	0x3f4ccccd
 8001220:	00000000 	.word	0x00000000
 8001224:	2000051c 	.word	0x2000051c
 8001228:	20000508 	.word	0x20000508
 800122c:	20000530 	.word	0x20000530
 8001230:	20000000 	.word	0x20000000
 8001234:	20000480 	.word	0x20000480
 8001238:	20000408 	.word	0x20000408
 800123c:	200002a0 	.word	0x200002a0
 8001240:	200003c0 	.word	0x200003c0
 8001244:	200002e8 	.word	0x200002e8
 8001248:	20000330 	.word	0x20000330
 800124c:	08010258 	.word	0x08010258
 8001250:	08003ba9 	.word	0x08003ba9
 8001254:	2000044c 	.word	0x2000044c
 8001258:	0801027c 	.word	0x0801027c
 800125c:	08003c09 	.word	0x08003c09
 8001260:	20000450 	.word	0x20000450
 8001264:	080102a0 	.word	0x080102a0
 8001268:	0800414d 	.word	0x0800414d
 800126c:	20000454 	.word	0x20000454
 8001270:	080102c4 	.word	0x080102c4
 8001274:	0800422d 	.word	0x0800422d
 8001278:	20000458 	.word	0x20000458
 800127c:	080102e8 	.word	0x080102e8
 8001280:	080044a1 	.word	0x080044a1
 8001284:	2000045c 	.word	0x2000045c
 8001288:	0801030c 	.word	0x0801030c
 800128c:	080049f1 	.word	0x080049f1
 8001290:	20000460 	.word	0x20000460
 8001294:	08010330 	.word	0x08010330
 8001298:	08004aed 	.word	0x08004aed
 800129c:	20000464 	.word	0x20000464
 80012a0:	08010354 	.word	0x08010354
 80012a4:	08004f21 	.word	0x08004f21
 80012a8:	20000468 	.word	0x20000468
 80012ac:	08010378 	.word	0x08010378
 80012b0:	0800535d 	.word	0x0800535d
 80012b4:	2000046c 	.word	0x2000046c
 80012b8:	0801039c 	.word	0x0801039c
 80012bc:	08005799 	.word	0x08005799
 80012c0:	20000470 	.word	0x20000470
 80012c4:	080103c0 	.word	0x080103c0
 80012c8:	08005bd5 	.word	0x08005bd5
 80012cc:	20000474 	.word	0x20000474
 80012d0:	080103e4 	.word	0x080103e4
 80012d4:	08005d81 	.word	0x08005d81
 80012d8:	20000478 	.word	0x20000478
 80012dc:	08010408 	.word	0x08010408
 80012e0:	08005dfd 	.word	0x08005dfd
 80012e4:	2000047c 	.word	0x2000047c

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	; 0x50
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2230      	movs	r2, #48	; 0x30
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f00d fc62 	bl	800ebc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <SystemClock_Config+0xb4>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a21      	ldr	r2, [pc, #132]	; (800139c <SystemClock_Config+0xb4>)
 8001316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <SystemClock_Config+0xb4>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <SystemClock_Config+0xb8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <SystemClock_Config+0xb8>)
 8001332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <SystemClock_Config+0xb8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134c:	2310      	movs	r3, #16
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001350:	2300      	movs	r3, #0
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	4618      	mov	r0, r3
 800135a:	f007 f94d 	bl	80085f8 <HAL_RCC_OscConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001364:	f004 fdc2 	bl	8005eec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001368:	230f      	movs	r3, #15
 800136a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f007 fbb0 	bl	8008ae8 <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800138e:	f004 fdad 	bl	8005eec <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3750      	adds	r7, #80	; 0x50
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000

080013a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013aa:	463b      	mov	r3, r7
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013b6:	4b21      	ldr	r3, [pc, #132]	; (800143c <MX_ADC1_Init+0x98>)
 80013b8:	4a21      	ldr	r2, [pc, #132]	; (8001440 <MX_ADC1_Init+0x9c>)
 80013ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <MX_ADC1_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <MX_ADC1_Init+0x98>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <MX_ADC1_Init+0x98>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_ADC1_Init+0x98>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <MX_ADC1_Init+0x98>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_ADC1_Init+0x98>)
 80013de:	2200      	movs	r2, #0
 80013e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_ADC1_Init+0x98>)
 80013e4:	4a17      	ldr	r2, [pc, #92]	; (8001444 <MX_ADC1_Init+0xa0>)
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_ADC1_Init+0x98>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_ADC1_Init+0x98>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_ADC1_Init+0x98>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_ADC1_Init+0x98>)
 80013fe:	2201      	movs	r2, #1
 8001400:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001402:	480e      	ldr	r0, [pc, #56]	; (800143c <MX_ADC1_Init+0x98>)
 8001404:	f005 f99e 	bl	8006744 <HAL_ADC_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800140e:	f004 fd6d 	bl	8005eec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001412:	230b      	movs	r3, #11
 8001414:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001416:	2301      	movs	r3, #1
 8001418:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <MX_ADC1_Init+0x98>)
 8001424:	f005 fb70 	bl	8006b08 <HAL_ADC_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800142e:	f004 fd5d 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200001bc 	.word	0x200001bc
 8001440:	40012000 	.word	0x40012000
 8001444:	0f000001 	.word	0x0f000001

08001448 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800144e:	463b      	mov	r3, r7
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <MX_ADC2_Init+0x98>)
 800145c:	4a21      	ldr	r2, [pc, #132]	; (80014e4 <MX_ADC2_Init+0x9c>)
 800145e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <MX_ADC2_Init+0x98>)
 8001462:	2200      	movs	r2, #0
 8001464:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <MX_ADC2_Init+0x98>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <MX_ADC2_Init+0x98>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <MX_ADC2_Init+0x98>)
 8001474:	2200      	movs	r2, #0
 8001476:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <MX_ADC2_Init+0x98>)
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <MX_ADC2_Init+0x98>)
 8001482:	2200      	movs	r2, #0
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <MX_ADC2_Init+0x98>)
 8001488:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <MX_ADC2_Init+0xa0>)
 800148a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <MX_ADC2_Init+0x98>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <MX_ADC2_Init+0x98>)
 8001494:	2201      	movs	r2, #1
 8001496:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <MX_ADC2_Init+0x98>)
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <MX_ADC2_Init+0x98>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014a6:	480e      	ldr	r0, [pc, #56]	; (80014e0 <MX_ADC2_Init+0x98>)
 80014a8:	f005 f94c 	bl	8006744 <HAL_ADC_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80014b2:	f004 fd1b 	bl	8005eec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80014b6:	230e      	movs	r3, #14
 80014b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014ba:	2301      	movs	r3, #1
 80014bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014c2:	463b      	mov	r3, r7
 80014c4:	4619      	mov	r1, r3
 80014c6:	4806      	ldr	r0, [pc, #24]	; (80014e0 <MX_ADC2_Init+0x98>)
 80014c8:	f005 fb1e 	bl	8006b08 <HAL_ADC_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80014d2:	f004 fd0b 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000204 	.word	0x20000204
 80014e4:	40012100 	.word	0x40012100
 80014e8:	0f000001 	.word	0x0f000001

080014ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <MX_I2C1_Init+0x50>)
 80014f2:	4a13      	ldr	r2, [pc, #76]	; (8001540 <MX_I2C1_Init+0x54>)
 80014f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_I2C1_Init+0x50>)
 80014f8:	4a12      	ldr	r2, [pc, #72]	; (8001544 <MX_I2C1_Init+0x58>)
 80014fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_I2C1_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_I2C1_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_I2C1_Init+0x50>)
 800150a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800150e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <MX_I2C1_Init+0x50>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_I2C1_Init+0x50>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <MX_I2C1_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_I2C1_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_I2C1_Init+0x50>)
 800152a:	f006 f87d 	bl	8007628 <HAL_I2C_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001534:	f004 fcda 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	2000024c 	.word	0x2000024c
 8001540:	40005400 	.word	0x40005400
 8001544:	000186a0 	.word	0x000186a0

08001548 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b096      	sub	sp, #88	; 0x58
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]
 8001576:	615a      	str	r2, [r3, #20]
 8001578:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2220      	movs	r2, #32
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f00d fb1d 	bl	800ebc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001586:	4b3e      	ldr	r3, [pc, #248]	; (8001680 <MX_TIM1_Init+0x138>)
 8001588:	4a3e      	ldr	r2, [pc, #248]	; (8001684 <MX_TIM1_Init+0x13c>)
 800158a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320;
 800158c:	4b3c      	ldr	r3, [pc, #240]	; (8001680 <MX_TIM1_Init+0x138>)
 800158e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001592:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <MX_TIM1_Init+0x138>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800159a:	4b39      	ldr	r3, [pc, #228]	; (8001680 <MX_TIM1_Init+0x138>)
 800159c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a2:	4b37      	ldr	r3, [pc, #220]	; (8001680 <MX_TIM1_Init+0x138>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015a8:	4b35      	ldr	r3, [pc, #212]	; (8001680 <MX_TIM1_Init+0x138>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015ae:	4b34      	ldr	r3, [pc, #208]	; (8001680 <MX_TIM1_Init+0x138>)
 80015b0:	2280      	movs	r2, #128	; 0x80
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015b4:	4832      	ldr	r0, [pc, #200]	; (8001680 <MX_TIM1_Init+0x138>)
 80015b6:	f007 fc77 	bl	8008ea8 <HAL_TIM_Base_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80015c0:	f004 fc94 	bl	8005eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015ce:	4619      	mov	r1, r3
 80015d0:	482b      	ldr	r0, [pc, #172]	; (8001680 <MX_TIM1_Init+0x138>)
 80015d2:	f008 fb99 	bl	8009d08 <HAL_TIM_ConfigClockSource>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80015dc:	f004 fc86 	bl	8005eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015e0:	4827      	ldr	r0, [pc, #156]	; (8001680 <MX_TIM1_Init+0x138>)
 80015e2:	f007 fcb0 	bl	8008f46 <HAL_TIM_PWM_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80015ec:	f004 fc7e 	bl	8005eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015fc:	4619      	mov	r1, r3
 80015fe:	4820      	ldr	r0, [pc, #128]	; (8001680 <MX_TIM1_Init+0x138>)
 8001600:	f009 f8f0 	bl	800a7e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800160a:	f004 fc6f 	bl	8005eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160e:	2360      	movs	r3, #96	; 0x60
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001616:	2300      	movs	r3, #0
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162a:	220c      	movs	r2, #12
 800162c:	4619      	mov	r1, r3
 800162e:	4814      	ldr	r0, [pc, #80]	; (8001680 <MX_TIM1_Init+0x138>)
 8001630:	f008 faa8 	bl	8009b84 <HAL_TIM_PWM_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800163a:	f004 fc57 	bl	8005eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001656:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	4619      	mov	r1, r3
 8001660:	4807      	ldr	r0, [pc, #28]	; (8001680 <MX_TIM1_Init+0x138>)
 8001662:	f009 f93b 	bl	800a8dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800166c:	f004 fc3e 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001670:	4803      	ldr	r0, [pc, #12]	; (8001680 <MX_TIM1_Init+0x138>)
 8001672:	f004 fe79 	bl	8006368 <HAL_TIM_MspPostInit>

}
 8001676:	bf00      	nop
 8001678:	3758      	adds	r7, #88	; 0x58
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200002a0 	.word	0x200002a0
 8001684:	40010000 	.word	0x40010000

08001688 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	2224      	movs	r2, #36	; 0x24
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f00d fa92 	bl	800ebc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016a4:	4b21      	ldr	r3, [pc, #132]	; (800172c <MX_TIM2_Init+0xa4>)
 80016a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <MX_TIM2_Init+0xa4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b2:	4b1e      	ldr	r3, [pc, #120]	; (800172c <MX_TIM2_Init+0xa4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80016b8:	4b1c      	ldr	r3, [pc, #112]	; (800172c <MX_TIM2_Init+0xa4>)
 80016ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c0:	4b1a      	ldr	r3, [pc, #104]	; (800172c <MX_TIM2_Init+0xa4>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <MX_TIM2_Init+0xa4>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016cc:	2303      	movs	r3, #3
 80016ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016d4:	2301      	movs	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80016dc:	230a      	movs	r3, #10
 80016de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016e4:	2301      	movs	r3, #1
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80016ec:	230a      	movs	r3, #10
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	4619      	mov	r1, r3
 80016f6:	480d      	ldr	r0, [pc, #52]	; (800172c <MX_TIM2_Init+0xa4>)
 80016f8:	f007 ff6c 	bl	80095d4 <HAL_TIM_Encoder_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001702:	f004 fbf3 	bl	8005eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	4619      	mov	r1, r3
 8001712:	4806      	ldr	r0, [pc, #24]	; (800172c <MX_TIM2_Init+0xa4>)
 8001714:	f009 f866 	bl	800a7e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800171e:	f004 fbe5 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	3730      	adds	r7, #48	; 0x30
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200002e8 	.word	0x200002e8

08001730 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08c      	sub	sp, #48	; 0x30
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	2224      	movs	r2, #36	; 0x24
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f00d fa3e 	bl	800ebc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <MX_TIM3_Init+0xa0>)
 800174e:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <MX_TIM3_Init+0xa4>)
 8001750:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <MX_TIM3_Init+0xa0>)
 8001754:	2200      	movs	r2, #0
 8001756:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <MX_TIM3_Init+0xa0>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <MX_TIM3_Init+0xa0>)
 8001760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001764:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <MX_TIM3_Init+0xa0>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <MX_TIM3_Init+0xa0>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001772:	2303      	movs	r3, #3
 8001774:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800177a:	2301      	movs	r3, #1
 800177c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001782:	230a      	movs	r3, #10
 8001784:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800178a:	2301      	movs	r3, #1
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001792:	230a      	movs	r3, #10
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	4619      	mov	r1, r3
 800179c:	480c      	ldr	r0, [pc, #48]	; (80017d0 <MX_TIM3_Init+0xa0>)
 800179e:	f007 ff19 	bl	80095d4 <HAL_TIM_Encoder_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017a8:	f004 fba0 	bl	8005eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_TIM3_Init+0xa0>)
 80017ba:	f009 f813 	bl	800a7e4 <HAL_TIMEx_MasterConfigSynchronization>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80017c4:	f004 fb92 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	3730      	adds	r7, #48	; 0x30
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000330 	.word	0x20000330
 80017d4:	40000400 	.word	0x40000400

080017d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017e8:	463b      	mov	r3, r7
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017f4:	4b20      	ldr	r3, [pc, #128]	; (8001878 <MX_TIM4_Init+0xa0>)
 80017f6:	4a21      	ldr	r2, [pc, #132]	; (800187c <MX_TIM4_Init+0xa4>)
 80017f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <MX_TIM4_Init+0xa0>)
 80017fc:	220f      	movs	r2, #15
 80017fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001800:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <MX_TIM4_Init+0xa0>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <MX_TIM4_Init+0xa0>)
 8001808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800180c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <MX_TIM4_Init+0xa0>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <MX_TIM4_Init+0xa0>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800181a:	4817      	ldr	r0, [pc, #92]	; (8001878 <MX_TIM4_Init+0xa0>)
 800181c:	f007 fcb4 	bl	8009188 <HAL_TIM_IC_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001826:	f004 fb61 	bl	8005eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	4619      	mov	r1, r3
 8001838:	480f      	ldr	r0, [pc, #60]	; (8001878 <MX_TIM4_Init+0xa0>)
 800183a:	f008 ffd3 	bl	800a7e4 <HAL_TIMEx_MasterConfigSynchronization>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001844:	f004 fb52 	bl	8005eec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001848:	2300      	movs	r3, #0
 800184a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800184c:	2301      	movs	r3, #1
 800184e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001858:	463b      	mov	r3, r7
 800185a:	2204      	movs	r2, #4
 800185c:	4619      	mov	r1, r3
 800185e:	4806      	ldr	r0, [pc, #24]	; (8001878 <MX_TIM4_Init+0xa0>)
 8001860:	f008 f8f4 	bl	8009a4c <HAL_TIM_IC_ConfigChannel>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800186a:	f004 fb3f 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000378 	.word	0x20000378
 800187c:	40000800 	.word	0x40000800

08001880 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b096      	sub	sp, #88	; 0x58
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001886:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001894:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800189e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]
 80018ae:	615a      	str	r2, [r3, #20]
 80018b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2220      	movs	r2, #32
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f00d f981 	bl	800ebc0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018be:	4b43      	ldr	r3, [pc, #268]	; (80019cc <MX_TIM8_Init+0x14c>)
 80018c0:	4a43      	ldr	r2, [pc, #268]	; (80019d0 <MX_TIM8_Init+0x150>)
 80018c2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80018c4:	4b41      	ldr	r3, [pc, #260]	; (80019cc <MX_TIM8_Init+0x14c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ca:	4b40      	ldr	r3, [pc, #256]	; (80019cc <MX_TIM8_Init+0x14c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80018d0:	4b3e      	ldr	r3, [pc, #248]	; (80019cc <MX_TIM8_Init+0x14c>)
 80018d2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80018d6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d8:	4b3c      	ldr	r3, [pc, #240]	; (80019cc <MX_TIM8_Init+0x14c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018de:	4b3b      	ldr	r3, [pc, #236]	; (80019cc <MX_TIM8_Init+0x14c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e4:	4b39      	ldr	r3, [pc, #228]	; (80019cc <MX_TIM8_Init+0x14c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80018ea:	4838      	ldr	r0, [pc, #224]	; (80019cc <MX_TIM8_Init+0x14c>)
 80018ec:	f007 fadc 	bl	8008ea8 <HAL_TIM_Base_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80018f6:	f004 faf9 	bl	8005eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001900:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001904:	4619      	mov	r1, r3
 8001906:	4831      	ldr	r0, [pc, #196]	; (80019cc <MX_TIM8_Init+0x14c>)
 8001908:	f008 f9fe 	bl	8009d08 <HAL_TIM_ConfigClockSource>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001912:	f004 faeb 	bl	8005eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001916:	482d      	ldr	r0, [pc, #180]	; (80019cc <MX_TIM8_Init+0x14c>)
 8001918:	f007 fb15 	bl	8008f46 <HAL_TIM_PWM_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001922:	f004 fae3 	bl	8005eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800192e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001932:	4619      	mov	r1, r3
 8001934:	4825      	ldr	r0, [pc, #148]	; (80019cc <MX_TIM8_Init+0x14c>)
 8001936:	f008 ff55 	bl	800a7e4 <HAL_TIMEx_MasterConfigSynchronization>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001940:	f004 fad4 	bl	8005eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001944:	2360      	movs	r3, #96	; 0x60
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194c:	2300      	movs	r3, #0
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001950:	2300      	movs	r3, #0
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001964:	2200      	movs	r2, #0
 8001966:	4619      	mov	r1, r3
 8001968:	4818      	ldr	r0, [pc, #96]	; (80019cc <MX_TIM8_Init+0x14c>)
 800196a:	f008 f90b 	bl	8009b84 <HAL_TIM_PWM_ConfigChannel>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001974:	f004 faba 	bl	8005eec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197c:	2204      	movs	r2, #4
 800197e:	4619      	mov	r1, r3
 8001980:	4812      	ldr	r0, [pc, #72]	; (80019cc <MX_TIM8_Init+0x14c>)
 8001982:	f008 f8ff 	bl	8009b84 <HAL_TIM_PWM_ConfigChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800198c:	f004 faae 	bl	8005eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <MX_TIM8_Init+0x14c>)
 80019b4:	f008 ff92 	bl	800a8dc <HAL_TIMEx_ConfigBreakDeadTime>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80019be:	f004 fa95 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	3758      	adds	r7, #88	; 0x58
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200003c0 	.word	0x200003c0
 80019d0:	40010400 	.word	0x40010400

080019d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 80019da:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <MX_USART3_UART_Init+0x50>)
 80019dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 80019e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 80019fa:	220c      	movs	r2, #12
 80019fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 8001a0c:	f008 ffcc 	bl	800a9a8 <HAL_UART_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a16:	f004 fa69 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000408 	.word	0x20000408
 8001a24:	40004800 	.word	0x40004800

08001a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	4b4d      	ldr	r3, [pc, #308]	; (8001b78 <MX_GPIO_Init+0x150>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a4c      	ldr	r2, [pc, #304]	; (8001b78 <MX_GPIO_Init+0x150>)
 8001a48:	f043 0310 	orr.w	r3, r3, #16
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b4a      	ldr	r3, [pc, #296]	; (8001b78 <MX_GPIO_Init+0x150>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <MX_GPIO_Init+0x150>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a45      	ldr	r2, [pc, #276]	; (8001b78 <MX_GPIO_Init+0x150>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <MX_GPIO_Init+0x150>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <MX_GPIO_Init+0x150>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a3e      	ldr	r2, [pc, #248]	; (8001b78 <MX_GPIO_Init+0x150>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b3c      	ldr	r3, [pc, #240]	; (8001b78 <MX_GPIO_Init+0x150>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <MX_GPIO_Init+0x150>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a37      	ldr	r2, [pc, #220]	; (8001b78 <MX_GPIO_Init+0x150>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <MX_GPIO_Init+0x150>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <MX_GPIO_Init+0x150>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a30      	ldr	r2, [pc, #192]	; (8001b78 <MX_GPIO_Init+0x150>)
 8001ab8:	f043 0308 	orr.w	r3, r3, #8
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <MX_GPIO_Init+0x150>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001aca:	2200      	movs	r2, #0
 8001acc:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001ad0:	482a      	ldr	r0, [pc, #168]	; (8001b7c <MX_GPIO_Init+0x154>)
 8001ad2:	f005 fd77 	bl	80075c4 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	213c      	movs	r1, #60	; 0x3c
 8001ada:	4829      	ldr	r0, [pc, #164]	; (8001b80 <MX_GPIO_Init+0x158>)
 8001adc:	f005 fd72 	bl	80075c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|TRI_Pin, GPIO_PIN_RESET);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001ae6:	4827      	ldr	r0, [pc, #156]	; (8001b84 <MX_GPIO_Init+0x15c>)
 8001ae8:	f005 fd6c 	bl	80075c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001aec:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001af0:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	481d      	ldr	r0, [pc, #116]	; (8001b7c <MX_GPIO_Init+0x154>)
 8001b06:	f005 fbc1 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001b0a:	233c      	movs	r3, #60	; 0x3c
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b16:	2302      	movs	r3, #2
 8001b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4817      	ldr	r0, [pc, #92]	; (8001b80 <MX_GPIO_Init+0x158>)
 8001b22:	f005 fbb3 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin TRI_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|TRI_Pin;
 8001b26:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4811      	ldr	r0, [pc, #68]	; (8001b84 <MX_GPIO_Init+0x15c>)
 8001b40:	f005 fba4 	bl	800728c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480b      	ldr	r0, [pc, #44]	; (8001b88 <MX_GPIO_Init+0x160>)
 8001b5c:	f005 fb96 	bl	800728c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2105      	movs	r1, #5
 8001b64:	2017      	movs	r0, #23
 8001b66:	f005 fac8 	bl	80070fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b6a:	2017      	movs	r0, #23
 8001b6c:	f005 fae1 	bl	8007132 <HAL_NVIC_EnableIRQ>

}
 8001b70:	bf00      	nop
 8001b72:	3728      	adds	r7, #40	; 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020400 	.word	0x40020400
 8001b88:	40020c00 	.word	0x40020c00

08001b8c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// HAL_UART_RxCpltCallback evoked when buffer is full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	// prevent unused argument(s) compilation warning
	UNUSED(huart);
	int val;

	val = (aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 8001b94:	4b8f      	ldr	r3, [pc, #572]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001b96:	789b      	ldrb	r3, [r3, #2]
 8001b98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b8b      	ldr	r3, [pc, #556]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001ba8:	78db      	ldrb	r3, [r3, #3]
 8001baa:	3b30      	subs	r3, #48	; 0x30
 8001bac:	4413      	add	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
	if (aRxBuffer[1] >= '0' && aRxBuffer[1] <= '9') val += (aRxBuffer[1] - 48) * 100;
 8001bb0:	4b88      	ldr	r3, [pc, #544]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001bb2:	785b      	ldrb	r3, [r3, #1]
 8001bb4:	2b2f      	cmp	r3, #47	; 0x2f
 8001bb6:	d90c      	bls.n	8001bd2 <HAL_UART_RxCpltCallback+0x46>
 8001bb8:	4b86      	ldr	r3, [pc, #536]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001bba:	785b      	ldrb	r3, [r3, #1]
 8001bbc:	2b39      	cmp	r3, #57	; 0x39
 8001bbe:	d808      	bhi.n	8001bd2 <HAL_UART_RxCpltCallback+0x46>
 8001bc0:	4b84      	ldr	r3, [pc, #528]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001bc2:	785b      	ldrb	r3, [r3, #1]
 8001bc4:	3b30      	subs	r3, #48	; 0x30
 8001bc6:	2264      	movs	r2, #100	; 0x64
 8001bc8:	fb02 f303 	mul.w	r3, r2, r3
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

	manualMode = 0;
 8001bd2:	4b81      	ldr	r3, [pc, #516]	; (8001dd8 <HAL_UART_RxCpltCallback+0x24c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]

	if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T') { // only STOP can preempt any greedy task
 8001bd8:	4b7e      	ldr	r3, [pc, #504]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b53      	cmp	r3, #83	; 0x53
 8001bde:	d159      	bne.n	8001c94 <HAL_UART_RxCpltCallback+0x108>
 8001be0:	4b7c      	ldr	r3, [pc, #496]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001be2:	785b      	ldrb	r3, [r3, #1]
 8001be4:	2b54      	cmp	r3, #84	; 0x54
 8001be6:	d155      	bne.n	8001c94 <HAL_UART_RxCpltCallback+0x108>
//		__ADD_COMMAND(cQueue, 0, 0); // stop
		__ON_TASK_END(&htim8, prevTask, curTask);
 8001be8:	4b7c      	ldr	r3, [pc, #496]	; (8001ddc <HAL_UART_RxCpltCallback+0x250>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2200      	movs	r2, #0
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34
 8001bf0:	4b7a      	ldr	r3, [pc, #488]	; (8001ddc <HAL_UART_RxCpltCallback+0x250>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	639a      	str	r2, [r3, #56]	; 0x38
 8001bf8:	4b79      	ldr	r3, [pc, #484]	; (8001de0 <HAL_UART_RxCpltCallback+0x254>)
 8001bfa:	781a      	ldrb	r2, [r3, #0]
 8001bfc:	4b79      	ldr	r3, [pc, #484]	; (8001de4 <HAL_UART_RxCpltCallback+0x258>)
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	4b77      	ldr	r3, [pc, #476]	; (8001de0 <HAL_UART_RxCpltCallback+0x254>)
 8001c02:	220b      	movs	r2, #11
 8001c04:	701a      	strb	r2, [r3, #0]
		  angleNow = 0; gyroZ = 0; // reset angle for PID
 8001c06:	4b78      	ldr	r3, [pc, #480]	; (8001de8 <HAL_UART_RxCpltCallback+0x25c>)
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	4b77      	ldr	r3, [pc, #476]	; (8001dec <HAL_UART_RxCpltCallback+0x260>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	801a      	strh	r2, [r3, #0]
		PIDConfigReset(&pidTSlow);
 8001c14:	4876      	ldr	r0, [pc, #472]	; (8001df0 <HAL_UART_RxCpltCallback+0x264>)
 8001c16:	f000 fbf0 	bl	80023fa <PIDConfigReset>
		PIDConfigReset(&pidSlow);
 8001c1a:	4876      	ldr	r0, [pc, #472]	; (8001df4 <HAL_UART_RxCpltCallback+0x268>)
 8001c1c:	f000 fbed 	bl	80023fa <PIDConfigReset>
		PIDConfigReset(&pidFast);
 8001c20:	4875      	ldr	r0, [pc, #468]	; (8001df8 <HAL_UART_RxCpltCallback+0x26c>)
 8001c22:	f000 fbea 	bl	80023fa <PIDConfigReset>
		curDistTick = 0;
 8001c26:	4b75      	ldr	r3, [pc, #468]	; (8001dfc <HAL_UART_RxCpltCallback+0x270>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	801a      	strh	r2, [r3, #0]
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8001c2c:	4b74      	ldr	r3, [pc, #464]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	4b73      	ldr	r3, [pc, #460]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001c32:	785b      	ldrb	r3, [r3, #1]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d112      	bne.n	8001c5e <HAL_UART_RxCpltCallback+0xd2>
			__CLEAR_CURCMD(curCmd);
 8001c38:	4b72      	ldr	r3, [pc, #456]	; (8001e04 <HAL_UART_RxCpltCallback+0x278>)
 8001c3a:	2264      	movs	r2, #100	; 0x64
 8001c3c:	701a      	strb	r2, [r3, #0]
 8001c3e:	4b71      	ldr	r3, [pc, #452]	; (8001e04 <HAL_UART_RxCpltCallback+0x278>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 8001c44:	4a70      	ldr	r2, [pc, #448]	; (8001e08 <HAL_UART_RxCpltCallback+0x27c>)
 8001c46:	210f      	movs	r1, #15
 8001c48:	4870      	ldr	r0, [pc, #448]	; (8001e0c <HAL_UART_RxCpltCallback+0x280>)
 8001c4a:	f00c ff85 	bl	800eb58 <sniprintf>
 8001c4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c52:	2206      	movs	r2, #6
 8001c54:	496e      	ldr	r1, [pc, #440]	; (8001e10 <HAL_UART_RxCpltCallback+0x284>)
 8001c56:	486f      	ldr	r0, [pc, #444]	; (8001e14 <HAL_UART_RxCpltCallback+0x288>)
 8001c58:	f008 fef3 	bl	800aa42 <HAL_UART_Transmit>
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8001c5c:	e303      	b.n	8002266 <HAL_UART_RxCpltCallback+0x6da>
		}
		else {
			__READ_COMMAND(cQueue, curCmd, rxMsg);
 8001c5e:	4b68      	ldr	r3, [pc, #416]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	4a68      	ldr	r2, [pc, #416]	; (8001e04 <HAL_UART_RxCpltCallback+0x278>)
 8001c64:	4966      	ldr	r1, [pc, #408]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b64      	ldr	r3, [pc, #400]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001c70:	785b      	ldrb	r3, [r3, #1]
 8001c72:	3301      	adds	r3, #1
 8001c74:	4a62      	ldr	r2, [pc, #392]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001c76:	7892      	ldrb	r2, [r2, #2]
 8001c78:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c7c:	fb01 f202 	mul.w	r2, r1, r2
 8001c80:	1a9b      	subs	r3, r3, r2
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	4b5e      	ldr	r3, [pc, #376]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001c86:	705a      	strb	r2, [r3, #1]
 8001c88:	4a63      	ldr	r2, [pc, #396]	; (8001e18 <HAL_UART_RxCpltCallback+0x28c>)
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	485f      	ldr	r0, [pc, #380]	; (8001e0c <HAL_UART_RxCpltCallback+0x280>)
 8001c8e:	f00c ff63 	bl	800eb58 <sniprintf>
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8001c92:	e2e8      	b.n	8002266 <HAL_UART_RxCpltCallback+0x6da>
		}
	}
	else if (aRxBuffer[0] == 'F' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S')) { //FW or FS
 8001c94:	4b4f      	ldr	r3, [pc, #316]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b46      	cmp	r3, #70	; 0x46
 8001c9a:	d13d      	bne.n	8001d18 <HAL_UART_RxCpltCallback+0x18c>
 8001c9c:	4b4d      	ldr	r3, [pc, #308]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001c9e:	785b      	ldrb	r3, [r3, #1]
 8001ca0:	2b57      	cmp	r3, #87	; 0x57
 8001ca2:	d003      	beq.n	8001cac <HAL_UART_RxCpltCallback+0x120>
 8001ca4:	4b4b      	ldr	r3, [pc, #300]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001ca6:	785b      	ldrb	r3, [r3, #1]
 8001ca8:	2b53      	cmp	r3, #83	; 0x53
 8001caa:	d135      	bne.n	8001d18 <HAL_UART_RxCpltCallback+0x18c>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001cac:	4b49      	ldr	r3, [pc, #292]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001cae:	789b      	ldrb	r3, [r3, #2]
 8001cb0:	2b2d      	cmp	r3, #45	; 0x2d
 8001cb2:	d105      	bne.n	8001cc0 <HAL_UART_RxCpltCallback+0x134>
 8001cb4:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001cb6:	78db      	ldrb	r3, [r3, #3]
 8001cb8:	2b2d      	cmp	r3, #45	; 0x2d
 8001cba:	d101      	bne.n	8001cc0 <HAL_UART_RxCpltCallback+0x134>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <HAL_UART_RxCpltCallback+0x136>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	4b44      	ldr	r3, [pc, #272]	; (8001dd8 <HAL_UART_RxCpltCallback+0x24c>)
 8001cc6:	701a      	strb	r2, [r3, #0]
		moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001cc8:	4b42      	ldr	r3, [pc, #264]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	2b53      	cmp	r3, #83	; 0x53
 8001cce:	bf14      	ite	ne
 8001cd0:	2301      	movne	r3, #1
 8001cd2:	2300      	moveq	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b50      	ldr	r3, [pc, #320]	; (8001e1c <HAL_UART_RxCpltCallback+0x290>)
 8001cda:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 1, val);
 8001cdc:	4b48      	ldr	r3, [pc, #288]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4a47      	ldr	r2, [pc, #284]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	711a      	strb	r2, [r3, #4]
 8001cea:	4b45      	ldr	r3, [pc, #276]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	b291      	uxth	r1, r2
 8001cf2:	4a43      	ldr	r2, [pc, #268]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	460a      	mov	r2, r1
 8001cfa:	80da      	strh	r2, [r3, #6]
 8001cfc:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	3301      	adds	r3, #1
 8001d02:	4a3f      	ldr	r2, [pc, #252]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001d04:	7892      	ldrb	r2, [r2, #2]
 8001d06:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d0a:	fb01 f202 	mul.w	r2, r1, r2
 8001d0e:	1a9b      	subs	r3, r3, r2
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4b3b      	ldr	r3, [pc, #236]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001d14:	701a      	strb	r2, [r3, #0]
 8001d16:	e2a6      	b.n	8002266 <HAL_UART_RxCpltCallback+0x6da>
	}
	else if (aRxBuffer[0] == 'B' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S')) { //BW or BS
 8001d18:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b42      	cmp	r3, #66	; 0x42
 8001d1e:	d13d      	bne.n	8001d9c <HAL_UART_RxCpltCallback+0x210>
 8001d20:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001d22:	785b      	ldrb	r3, [r3, #1]
 8001d24:	2b57      	cmp	r3, #87	; 0x57
 8001d26:	d003      	beq.n	8001d30 <HAL_UART_RxCpltCallback+0x1a4>
 8001d28:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	2b53      	cmp	r3, #83	; 0x53
 8001d2e:	d135      	bne.n	8001d9c <HAL_UART_RxCpltCallback+0x210>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001d30:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001d32:	789b      	ldrb	r3, [r3, #2]
 8001d34:	2b2d      	cmp	r3, #45	; 0x2d
 8001d36:	d105      	bne.n	8001d44 <HAL_UART_RxCpltCallback+0x1b8>
 8001d38:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001d3a:	78db      	ldrb	r3, [r3, #3]
 8001d3c:	2b2d      	cmp	r3, #45	; 0x2d
 8001d3e:	d101      	bne.n	8001d44 <HAL_UART_RxCpltCallback+0x1b8>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_UART_RxCpltCallback+0x1ba>
 8001d44:	2300      	movs	r3, #0
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <HAL_UART_RxCpltCallback+0x24c>)
 8001d4a:	701a      	strb	r2, [r3, #0]
		moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001d4c:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001d4e:	785b      	ldrb	r3, [r3, #1]
 8001d50:	2b53      	cmp	r3, #83	; 0x53
 8001d52:	bf14      	ite	ne
 8001d54:	2301      	movne	r3, #1
 8001d56:	2300      	moveq	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b2f      	ldr	r3, [pc, #188]	; (8001e1c <HAL_UART_RxCpltCallback+0x290>)
 8001d5e:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 2, val);
 8001d60:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4a26      	ldr	r2, [pc, #152]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	711a      	strb	r2, [r3, #4]
 8001d6e:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	b291      	uxth	r1, r2
 8001d76:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	460a      	mov	r2, r1
 8001d7e:	80da      	strh	r2, [r3, #6]
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	3301      	adds	r3, #1
 8001d86:	4a1e      	ldr	r2, [pc, #120]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001d88:	7892      	ldrb	r2, [r2, #2]
 8001d8a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d8e:	fb01 f202 	mul.w	r2, r1, r2
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <HAL_UART_RxCpltCallback+0x274>)
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	e264      	b.n	8002266 <HAL_UART_RxCpltCallback+0x6da>
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L') { // FL
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b46      	cmp	r3, #70	; 0x46
 8001da2:	d15c      	bne.n	8001e5e <HAL_UART_RxCpltCallback+0x2d2>
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001da6:	785b      	ldrb	r3, [r3, #1]
 8001da8:	2b4c      	cmp	r3, #76	; 0x4c
 8001daa:	d158      	bne.n	8001e5e <HAL_UART_RxCpltCallback+0x2d2>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001dae:	789b      	ldrb	r3, [r3, #2]
 8001db0:	2b2d      	cmp	r3, #45	; 0x2d
 8001db2:	d105      	bne.n	8001dc0 <HAL_UART_RxCpltCallback+0x234>
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <HAL_UART_RxCpltCallback+0x248>)
 8001db6:	78db      	ldrb	r3, [r3, #3]
 8001db8:	2b2d      	cmp	r3, #45	; 0x2d
 8001dba:	d101      	bne.n	8001dc0 <HAL_UART_RxCpltCallback+0x234>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <HAL_UART_RxCpltCallback+0x236>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <HAL_UART_RxCpltCallback+0x24c>)
 8001dc6:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 3 + (manualMode ? 0 : 4), val);
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <HAL_UART_RxCpltCallback+0x24c>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d027      	beq.n	8001e20 <HAL_UART_RxCpltCallback+0x294>
 8001dd0:	2103      	movs	r1, #3
 8001dd2:	e026      	b.n	8001e22 <HAL_UART_RxCpltCallback+0x296>
 8001dd4:	20000480 	.word	0x20000480
 8001dd8:	200004e4 	.word	0x200004e4
 8001ddc:	200003c0 	.word	0x200003c0
 8001de0:	20000134 	.word	0x20000134
 8001de4:	20000135 	.word	0x20000135
 8001de8:	200004ec 	.word	0x200004ec
 8001dec:	200004f2 	.word	0x200004f2
 8001df0:	2000051c 	.word	0x2000051c
 8001df4:	20000508 	.word	0x20000508
 8001df8:	20000530 	.word	0x20000530
 8001dfc:	20000500 	.word	0x20000500
 8001e00:	2000048c 	.word	0x2000048c
 8001e04:	200004c0 	.word	0x200004c0
 8001e08:	08010218 	.word	0x08010218
 8001e0c:	200004c4 	.word	0x200004c4
 8001e10:	08010220 	.word	0x08010220
 8001e14:	20000408 	.word	0x20000408
 8001e18:	08010228 	.word	0x08010228
 8001e1c:	20000136 	.word	0x20000136
 8001e20:	2107      	movs	r1, #7
 8001e22:	4b8d      	ldr	r3, [pc, #564]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	4a8c      	ldr	r2, [pc, #560]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	711a      	strb	r2, [r3, #4]
 8001e30:	4b89      	ldr	r3, [pc, #548]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	b291      	uxth	r1, r2
 8001e38:	4a87      	ldr	r2, [pc, #540]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	460a      	mov	r2, r1
 8001e40:	80da      	strh	r2, [r3, #6]
 8001e42:	4b85      	ldr	r3, [pc, #532]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	3301      	adds	r3, #1
 8001e48:	4a83      	ldr	r2, [pc, #524]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001e4a:	7892      	ldrb	r2, [r2, #2]
 8001e4c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e50:	fb01 f202 	mul.w	r2, r1, r2
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b7f      	ldr	r3, [pc, #508]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001e5a:	701a      	strb	r2, [r3, #0]
 8001e5c:	e203      	b.n	8002266 <HAL_UART_RxCpltCallback+0x6da>
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R') { // FR
 8001e5e:	4b7f      	ldr	r3, [pc, #508]	; (800205c <HAL_UART_RxCpltCallback+0x4d0>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b46      	cmp	r3, #70	; 0x46
 8001e64:	d136      	bne.n	8001ed4 <HAL_UART_RxCpltCallback+0x348>
 8001e66:	4b7d      	ldr	r3, [pc, #500]	; (800205c <HAL_UART_RxCpltCallback+0x4d0>)
 8001e68:	785b      	ldrb	r3, [r3, #1]
 8001e6a:	2b52      	cmp	r3, #82	; 0x52
 8001e6c:	d132      	bne.n	8001ed4 <HAL_UART_RxCpltCallback+0x348>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001e6e:	4b7b      	ldr	r3, [pc, #492]	; (800205c <HAL_UART_RxCpltCallback+0x4d0>)
 8001e70:	789b      	ldrb	r3, [r3, #2]
 8001e72:	2b2d      	cmp	r3, #45	; 0x2d
 8001e74:	d105      	bne.n	8001e82 <HAL_UART_RxCpltCallback+0x2f6>
 8001e76:	4b79      	ldr	r3, [pc, #484]	; (800205c <HAL_UART_RxCpltCallback+0x4d0>)
 8001e78:	78db      	ldrb	r3, [r3, #3]
 8001e7a:	2b2d      	cmp	r3, #45	; 0x2d
 8001e7c:	d101      	bne.n	8001e82 <HAL_UART_RxCpltCallback+0x2f6>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_UART_RxCpltCallback+0x2f8>
 8001e82:	2300      	movs	r3, #0
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b76      	ldr	r3, [pc, #472]	; (8002060 <HAL_UART_RxCpltCallback+0x4d4>)
 8001e88:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 4 + (manualMode ? 0 : 4), val);
 8001e8a:	4b75      	ldr	r3, [pc, #468]	; (8002060 <HAL_UART_RxCpltCallback+0x4d4>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_UART_RxCpltCallback+0x30a>
 8001e92:	2104      	movs	r1, #4
 8001e94:	e000      	b.n	8001e98 <HAL_UART_RxCpltCallback+0x30c>
 8001e96:	2108      	movs	r1, #8
 8001e98:	4b6f      	ldr	r3, [pc, #444]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4a6e      	ldr	r2, [pc, #440]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	460a      	mov	r2, r1
 8001ea4:	711a      	strb	r2, [r3, #4]
 8001ea6:	4b6c      	ldr	r3, [pc, #432]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	b291      	uxth	r1, r2
 8001eae:	4a6a      	ldr	r2, [pc, #424]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	80da      	strh	r2, [r3, #6]
 8001eb8:	4b67      	ldr	r3, [pc, #412]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	4a66      	ldr	r2, [pc, #408]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001ec0:	7892      	ldrb	r2, [r2, #2]
 8001ec2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ec6:	fb01 f202 	mul.w	r2, r1, r2
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4b62      	ldr	r3, [pc, #392]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001ed0:	701a      	strb	r2, [r3, #0]
 8001ed2:	e1c8      	b.n	8002266 <HAL_UART_RxCpltCallback+0x6da>
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'L') { // BL
 8001ed4:	4b61      	ldr	r3, [pc, #388]	; (800205c <HAL_UART_RxCpltCallback+0x4d0>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b42      	cmp	r3, #66	; 0x42
 8001eda:	d136      	bne.n	8001f4a <HAL_UART_RxCpltCallback+0x3be>
 8001edc:	4b5f      	ldr	r3, [pc, #380]	; (800205c <HAL_UART_RxCpltCallback+0x4d0>)
 8001ede:	785b      	ldrb	r3, [r3, #1]
 8001ee0:	2b4c      	cmp	r3, #76	; 0x4c
 8001ee2:	d132      	bne.n	8001f4a <HAL_UART_RxCpltCallback+0x3be>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001ee4:	4b5d      	ldr	r3, [pc, #372]	; (800205c <HAL_UART_RxCpltCallback+0x4d0>)
 8001ee6:	789b      	ldrb	r3, [r3, #2]
 8001ee8:	2b2d      	cmp	r3, #45	; 0x2d
 8001eea:	d105      	bne.n	8001ef8 <HAL_UART_RxCpltCallback+0x36c>
 8001eec:	4b5b      	ldr	r3, [pc, #364]	; (800205c <HAL_UART_RxCpltCallback+0x4d0>)
 8001eee:	78db      	ldrb	r3, [r3, #3]
 8001ef0:	2b2d      	cmp	r3, #45	; 0x2d
 8001ef2:	d101      	bne.n	8001ef8 <HAL_UART_RxCpltCallback+0x36c>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_UART_RxCpltCallback+0x36e>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b58      	ldr	r3, [pc, #352]	; (8002060 <HAL_UART_RxCpltCallback+0x4d4>)
 8001efe:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 5 + (manualMode ? 0 : 4), val);
 8001f00:	4b57      	ldr	r3, [pc, #348]	; (8002060 <HAL_UART_RxCpltCallback+0x4d4>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_UART_RxCpltCallback+0x380>
 8001f08:	2105      	movs	r1, #5
 8001f0a:	e000      	b.n	8001f0e <HAL_UART_RxCpltCallback+0x382>
 8001f0c:	2109      	movs	r1, #9
 8001f0e:	4b52      	ldr	r3, [pc, #328]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	4a51      	ldr	r2, [pc, #324]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	460a      	mov	r2, r1
 8001f1a:	711a      	strb	r2, [r3, #4]
 8001f1c:	4b4e      	ldr	r3, [pc, #312]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	b291      	uxth	r1, r2
 8001f24:	4a4c      	ldr	r2, [pc, #304]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	460a      	mov	r2, r1
 8001f2c:	80da      	strh	r2, [r3, #6]
 8001f2e:	4b4a      	ldr	r3, [pc, #296]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	3301      	adds	r3, #1
 8001f34:	4a48      	ldr	r2, [pc, #288]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f36:	7892      	ldrb	r2, [r2, #2]
 8001f38:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f3c:	fb01 f202 	mul.w	r2, r1, r2
 8001f40:	1a9b      	subs	r3, r3, r2
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b44      	ldr	r3, [pc, #272]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	e18d      	b.n	8002266 <HAL_UART_RxCpltCallback+0x6da>
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'R') { // BR
 8001f4a:	4b44      	ldr	r3, [pc, #272]	; (800205c <HAL_UART_RxCpltCallback+0x4d0>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b42      	cmp	r3, #66	; 0x42
 8001f50:	d136      	bne.n	8001fc0 <HAL_UART_RxCpltCallback+0x434>
 8001f52:	4b42      	ldr	r3, [pc, #264]	; (800205c <HAL_UART_RxCpltCallback+0x4d0>)
 8001f54:	785b      	ldrb	r3, [r3, #1]
 8001f56:	2b52      	cmp	r3, #82	; 0x52
 8001f58:	d132      	bne.n	8001fc0 <HAL_UART_RxCpltCallback+0x434>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001f5a:	4b40      	ldr	r3, [pc, #256]	; (800205c <HAL_UART_RxCpltCallback+0x4d0>)
 8001f5c:	789b      	ldrb	r3, [r3, #2]
 8001f5e:	2b2d      	cmp	r3, #45	; 0x2d
 8001f60:	d105      	bne.n	8001f6e <HAL_UART_RxCpltCallback+0x3e2>
 8001f62:	4b3e      	ldr	r3, [pc, #248]	; (800205c <HAL_UART_RxCpltCallback+0x4d0>)
 8001f64:	78db      	ldrb	r3, [r3, #3]
 8001f66:	2b2d      	cmp	r3, #45	; 0x2d
 8001f68:	d101      	bne.n	8001f6e <HAL_UART_RxCpltCallback+0x3e2>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_UART_RxCpltCallback+0x3e4>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <HAL_UART_RxCpltCallback+0x4d4>)
 8001f74:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 6 + (manualMode ? 0 : 4), val);
 8001f76:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <HAL_UART_RxCpltCallback+0x4d4>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_UART_RxCpltCallback+0x3f6>
 8001f7e:	2106      	movs	r1, #6
 8001f80:	e000      	b.n	8001f84 <HAL_UART_RxCpltCallback+0x3f8>
 8001f82:	210a      	movs	r1, #10
 8001f84:	4b34      	ldr	r3, [pc, #208]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	4a33      	ldr	r2, [pc, #204]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	460a      	mov	r2, r1
 8001f90:	711a      	strb	r2, [r3, #4]
 8001f92:	4b31      	ldr	r3, [pc, #196]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	b291      	uxth	r1, r2
 8001f9a:	4a2f      	ldr	r2, [pc, #188]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	460a      	mov	r2, r1
 8001fa2:	80da      	strh	r2, [r3, #6]
 8001fa4:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	4a2b      	ldr	r2, [pc, #172]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001fac:	7892      	ldrb	r2, [r2, #2]
 8001fae:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fb2:	fb01 f202 	mul.w	r2, r1, r2
 8001fb6:	1a9b      	subs	r3, r3, r2
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4b27      	ldr	r3, [pc, #156]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	e152      	b.n	8002266 <HAL_UART_RxCpltCallback+0x6da>
	}
	else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'L') __ADD_COMMAND(cQueue, 11, val); // TL turn left max
 8001fc0:	4b26      	ldr	r3, [pc, #152]	; (800205c <HAL_UART_RxCpltCallback+0x4d0>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b54      	cmp	r3, #84	; 0x54
 8001fc6:	d121      	bne.n	800200c <HAL_UART_RxCpltCallback+0x480>
 8001fc8:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_UART_RxCpltCallback+0x4d0>)
 8001fca:	785b      	ldrb	r3, [r3, #1]
 8001fcc:	2b4c      	cmp	r3, #76	; 0x4c
 8001fce:	d11d      	bne.n	800200c <HAL_UART_RxCpltCallback+0x480>
 8001fd0:	4b21      	ldr	r3, [pc, #132]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	4a20      	ldr	r2, [pc, #128]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	220b      	movs	r2, #11
 8001fdc:	711a      	strb	r2, [r3, #4]
 8001fde:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	b291      	uxth	r1, r2
 8001fe6:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	460a      	mov	r2, r1
 8001fee:	80da      	strh	r2, [r3, #6]
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	4a18      	ldr	r2, [pc, #96]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8001ff8:	7892      	ldrb	r2, [r2, #2]
 8001ffa:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ffe:	fb01 f202 	mul.w	r2, r1, r2
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4b14      	ldr	r3, [pc, #80]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	e12c      	b.n	8002266 <HAL_UART_RxCpltCallback+0x6da>
	else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'R') __ADD_COMMAND(cQueue, 12, val); // TR turn right max
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <HAL_UART_RxCpltCallback+0x4d0>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b54      	cmp	r3, #84	; 0x54
 8002012:	d127      	bne.n	8002064 <HAL_UART_RxCpltCallback+0x4d8>
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <HAL_UART_RxCpltCallback+0x4d0>)
 8002016:	785b      	ldrb	r3, [r3, #1]
 8002018:	2b52      	cmp	r3, #82	; 0x52
 800201a:	d123      	bne.n	8002064 <HAL_UART_RxCpltCallback+0x4d8>
 800201c:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	220c      	movs	r2, #12
 8002028:	711a      	strb	r2, [r3, #4]
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	b291      	uxth	r1, r2
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	460a      	mov	r2, r1
 800203a:	80da      	strh	r2, [r3, #6]
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	4a05      	ldr	r2, [pc, #20]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8002044:	7892      	ldrb	r2, [r2, #2]
 8002046:	fb93 f1f2 	sdiv	r1, r3, r2
 800204a:	fb01 f202 	mul.w	r2, r1, r2
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4b01      	ldr	r3, [pc, #4]	; (8002058 <HAL_UART_RxCpltCallback+0x4cc>)
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	e106      	b.n	8002266 <HAL_UART_RxCpltCallback+0x6da>
 8002058:	2000048c 	.word	0x2000048c
 800205c:	20000480 	.word	0x20000480
 8002060:	200004e4 	.word	0x200004e4
	else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'R') __ADD_COMMAND(cQueue, 13, val); // test IR sensor
 8002064:	4b97      	ldr	r3, [pc, #604]	; (80022c4 <HAL_UART_RxCpltCallback+0x738>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b49      	cmp	r3, #73	; 0x49
 800206a:	d121      	bne.n	80020b0 <HAL_UART_RxCpltCallback+0x524>
 800206c:	4b95      	ldr	r3, [pc, #596]	; (80022c4 <HAL_UART_RxCpltCallback+0x738>)
 800206e:	785b      	ldrb	r3, [r3, #1]
 8002070:	2b52      	cmp	r3, #82	; 0x52
 8002072:	d11d      	bne.n	80020b0 <HAL_UART_RxCpltCallback+0x524>
 8002074:	4b94      	ldr	r3, [pc, #592]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4a93      	ldr	r2, [pc, #588]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	220d      	movs	r2, #13
 8002080:	711a      	strb	r2, [r3, #4]
 8002082:	4b91      	ldr	r3, [pc, #580]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	b291      	uxth	r1, r2
 800208a:	4a8f      	ldr	r2, [pc, #572]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	460a      	mov	r2, r1
 8002092:	80da      	strh	r2, [r3, #6]
 8002094:	4b8c      	ldr	r3, [pc, #560]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a8b      	ldr	r2, [pc, #556]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 800209c:	7892      	ldrb	r2, [r2, #2]
 800209e:	fb93 f1f2 	sdiv	r1, r3, r2
 80020a2:	fb01 f202 	mul.w	r2, r1, r2
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b87      	ldr	r3, [pc, #540]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80020ac:	701a      	strb	r2, [r3, #0]
 80020ae:	e0da      	b.n	8002266 <HAL_UART_RxCpltCallback+0x6da>
	else if (aRxBuffer[0] == 'D' && aRxBuffer[1] == 'T') __ADD_COMMAND(cQueue, 14, val); // DT move until specified distance from obstacle
 80020b0:	4b84      	ldr	r3, [pc, #528]	; (80022c4 <HAL_UART_RxCpltCallback+0x738>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b44      	cmp	r3, #68	; 0x44
 80020b6:	d121      	bne.n	80020fc <HAL_UART_RxCpltCallback+0x570>
 80020b8:	4b82      	ldr	r3, [pc, #520]	; (80022c4 <HAL_UART_RxCpltCallback+0x738>)
 80020ba:	785b      	ldrb	r3, [r3, #1]
 80020bc:	2b54      	cmp	r3, #84	; 0x54
 80020be:	d11d      	bne.n	80020fc <HAL_UART_RxCpltCallback+0x570>
 80020c0:	4b81      	ldr	r3, [pc, #516]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4a80      	ldr	r2, [pc, #512]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	220e      	movs	r2, #14
 80020cc:	711a      	strb	r2, [r3, #4]
 80020ce:	4b7e      	ldr	r3, [pc, #504]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	b291      	uxth	r1, r2
 80020d6:	4a7c      	ldr	r2, [pc, #496]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	460a      	mov	r2, r1
 80020de:	80da      	strh	r2, [r3, #6]
 80020e0:	4b79      	ldr	r3, [pc, #484]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	4a78      	ldr	r2, [pc, #480]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80020e8:	7892      	ldrb	r2, [r2, #2]
 80020ea:	fb93 f1f2 	sdiv	r1, r3, r2
 80020ee:	fb01 f202 	mul.w	r2, r1, r2
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b74      	ldr	r3, [pc, #464]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	e0b4      	b.n	8002266 <HAL_UART_RxCpltCallback+0x6da>
	else if (aRxBuffer[0] == 'Z' && aRxBuffer[1] == 'Z') __ADD_COMMAND(cQueue, 15, val); // ZZ buzzer
 80020fc:	4b71      	ldr	r3, [pc, #452]	; (80022c4 <HAL_UART_RxCpltCallback+0x738>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b5a      	cmp	r3, #90	; 0x5a
 8002102:	d121      	bne.n	8002148 <HAL_UART_RxCpltCallback+0x5bc>
 8002104:	4b6f      	ldr	r3, [pc, #444]	; (80022c4 <HAL_UART_RxCpltCallback+0x738>)
 8002106:	785b      	ldrb	r3, [r3, #1]
 8002108:	2b5a      	cmp	r3, #90	; 0x5a
 800210a:	d11d      	bne.n	8002148 <HAL_UART_RxCpltCallback+0x5bc>
 800210c:	4b6e      	ldr	r3, [pc, #440]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4a6d      	ldr	r2, [pc, #436]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	220f      	movs	r2, #15
 8002118:	711a      	strb	r2, [r3, #4]
 800211a:	4b6b      	ldr	r3, [pc, #428]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	b291      	uxth	r1, r2
 8002122:	4a69      	ldr	r2, [pc, #420]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	460a      	mov	r2, r1
 800212a:	80da      	strh	r2, [r3, #6]
 800212c:	4b66      	ldr	r3, [pc, #408]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	4a65      	ldr	r2, [pc, #404]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002134:	7892      	ldrb	r2, [r2, #2]
 8002136:	fb93 f1f2 	sdiv	r1, r3, r2
 800213a:	fb01 f202 	mul.w	r2, r1, r2
 800213e:	1a9b      	subs	r3, r3, r2
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4b61      	ldr	r3, [pc, #388]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	e08e      	b.n	8002266 <HAL_UART_RxCpltCallback+0x6da>
	else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'X') __ADD_COMMAND(cQueue, 16, val); // WN fastest path
 8002148:	4b5e      	ldr	r3, [pc, #376]	; (80022c4 <HAL_UART_RxCpltCallback+0x738>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b57      	cmp	r3, #87	; 0x57
 800214e:	d121      	bne.n	8002194 <HAL_UART_RxCpltCallback+0x608>
 8002150:	4b5c      	ldr	r3, [pc, #368]	; (80022c4 <HAL_UART_RxCpltCallback+0x738>)
 8002152:	785b      	ldrb	r3, [r3, #1]
 8002154:	2b58      	cmp	r3, #88	; 0x58
 8002156:	d11d      	bne.n	8002194 <HAL_UART_RxCpltCallback+0x608>
 8002158:	4b5b      	ldr	r3, [pc, #364]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4a5a      	ldr	r2, [pc, #360]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	2210      	movs	r2, #16
 8002164:	711a      	strb	r2, [r3, #4]
 8002166:	4b58      	ldr	r3, [pc, #352]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	b291      	uxth	r1, r2
 800216e:	4a56      	ldr	r2, [pc, #344]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	460a      	mov	r2, r1
 8002176:	80da      	strh	r2, [r3, #6]
 8002178:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	4a52      	ldr	r2, [pc, #328]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002180:	7892      	ldrb	r2, [r2, #2]
 8002182:	fb93 f1f2 	sdiv	r1, r3, r2
 8002186:	fb01 f202 	mul.w	r2, r1, r2
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4b4e      	ldr	r3, [pc, #312]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002190:	701a      	strb	r2, [r3, #0]
 8002192:	e068      	b.n	8002266 <HAL_UART_RxCpltCallback+0x6da>
	else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'N') __ADD_COMMAND(cQueue, 17, val); // WN fastest path v2
 8002194:	4b4b      	ldr	r3, [pc, #300]	; (80022c4 <HAL_UART_RxCpltCallback+0x738>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b57      	cmp	r3, #87	; 0x57
 800219a:	d121      	bne.n	80021e0 <HAL_UART_RxCpltCallback+0x654>
 800219c:	4b49      	ldr	r3, [pc, #292]	; (80022c4 <HAL_UART_RxCpltCallback+0x738>)
 800219e:	785b      	ldrb	r3, [r3, #1]
 80021a0:	2b4e      	cmp	r3, #78	; 0x4e
 80021a2:	d11d      	bne.n	80021e0 <HAL_UART_RxCpltCallback+0x654>
 80021a4:	4b48      	ldr	r3, [pc, #288]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4a47      	ldr	r2, [pc, #284]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	2211      	movs	r2, #17
 80021b0:	711a      	strb	r2, [r3, #4]
 80021b2:	4b45      	ldr	r3, [pc, #276]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	b291      	uxth	r1, r2
 80021ba:	4a43      	ldr	r2, [pc, #268]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	460a      	mov	r2, r1
 80021c2:	80da      	strh	r2, [r3, #6]
 80021c4:	4b40      	ldr	r3, [pc, #256]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	4a3f      	ldr	r2, [pc, #252]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80021cc:	7892      	ldrb	r2, [r2, #2]
 80021ce:	fb93 f1f2 	sdiv	r1, r3, r2
 80021d2:	fb01 f202 	mul.w	r2, r1, r2
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	e042      	b.n	8002266 <HAL_UART_RxCpltCallback+0x6da>
	else if (aRxBuffer[0] == 'A') __ADD_COMMAND(cQueue, 88, val); // anti-clockwise rotation with variable
 80021e0:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <HAL_UART_RxCpltCallback+0x738>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b41      	cmp	r3, #65	; 0x41
 80021e6:	d11d      	bne.n	8002224 <HAL_UART_RxCpltCallback+0x698>
 80021e8:	4b37      	ldr	r3, [pc, #220]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4a36      	ldr	r2, [pc, #216]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	2258      	movs	r2, #88	; 0x58
 80021f4:	711a      	strb	r2, [r3, #4]
 80021f6:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	b291      	uxth	r1, r2
 80021fe:	4a32      	ldr	r2, [pc, #200]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	460a      	mov	r2, r1
 8002206:	80da      	strh	r2, [r3, #6]
 8002208:	4b2f      	ldr	r3, [pc, #188]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	3301      	adds	r3, #1
 800220e:	4a2e      	ldr	r2, [pc, #184]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002210:	7892      	ldrb	r2, [r2, #2]
 8002212:	fb93 f1f2 	sdiv	r1, r3, r2
 8002216:	fb01 f202 	mul.w	r2, r1, r2
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002220:	701a      	strb	r2, [r3, #0]
 8002222:	e020      	b.n	8002266 <HAL_UART_RxCpltCallback+0x6da>
	else if (aRxBuffer[0] == 'C') __ADD_COMMAND(cQueue, 89, val); // clockwise rotation with variable
 8002224:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <HAL_UART_RxCpltCallback+0x738>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b43      	cmp	r3, #67	; 0x43
 800222a:	d11c      	bne.n	8002266 <HAL_UART_RxCpltCallback+0x6da>
 800222c:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4a25      	ldr	r2, [pc, #148]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	2259      	movs	r2, #89	; 0x59
 8002238:	711a      	strb	r2, [r3, #4]
 800223a:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	b291      	uxth	r1, r2
 8002242:	4a21      	ldr	r2, [pc, #132]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	460a      	mov	r2, r1
 800224a:	80da      	strh	r2, [r3, #6]
 800224c:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	3301      	adds	r3, #1
 8002252:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002254:	7892      	ldrb	r2, [r2, #2]
 8002256:	fb93 f1f2 	sdiv	r1, r3, r2
 800225a:	fb01 f202 	mul.w	r2, r1, r2
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002264:	701a      	strb	r2, [r3, #0]

	if (!__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 800226c:	785b      	ldrb	r3, [r3, #1]
 800226e:	429a      	cmp	r2, r3
 8002270:	d019      	beq.n	80022a6 <HAL_UART_RxCpltCallback+0x71a>
		__READ_COMMAND(cQueue, curCmd, rxMsg);
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002274:	785b      	ldrb	r3, [r3, #1]
 8002276:	4a15      	ldr	r2, [pc, #84]	; (80022cc <HAL_UART_RxCpltCallback+0x740>)
 8002278:	4913      	ldr	r1, [pc, #76]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 8002284:	785b      	ldrb	r3, [r3, #1]
 8002286:	3301      	adds	r3, #1
 8002288:	4a0f      	ldr	r2, [pc, #60]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 800228a:	7892      	ldrb	r2, [r2, #2]
 800228c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002290:	fb01 f202 	mul.w	r2, r1, r2
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	b2da      	uxtb	r2, r3
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_UART_RxCpltCallback+0x73c>)
 800229a:	705a      	strb	r2, [r3, #1]
 800229c:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <HAL_UART_RxCpltCallback+0x744>)
 800229e:	210f      	movs	r1, #15
 80022a0:	480c      	ldr	r0, [pc, #48]	; (80022d4 <HAL_UART_RxCpltCallback+0x748>)
 80022a2:	f00c fc59 	bl	800eb58 <sniprintf>
	}

	// clear aRx buffer
	  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_UART_RxCpltCallback+0x74c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
	  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_UART_RxCpltCallback+0x750>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	4903      	ldr	r1, [pc, #12]	; (80022c4 <HAL_UART_RxCpltCallback+0x738>)
 80022b6:	4808      	ldr	r0, [pc, #32]	; (80022d8 <HAL_UART_RxCpltCallback+0x74c>)
 80022b8:	f008 fc55 	bl	800ab66 <HAL_UART_Receive_IT>
}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000480 	.word	0x20000480
 80022c8:	2000048c 	.word	0x2000048c
 80022cc:	200004c0 	.word	0x200004c0
 80022d0:	08010228 	.word	0x08010228
 80022d4:	200004c4 	.word	0x200004c4
 80022d8:	20000408 	.word	0x20000408
 80022dc:	20000000 	.word	0x20000000

080022e0 <HAL_GPIO_EXTI_Callback>:
int clickOnce = 0;
int targetD = 5;
uint8_t tempDir = 1 ;
int8_t step = 0;
uint8_t turnMode = 2;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	80fb      	strh	r3, [r7, #6]
	if (clickOnce) return;
 80022ea:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <HAL_GPIO_EXTI_Callback+0xc0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d151      	bne.n	8002396 <HAL_GPIO_EXTI_Callback+0xb6>
	if (GPIO_Pin == SW1_Pin) {
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022f8:	d14e      	bne.n	8002398 <HAL_GPIO_EXTI_Callback+0xb8>
		clickOnce = 1;
 80022fa:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <HAL_GPIO_EXTI_Callback+0xc0>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
//		manualMode = 1;
//		moveMode = FAST;
//		__ADD_COMMAND(cQueue, 1, 90);
//		__READ_COMMAND(cQueue, curCmd, rxMsg);

		__ADD_COMMAND(cQueue, 7 + step, 0);
 8002300:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002302:	f993 3000 	ldrsb.w	r3, [r3]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	4a27      	ldr	r2, [pc, #156]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800230a:	7812      	ldrb	r2, [r2, #0]
 800230c:	4610      	mov	r0, r2
 800230e:	3307      	adds	r3, #7
 8002310:	b2d9      	uxtb	r1, r3
 8002312:	4a25      	ldr	r2, [pc, #148]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002314:	0083      	lsls	r3, r0, #2
 8002316:	4413      	add	r3, r2
 8002318:	460a      	mov	r2, r1
 800231a:	711a      	strb	r2, [r3, #4]
 800231c:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4a21      	ldr	r2, [pc, #132]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	2200      	movs	r2, #0
 8002328:	80da      	strh	r2, [r3, #6]
 800232a:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	4a1d      	ldr	r2, [pc, #116]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002332:	7892      	ldrb	r2, [r2, #2]
 8002334:	fb93 f1f2 	sdiv	r1, r3, r2
 8002338:	fb01 f202 	mul.w	r2, r1, r2
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002342:	701a      	strb	r2, [r3, #0]
		__READ_COMMAND(cQueue, curCmd, rxMsg);
 8002344:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002346:	785b      	ldrb	r3, [r3, #1]
 8002348:	4a18      	ldr	r2, [pc, #96]	; (80023ac <HAL_GPIO_EXTI_Callback+0xcc>)
 800234a:	4917      	ldr	r1, [pc, #92]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002356:	785b      	ldrb	r3, [r3, #1]
 8002358:	3301      	adds	r3, #1
 800235a:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800235c:	7892      	ldrb	r2, [r2, #2]
 800235e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002362:	fb01 f202 	mul.w	r2, r1, r2
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800236c:	705a      	strb	r2, [r3, #1]
 800236e:	4a10      	ldr	r2, [pc, #64]	; (80023b0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002370:	210f      	movs	r1, #15
 8002372:	4810      	ldr	r0, [pc, #64]	; (80023b4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002374:	f00c fbf0 	bl	800eb58 <sniprintf>

		step = (step + 1) % 4;
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_GPIO_EXTI_Callback+0xc4>)
 800237a:	f993 3000 	ldrsb.w	r3, [r3]
 800237e:	3301      	adds	r3, #1
 8002380:	425a      	negs	r2, r3
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	f002 0203 	and.w	r2, r2, #3
 800238a:	bf58      	it	pl
 800238c:	4253      	negpl	r3, r2
 800238e:	b25a      	sxtb	r2, r3
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002392:	701a      	strb	r2, [r3, #0]
 8002394:	e000      	b.n	8002398 <HAL_GPIO_EXTI_Callback+0xb8>
	if (clickOnce) return;
 8002396:	bf00      	nop
//		turnMode = (turnMode + 1) % 4;
//		__ADD_COMMAND(cQueue, 1, 100);
//		__READ_COMMAND(cQueue, curCmd, rxMsg);
	}

}
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000578 	.word	0x20000578
 80023a4:	2000057c 	.word	0x2000057c
 80023a8:	2000048c 	.word	0x2000048c
 80023ac:	200004c0 	.word	0x200004c0
 80023b0:	08010228 	.word	0x08010228
 80023b4:	200004c4 	.word	0x200004c4

080023b8 <PIDConfigInit>:

void PIDConfigInit(PIDConfig * cfg, const float Kp, const float Ki, const float Kd) {
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80023c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80023c8:	ed87 1a00 	vstr	s2, [r7]
	cfg->Kp = Kp;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	601a      	str	r2, [r3, #0]
	cfg->Ki = Ki;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	605a      	str	r2, [r3, #4]
	cfg->Kd = Kd;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	609a      	str	r2, [r3, #8]
	cfg->ek1 = 0;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
	cfg->ekSum = 0;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <PIDConfigReset>:

void PIDConfigReset(PIDConfig * cfg) {
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
	cfg->ek1 = 0;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
	cfg->ekSum = 0;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	611a      	str	r2, [r3, #16]
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <StraightLineMove>:

int8_t dir = 1;
int correction = 0;
//PIDConfig curPIDConfig;

void StraightLineMove(const uint8_t speedMode) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af04      	add	r7, sp, #16
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
	__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 800242a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800242e:	9302      	str	r3, [sp, #8]
 8002430:	2302      	movs	r3, #2
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	4ba9      	ldr	r3, [pc, #676]	; (80026dc <StraightLineMove+0x2bc>)
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2301      	movs	r3, #1
 800243a:	2237      	movs	r2, #55	; 0x37
 800243c:	21d0      	movs	r1, #208	; 0xd0
 800243e:	48a8      	ldr	r0, [pc, #672]	; (80026e0 <StraightLineMove+0x2c0>)
 8002440:	f005 fb30 	bl	8007aa4 <HAL_I2C_Mem_Read>
 8002444:	4ba5      	ldr	r3, [pc, #660]	; (80026dc <StraightLineMove+0x2bc>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	b21a      	sxth	r2, r3
 800244c:	4ba3      	ldr	r3, [pc, #652]	; (80026dc <StraightLineMove+0x2bc>)
 800244e:	785b      	ldrb	r3, [r3, #1]
 8002450:	b21b      	sxth	r3, r3
 8002452:	4313      	orrs	r3, r2
 8002454:	b21a      	sxth	r2, r3
 8002456:	4ba3      	ldr	r3, [pc, #652]	; (80026e4 <StraightLineMove+0x2c4>)
 8002458:	801a      	strh	r2, [r3, #0]
	dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 800245a:	4ba3      	ldr	r3, [pc, #652]	; (80026e8 <StraightLineMove+0x2c8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b10      	cmp	r3, #16
 8002466:	d101      	bne.n	800246c <StraightLineMove+0x4c>
 8002468:	2201      	movs	r2, #1
 800246a:	e001      	b.n	8002470 <StraightLineMove+0x50>
 800246c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002470:	4b9e      	ldr	r3, [pc, #632]	; (80026ec <StraightLineMove+0x2cc>)
 8002472:	701a      	strb	r2, [r3, #0]
	angleNow += ((gyroZ >= -3 && gyroZ <= 8) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002474:	4b9b      	ldr	r3, [pc, #620]	; (80026e4 <StraightLineMove+0x2c4>)
 8002476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800247a:	f113 0f03 	cmn.w	r3, #3
 800247e:	db04      	blt.n	800248a <StraightLineMove+0x6a>
 8002480:	4b98      	ldr	r3, [pc, #608]	; (80026e4 <StraightLineMove+0x2c4>)
 8002482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002486:	2b08      	cmp	r3, #8
 8002488:	dd07      	ble.n	800249a <StraightLineMove+0x7a>
 800248a:	4b96      	ldr	r3, [pc, #600]	; (80026e4 <StraightLineMove+0x2c4>)
 800248c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002490:	ee07 3a90 	vmov	s15, r3
 8002494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002498:	e001      	b.n	800249e <StraightLineMove+0x7e>
 800249a:	eddf 7a95 	vldr	s15, [pc, #596]	; 80026f0 <StraightLineMove+0x2d0>
 800249e:	4b95      	ldr	r3, [pc, #596]	; (80026f4 <StraightLineMove+0x2d4>)
 80024a0:	ed93 7a00 	vldr	s14, [r3]
 80024a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024a8:	4b92      	ldr	r3, [pc, #584]	; (80026f4 <StraightLineMove+0x2d4>)
 80024aa:	edc3 7a00 	vstr	s15, [r3]

	if (speedMode == SPEED_MODE_T) __PID_SPEED_T(pidTSlow, angleNow, correction, dir, newDutyL, newDutyR);
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d164      	bne.n	800257e <StraightLineMove+0x15e>
 80024b4:	4b90      	ldr	r3, [pc, #576]	; (80026f8 <StraightLineMove+0x2d8>)
 80024b6:	ed93 7a00 	vldr	s14, [r3]
 80024ba:	4b8e      	ldr	r3, [pc, #568]	; (80026f4 <StraightLineMove+0x2d4>)
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c4:	4b8c      	ldr	r3, [pc, #560]	; (80026f8 <StraightLineMove+0x2d8>)
 80024c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80024ca:	4b8b      	ldr	r3, [pc, #556]	; (80026f8 <StraightLineMove+0x2d8>)
 80024cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80024d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024d8:	4b87      	ldr	r3, [pc, #540]	; (80026f8 <StraightLineMove+0x2d8>)
 80024da:	edd3 6a02 	vldr	s13, [r3, #8]
 80024de:	4b86      	ldr	r3, [pc, #536]	; (80026f8 <StraightLineMove+0x2d8>)
 80024e0:	ed93 6a03 	vldr	s12, [r3, #12]
 80024e4:	4b83      	ldr	r3, [pc, #524]	; (80026f4 <StraightLineMove+0x2d4>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ee76 7a67 	vsub.f32	s15, s12, s15
 80024ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024fa:	ee17 2a90 	vmov	r2, s15
 80024fe:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <StraightLineMove+0x2dc>)
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	4b7c      	ldr	r3, [pc, #496]	; (80026f4 <StraightLineMove+0x2d4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a7c      	ldr	r2, [pc, #496]	; (80026f8 <StraightLineMove+0x2d8>)
 8002508:	60d3      	str	r3, [r2, #12]
 800250a:	4b7b      	ldr	r3, [pc, #492]	; (80026f8 <StraightLineMove+0x2d8>)
 800250c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002510:	4b78      	ldr	r3, [pc, #480]	; (80026f4 <StraightLineMove+0x2d4>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251a:	4b77      	ldr	r3, [pc, #476]	; (80026f8 <StraightLineMove+0x2d8>)
 800251c:	edc3 7a04 	vstr	s15, [r3, #16]
 8002520:	4b76      	ldr	r3, [pc, #472]	; (80026fc <StraightLineMove+0x2dc>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002528:	dc06      	bgt.n	8002538 <StraightLineMove+0x118>
 800252a:	4b74      	ldr	r3, [pc, #464]	; (80026fc <StraightLineMove+0x2dc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a74      	ldr	r2, [pc, #464]	; (8002700 <StraightLineMove+0x2e0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	bfb8      	it	lt
 8002534:	4613      	movlt	r3, r2
 8002536:	e001      	b.n	800253c <StraightLineMove+0x11c>
 8002538:	f44f 7316 	mov.w	r3, #600	; 0x258
 800253c:	4a6f      	ldr	r2, [pc, #444]	; (80026fc <StraightLineMove+0x2dc>)
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <StraightLineMove+0x2cc>)
 8002542:	f993 3000 	ldrsb.w	r3, [r3]
 8002546:	b29a      	uxth	r2, r3
 8002548:	4b6c      	ldr	r3, [pc, #432]	; (80026fc <StraightLineMove+0x2dc>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	fb12 f303 	smulbb	r3, r2, r3
 8002552:	b29b      	uxth	r3, r3
 8002554:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8002558:	b29a      	uxth	r2, r3
 800255a:	4b6a      	ldr	r3, [pc, #424]	; (8002704 <StraightLineMove+0x2e4>)
 800255c:	801a      	strh	r2, [r3, #0]
 800255e:	4b63      	ldr	r3, [pc, #396]	; (80026ec <StraightLineMove+0x2cc>)
 8002560:	f993 3000 	ldrsb.w	r3, [r3]
 8002564:	b29a      	uxth	r2, r3
 8002566:	4b65      	ldr	r3, [pc, #404]	; (80026fc <StraightLineMove+0x2dc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	fb12 f303 	smulbb	r3, r2, r3
 8002570:	b29b      	uxth	r3, r3
 8002572:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 8002576:	b29a      	uxth	r2, r3
 8002578:	4b63      	ldr	r3, [pc, #396]	; (8002708 <StraightLineMove+0x2e8>)
 800257a:	801a      	strh	r2, [r3, #0]
 800257c:	e0ef      	b.n	800275e <StraightLineMove+0x33e>
	else if (speedMode == SPEED_MODE_2) __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d165      	bne.n	8002650 <StraightLineMove+0x230>
 8002584:	4b61      	ldr	r3, [pc, #388]	; (800270c <StraightLineMove+0x2ec>)
 8002586:	ed93 7a00 	vldr	s14, [r3]
 800258a:	4b5a      	ldr	r3, [pc, #360]	; (80026f4 <StraightLineMove+0x2d4>)
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002594:	4b5d      	ldr	r3, [pc, #372]	; (800270c <StraightLineMove+0x2ec>)
 8002596:	edd3 6a01 	vldr	s13, [r3, #4]
 800259a:	4b5c      	ldr	r3, [pc, #368]	; (800270c <StraightLineMove+0x2ec>)
 800259c:	edd3 7a04 	vldr	s15, [r3, #16]
 80025a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a8:	4b58      	ldr	r3, [pc, #352]	; (800270c <StraightLineMove+0x2ec>)
 80025aa:	edd3 6a02 	vldr	s13, [r3, #8]
 80025ae:	4b57      	ldr	r3, [pc, #348]	; (800270c <StraightLineMove+0x2ec>)
 80025b0:	ed93 6a03 	vldr	s12, [r3, #12]
 80025b4:	4b4f      	ldr	r3, [pc, #316]	; (80026f4 <StraightLineMove+0x2d4>)
 80025b6:	edd3 7a00 	vldr	s15, [r3]
 80025ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 80025be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ca:	ee17 2a90 	vmov	r2, s15
 80025ce:	4b4b      	ldr	r3, [pc, #300]	; (80026fc <StraightLineMove+0x2dc>)
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	4b48      	ldr	r3, [pc, #288]	; (80026f4 <StraightLineMove+0x2d4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a4d      	ldr	r2, [pc, #308]	; (800270c <StraightLineMove+0x2ec>)
 80025d8:	60d3      	str	r3, [r2, #12]
 80025da:	4b4c      	ldr	r3, [pc, #304]	; (800270c <StraightLineMove+0x2ec>)
 80025dc:	ed93 7a04 	vldr	s14, [r3, #16]
 80025e0:	4b44      	ldr	r3, [pc, #272]	; (80026f4 <StraightLineMove+0x2d4>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ea:	4b48      	ldr	r3, [pc, #288]	; (800270c <StraightLineMove+0x2ec>)
 80025ec:	edc3 7a04 	vstr	s15, [r3, #16]
 80025f0:	4b42      	ldr	r3, [pc, #264]	; (80026fc <StraightLineMove+0x2dc>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80025f8:	dc06      	bgt.n	8002608 <StraightLineMove+0x1e8>
 80025fa:	4b40      	ldr	r3, [pc, #256]	; (80026fc <StraightLineMove+0x2dc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a44      	ldr	r2, [pc, #272]	; (8002710 <StraightLineMove+0x2f0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	bfb8      	it	lt
 8002604:	4613      	movlt	r3, r2
 8002606:	e001      	b.n	800260c <StraightLineMove+0x1ec>
 8002608:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800260c:	4a3b      	ldr	r2, [pc, #236]	; (80026fc <StraightLineMove+0x2dc>)
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b36      	ldr	r3, [pc, #216]	; (80026ec <StraightLineMove+0x2cc>)
 8002612:	f993 3000 	ldrsb.w	r3, [r3]
 8002616:	b29a      	uxth	r2, r3
 8002618:	4b38      	ldr	r3, [pc, #224]	; (80026fc <StraightLineMove+0x2dc>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	b29b      	uxth	r3, r3
 800261e:	fb12 f303 	smulbb	r3, r2, r3
 8002622:	b29b      	uxth	r3, r3
 8002624:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002628:	b29a      	uxth	r2, r3
 800262a:	4b36      	ldr	r3, [pc, #216]	; (8002704 <StraightLineMove+0x2e4>)
 800262c:	801a      	strh	r2, [r3, #0]
 800262e:	4b2f      	ldr	r3, [pc, #188]	; (80026ec <StraightLineMove+0x2cc>)
 8002630:	f993 3000 	ldrsb.w	r3, [r3]
 8002634:	b29a      	uxth	r2, r3
 8002636:	4b31      	ldr	r3, [pc, #196]	; (80026fc <StraightLineMove+0x2dc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	fb12 f303 	smulbb	r3, r2, r3
 8002640:	b29b      	uxth	r3, r3
 8002642:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8002646:	3308      	adds	r3, #8
 8002648:	b29a      	uxth	r2, r3
 800264a:	4b2f      	ldr	r3, [pc, #188]	; (8002708 <StraightLineMove+0x2e8>)
 800264c:	801a      	strh	r2, [r3, #0]
 800264e:	e086      	b.n	800275e <StraightLineMove+0x33e>
	else if (speedMode == SPEED_MODE_1) __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	2b01      	cmp	r3, #1
 8002654:	f040 8083 	bne.w	800275e <StraightLineMove+0x33e>
 8002658:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <StraightLineMove+0x2f4>)
 800265a:	ed93 7a00 	vldr	s14, [r3]
 800265e:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <StraightLineMove+0x2d4>)
 8002660:	edd3 7a00 	vldr	s15, [r3]
 8002664:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002668:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <StraightLineMove+0x2f4>)
 800266a:	edd3 6a01 	vldr	s13, [r3, #4]
 800266e:	4b29      	ldr	r3, [pc, #164]	; (8002714 <StraightLineMove+0x2f4>)
 8002670:	edd3 7a04 	vldr	s15, [r3, #16]
 8002674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002678:	ee37 7a27 	vadd.f32	s14, s14, s15
 800267c:	4b25      	ldr	r3, [pc, #148]	; (8002714 <StraightLineMove+0x2f4>)
 800267e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002682:	4b24      	ldr	r3, [pc, #144]	; (8002714 <StraightLineMove+0x2f4>)
 8002684:	ed93 6a03 	vldr	s12, [r3, #12]
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <StraightLineMove+0x2d4>)
 800268a:	edd3 7a00 	vldr	s15, [r3]
 800268e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800269a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800269e:	ee17 2a90 	vmov	r2, s15
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <StraightLineMove+0x2dc>)
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <StraightLineMove+0x2d4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1a      	ldr	r2, [pc, #104]	; (8002714 <StraightLineMove+0x2f4>)
 80026ac:	60d3      	str	r3, [r2, #12]
 80026ae:	4b19      	ldr	r3, [pc, #100]	; (8002714 <StraightLineMove+0x2f4>)
 80026b0:	ed93 7a04 	vldr	s14, [r3, #16]
 80026b4:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <StraightLineMove+0x2d4>)
 80026b6:	edd3 7a00 	vldr	s15, [r3]
 80026ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <StraightLineMove+0x2f4>)
 80026c0:	edc3 7a04 	vstr	s15, [r3, #16]
 80026c4:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <StraightLineMove+0x2dc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80026cc:	dc24      	bgt.n	8002718 <StraightLineMove+0x2f8>
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <StraightLineMove+0x2dc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a0f      	ldr	r2, [pc, #60]	; (8002710 <StraightLineMove+0x2f0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	bfb8      	it	lt
 80026d8:	4613      	movlt	r3, r2
 80026da:	e01f      	b.n	800271c <StraightLineMove+0x2fc>
 80026dc:	200004f0 	.word	0x200004f0
 80026e0:	2000024c 	.word	0x2000024c
 80026e4:	200004f2 	.word	0x200004f2
 80026e8:	200002e8 	.word	0x200002e8
 80026ec:	2000013c 	.word	0x2000013c
 80026f0:	00000000 	.word	0x00000000
 80026f4:	200004ec 	.word	0x200004ec
 80026f8:	2000051c 	.word	0x2000051c
 80026fc:	20000580 	.word	0x20000580
 8002700:	fffffda8 	.word	0xfffffda8
 8002704:	200004f4 	.word	0x200004f4
 8002708:	200004f6 	.word	0x200004f6
 800270c:	20000530 	.word	0x20000530
 8002710:	fffffd44 	.word	0xfffffd44
 8002714:	20000508 	.word	0x20000508
 8002718:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800271c:	4a17      	ldr	r2, [pc, #92]	; (800277c <StraightLineMove+0x35c>)
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	4b17      	ldr	r3, [pc, #92]	; (8002780 <StraightLineMove+0x360>)
 8002722:	f993 3000 	ldrsb.w	r3, [r3]
 8002726:	b29a      	uxth	r2, r3
 8002728:	4b14      	ldr	r3, [pc, #80]	; (800277c <StraightLineMove+0x35c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	b29b      	uxth	r3, r3
 800272e:	fb12 f303 	smulbb	r3, r2, r3
 8002732:	b29b      	uxth	r3, r3
 8002734:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8002738:	b29a      	uxth	r2, r3
 800273a:	4b12      	ldr	r3, [pc, #72]	; (8002784 <StraightLineMove+0x364>)
 800273c:	801a      	strh	r2, [r3, #0]
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <StraightLineMove+0x360>)
 8002740:	f993 3000 	ldrsb.w	r3, [r3]
 8002744:	b29a      	uxth	r2, r3
 8002746:	4b0d      	ldr	r3, [pc, #52]	; (800277c <StraightLineMove+0x35c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	fb12 f303 	smulbb	r3, r2, r3
 8002750:	b29b      	uxth	r3, r3
 8002752:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 8002756:	330c      	adds	r3, #12
 8002758:	b29a      	uxth	r2, r3
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <StraightLineMove+0x368>)
 800275c:	801a      	strh	r2, [r3, #0]

	__SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <StraightLineMove+0x364>)
 8002760:	881a      	ldrh	r2, [r3, #0]
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <StraightLineMove+0x36c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	635a      	str	r2, [r3, #52]	; 0x34
 8002768:	4b07      	ldr	r3, [pc, #28]	; (8002788 <StraightLineMove+0x368>)
 800276a:	881a      	ldrh	r2, [r3, #0]
 800276c:	4b07      	ldr	r3, [pc, #28]	; (800278c <StraightLineMove+0x36c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000580 	.word	0x20000580
 8002780:	2000013c 	.word	0x2000013c
 8002784:	200004f4 	.word	0x200004f4
 8002788:	200004f6 	.word	0x200004f6
 800278c:	200003c0 	.word	0x200003c0

08002790 <StraightLineMoveSpeedScale>:

void StraightLineMoveSpeedScale(const uint8_t speedMode, float * speedScale) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af04      	add	r7, sp, #16
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	71fb      	strb	r3, [r7, #7]
	__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 800279c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027a0:	9302      	str	r3, [sp, #8]
 80027a2:	2302      	movs	r3, #2
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	4b9b      	ldr	r3, [pc, #620]	; (8002a14 <StraightLineMoveSpeedScale+0x284>)
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2301      	movs	r3, #1
 80027ac:	2237      	movs	r2, #55	; 0x37
 80027ae:	21d0      	movs	r1, #208	; 0xd0
 80027b0:	4899      	ldr	r0, [pc, #612]	; (8002a18 <StraightLineMoveSpeedScale+0x288>)
 80027b2:	f005 f977 	bl	8007aa4 <HAL_I2C_Mem_Read>
 80027b6:	4b97      	ldr	r3, [pc, #604]	; (8002a14 <StraightLineMoveSpeedScale+0x284>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	b21a      	sxth	r2, r3
 80027be:	4b95      	ldr	r3, [pc, #596]	; (8002a14 <StraightLineMoveSpeedScale+0x284>)
 80027c0:	785b      	ldrb	r3, [r3, #1]
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	4313      	orrs	r3, r2
 80027c6:	b21a      	sxth	r2, r3
 80027c8:	4b94      	ldr	r3, [pc, #592]	; (8002a1c <StraightLineMoveSpeedScale+0x28c>)
 80027ca:	801a      	strh	r2, [r3, #0]
	dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 80027cc:	4b94      	ldr	r3, [pc, #592]	; (8002a20 <StraightLineMoveSpeedScale+0x290>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b10      	cmp	r3, #16
 80027d8:	d101      	bne.n	80027de <StraightLineMoveSpeedScale+0x4e>
 80027da:	2201      	movs	r2, #1
 80027dc:	e001      	b.n	80027e2 <StraightLineMoveSpeedScale+0x52>
 80027de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027e2:	4b90      	ldr	r3, [pc, #576]	; (8002a24 <StraightLineMoveSpeedScale+0x294>)
 80027e4:	701a      	strb	r2, [r3, #0]
	angleNow += ((gyroZ >= -4 && gyroZ <= 8) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 80027e6:	4b8d      	ldr	r3, [pc, #564]	; (8002a1c <StraightLineMoveSpeedScale+0x28c>)
 80027e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ec:	f113 0f04 	cmn.w	r3, #4
 80027f0:	db04      	blt.n	80027fc <StraightLineMoveSpeedScale+0x6c>
 80027f2:	4b8a      	ldr	r3, [pc, #552]	; (8002a1c <StraightLineMoveSpeedScale+0x28c>)
 80027f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	dd07      	ble.n	800280c <StraightLineMoveSpeedScale+0x7c>
 80027fc:	4b87      	ldr	r3, [pc, #540]	; (8002a1c <StraightLineMoveSpeedScale+0x28c>)
 80027fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800280a:	e001      	b.n	8002810 <StraightLineMoveSpeedScale+0x80>
 800280c:	eddf 7a86 	vldr	s15, [pc, #536]	; 8002a28 <StraightLineMoveSpeedScale+0x298>
 8002810:	4b86      	ldr	r3, [pc, #536]	; (8002a2c <StraightLineMoveSpeedScale+0x29c>)
 8002812:	ed93 7a00 	vldr	s14, [r3]
 8002816:	ee77 7a87 	vadd.f32	s15, s15, s14
 800281a:	4b84      	ldr	r3, [pc, #528]	; (8002a2c <StraightLineMoveSpeedScale+0x29c>)
 800281c:	edc3 7a00 	vstr	s15, [r3]
	if (speedMode == SPEED_MODE_1) __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d165      	bne.n	80028f2 <StraightLineMoveSpeedScale+0x162>
 8002826:	4b82      	ldr	r3, [pc, #520]	; (8002a30 <StraightLineMoveSpeedScale+0x2a0>)
 8002828:	ed93 7a00 	vldr	s14, [r3]
 800282c:	4b7f      	ldr	r3, [pc, #508]	; (8002a2c <StraightLineMoveSpeedScale+0x29c>)
 800282e:	edd3 7a00 	vldr	s15, [r3]
 8002832:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002836:	4b7e      	ldr	r3, [pc, #504]	; (8002a30 <StraightLineMoveSpeedScale+0x2a0>)
 8002838:	edd3 6a01 	vldr	s13, [r3, #4]
 800283c:	4b7c      	ldr	r3, [pc, #496]	; (8002a30 <StraightLineMoveSpeedScale+0x2a0>)
 800283e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002842:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002846:	ee37 7a27 	vadd.f32	s14, s14, s15
 800284a:	4b79      	ldr	r3, [pc, #484]	; (8002a30 <StraightLineMoveSpeedScale+0x2a0>)
 800284c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002850:	4b77      	ldr	r3, [pc, #476]	; (8002a30 <StraightLineMoveSpeedScale+0x2a0>)
 8002852:	ed93 6a03 	vldr	s12, [r3, #12]
 8002856:	4b75      	ldr	r3, [pc, #468]	; (8002a2c <StraightLineMoveSpeedScale+0x29c>)
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002860:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800286c:	ee17 2a90 	vmov	r2, s15
 8002870:	4b70      	ldr	r3, [pc, #448]	; (8002a34 <StraightLineMoveSpeedScale+0x2a4>)
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	4b6d      	ldr	r3, [pc, #436]	; (8002a2c <StraightLineMoveSpeedScale+0x29c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a6d      	ldr	r2, [pc, #436]	; (8002a30 <StraightLineMoveSpeedScale+0x2a0>)
 800287a:	60d3      	str	r3, [r2, #12]
 800287c:	4b6c      	ldr	r3, [pc, #432]	; (8002a30 <StraightLineMoveSpeedScale+0x2a0>)
 800287e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002882:	4b6a      	ldr	r3, [pc, #424]	; (8002a2c <StraightLineMoveSpeedScale+0x29c>)
 8002884:	edd3 7a00 	vldr	s15, [r3]
 8002888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288c:	4b68      	ldr	r3, [pc, #416]	; (8002a30 <StraightLineMoveSpeedScale+0x2a0>)
 800288e:	edc3 7a04 	vstr	s15, [r3, #16]
 8002892:	4b68      	ldr	r3, [pc, #416]	; (8002a34 <StraightLineMoveSpeedScale+0x2a4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800289a:	dc06      	bgt.n	80028aa <StraightLineMoveSpeedScale+0x11a>
 800289c:	4b65      	ldr	r3, [pc, #404]	; (8002a34 <StraightLineMoveSpeedScale+0x2a4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a65      	ldr	r2, [pc, #404]	; (8002a38 <StraightLineMoveSpeedScale+0x2a8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	bfb8      	it	lt
 80028a6:	4613      	movlt	r3, r2
 80028a8:	e001      	b.n	80028ae <StraightLineMoveSpeedScale+0x11e>
 80028aa:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80028ae:	4a61      	ldr	r2, [pc, #388]	; (8002a34 <StraightLineMoveSpeedScale+0x2a4>)
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b5c      	ldr	r3, [pc, #368]	; (8002a24 <StraightLineMoveSpeedScale+0x294>)
 80028b4:	f993 3000 	ldrsb.w	r3, [r3]
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	4b5e      	ldr	r3, [pc, #376]	; (8002a34 <StraightLineMoveSpeedScale+0x2a4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	fb12 f303 	smulbb	r3, r2, r3
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	4b5b      	ldr	r3, [pc, #364]	; (8002a3c <StraightLineMoveSpeedScale+0x2ac>)
 80028ce:	801a      	strh	r2, [r3, #0]
 80028d0:	4b54      	ldr	r3, [pc, #336]	; (8002a24 <StraightLineMoveSpeedScale+0x294>)
 80028d2:	f993 3000 	ldrsb.w	r3, [r3]
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	4b56      	ldr	r3, [pc, #344]	; (8002a34 <StraightLineMoveSpeedScale+0x2a4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	fb12 f303 	smulbb	r3, r2, r3
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 80028e8:	330c      	adds	r3, #12
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	4b54      	ldr	r3, [pc, #336]	; (8002a40 <StraightLineMoveSpeedScale+0x2b0>)
 80028ee:	801a      	strh	r2, [r3, #0]
 80028f0:	e067      	b.n	80029c2 <StraightLineMoveSpeedScale+0x232>
	else if (speedMode == SPEED_MODE_2) __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d164      	bne.n	80029c2 <StraightLineMoveSpeedScale+0x232>
 80028f8:	4b52      	ldr	r3, [pc, #328]	; (8002a44 <StraightLineMoveSpeedScale+0x2b4>)
 80028fa:	ed93 7a00 	vldr	s14, [r3]
 80028fe:	4b4b      	ldr	r3, [pc, #300]	; (8002a2c <StraightLineMoveSpeedScale+0x29c>)
 8002900:	edd3 7a00 	vldr	s15, [r3]
 8002904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002908:	4b4e      	ldr	r3, [pc, #312]	; (8002a44 <StraightLineMoveSpeedScale+0x2b4>)
 800290a:	edd3 6a01 	vldr	s13, [r3, #4]
 800290e:	4b4d      	ldr	r3, [pc, #308]	; (8002a44 <StraightLineMoveSpeedScale+0x2b4>)
 8002910:	edd3 7a04 	vldr	s15, [r3, #16]
 8002914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002918:	ee37 7a27 	vadd.f32	s14, s14, s15
 800291c:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <StraightLineMoveSpeedScale+0x2b4>)
 800291e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002922:	4b48      	ldr	r3, [pc, #288]	; (8002a44 <StraightLineMoveSpeedScale+0x2b4>)
 8002924:	ed93 6a03 	vldr	s12, [r3, #12]
 8002928:	4b40      	ldr	r3, [pc, #256]	; (8002a2c <StraightLineMoveSpeedScale+0x29c>)
 800292a:	edd3 7a00 	vldr	s15, [r3]
 800292e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800293e:	ee17 2a90 	vmov	r2, s15
 8002942:	4b3c      	ldr	r3, [pc, #240]	; (8002a34 <StraightLineMoveSpeedScale+0x2a4>)
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	4b39      	ldr	r3, [pc, #228]	; (8002a2c <StraightLineMoveSpeedScale+0x29c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a3e      	ldr	r2, [pc, #248]	; (8002a44 <StraightLineMoveSpeedScale+0x2b4>)
 800294c:	60d3      	str	r3, [r2, #12]
 800294e:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <StraightLineMoveSpeedScale+0x2b4>)
 8002950:	ed93 7a04 	vldr	s14, [r3, #16]
 8002954:	4b35      	ldr	r3, [pc, #212]	; (8002a2c <StraightLineMoveSpeedScale+0x29c>)
 8002956:	edd3 7a00 	vldr	s15, [r3]
 800295a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800295e:	4b39      	ldr	r3, [pc, #228]	; (8002a44 <StraightLineMoveSpeedScale+0x2b4>)
 8002960:	edc3 7a04 	vstr	s15, [r3, #16]
 8002964:	4b33      	ldr	r3, [pc, #204]	; (8002a34 <StraightLineMoveSpeedScale+0x2a4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800296c:	dc06      	bgt.n	800297c <StraightLineMoveSpeedScale+0x1ec>
 800296e:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <StraightLineMoveSpeedScale+0x2a4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a31      	ldr	r2, [pc, #196]	; (8002a38 <StraightLineMoveSpeedScale+0x2a8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	bfb8      	it	lt
 8002978:	4613      	movlt	r3, r2
 800297a:	e001      	b.n	8002980 <StraightLineMoveSpeedScale+0x1f0>
 800297c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002980:	4a2c      	ldr	r2, [pc, #176]	; (8002a34 <StraightLineMoveSpeedScale+0x2a4>)
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <StraightLineMoveSpeedScale+0x294>)
 8002986:	f993 3000 	ldrsb.w	r3, [r3]
 800298a:	b29a      	uxth	r2, r3
 800298c:	4b29      	ldr	r3, [pc, #164]	; (8002a34 <StraightLineMoveSpeedScale+0x2a4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	fb12 f303 	smulbb	r3, r2, r3
 8002996:	b29b      	uxth	r3, r3
 8002998:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800299c:	b29a      	uxth	r2, r3
 800299e:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <StraightLineMoveSpeedScale+0x2ac>)
 80029a0:	801a      	strh	r2, [r3, #0]
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <StraightLineMoveSpeedScale+0x294>)
 80029a4:	f993 3000 	ldrsb.w	r3, [r3]
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <StraightLineMoveSpeedScale+0x2a4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	fb12 f303 	smulbb	r3, r2, r3
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 80029ba:	3308      	adds	r3, #8
 80029bc:	b29a      	uxth	r2, r3
 80029be:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <StraightLineMoveSpeedScale+0x2b0>)
 80029c0:	801a      	strh	r2, [r3, #0]

	__SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 80029c2:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <StraightLineMoveSpeedScale+0x2ac>)
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	edd3 7a00 	vldr	s15, [r3]
 80029d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d8:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <StraightLineMoveSpeedScale+0x2b8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e0:	ee17 2a90 	vmov	r2, s15
 80029e4:	635a      	str	r2, [r3, #52]	; 0x34
 80029e6:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <StraightLineMoveSpeedScale+0x2b0>)
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	edd3 7a00 	vldr	s15, [r3]
 80029f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fc:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <StraightLineMoveSpeedScale+0x2b8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a04:	ee17 2a90 	vmov	r2, s15
 8002a08:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200004f0 	.word	0x200004f0
 8002a18:	2000024c 	.word	0x2000024c
 8002a1c:	200004f2 	.word	0x200004f2
 8002a20:	200002e8 	.word	0x200002e8
 8002a24:	2000013c 	.word	0x2000013c
 8002a28:	00000000 	.word	0x00000000
 8002a2c:	200004ec 	.word	0x200004ec
 8002a30:	20000508 	.word	0x20000508
 8002a34:	20000580 	.word	0x20000580
 8002a38:	fffffd44 	.word	0xfffffd44
 8002a3c:	200004f4 	.word	0x200004f4
 8002a40:	200004f6 	.word	0x200004f6
 8002a44:	20000530 	.word	0x20000530
 8002a48:	200003c0 	.word	0x200003c0
 8002a4c:	00000000 	.word	0x00000000

08002a50 <RobotMoveDist>:

void RobotMoveDist(float * targetDist, const uint8_t dir, const uint8_t speedMode){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	70fb      	strb	r3, [r7, #3]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	70bb      	strb	r3, [r7, #2]
	angleNow = 0; gyroZ = 0; // reset angle for PID
 8002a60:	4ba3      	ldr	r3, [pc, #652]	; (8002cf0 <RobotMoveDist+0x2a0>)
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	4ba2      	ldr	r3, [pc, #648]	; (8002cf4 <RobotMoveDist+0x2a4>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	801a      	strh	r2, [r3, #0]
		PIDConfigReset(&pidTSlow);
 8002a6e:	48a2      	ldr	r0, [pc, #648]	; (8002cf8 <RobotMoveDist+0x2a8>)
 8002a70:	f7ff fcc3 	bl	80023fa <PIDConfigReset>
		PIDConfigReset(&pidSlow);
 8002a74:	48a1      	ldr	r0, [pc, #644]	; (8002cfc <RobotMoveDist+0x2ac>)
 8002a76:	f7ff fcc0 	bl	80023fa <PIDConfigReset>
		PIDConfigReset(&pidFast);
 8002a7a:	48a1      	ldr	r0, [pc, #644]	; (8002d00 <RobotMoveDist+0x2b0>)
 8002a7c:	f7ff fcbd 	bl	80023fa <PIDConfigReset>
		curDistTick = 0;
 8002a80:	4ba0      	ldr	r3, [pc, #640]	; (8002d04 <RobotMoveDist+0x2b4>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	801a      	strh	r2, [r3, #0]

		__GET_TARGETTICK(*targetDist, targetDistTick);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd fd54 	bl	8000538 <__aeabi_f2d>
 8002a90:	a391      	add	r3, pc, #580	; (adr r3, 8002cd8 <RobotMoveDist+0x288>)
 8002a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a96:	f7fd fda7 	bl	80005e8 <__aeabi_dmul>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	a38f      	add	r3, pc, #572	; (adr r3, 8002ce0 <RobotMoveDist+0x290>)
 8002aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa8:	f7fd fec8 	bl	800083c <__aeabi_ddiv>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	4b93      	ldr	r3, [pc, #588]	; (8002d08 <RobotMoveDist+0x2b8>)
 8002aba:	f7fd fd95 	bl	80005e8 <__aeabi_dmul>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	4b90      	ldr	r3, [pc, #576]	; (8002d0c <RobotMoveDist+0x2bc>)
 8002acc:	f7fd fbd4 	bl	8000278 <__aeabi_dsub>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7fe f820 	bl	8000b1c <__aeabi_d2uiz>
 8002adc:	4603      	mov	r3, r0
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	4b8b      	ldr	r3, [pc, #556]	; (8002d10 <RobotMoveDist+0x2c0>)
 8002ae2:	801a      	strh	r2, [r3, #0]

		last_curTask_tick = HAL_GetTick();
 8002ae4:	f003 fdfe 	bl	80066e4 <HAL_GetTick>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a8a      	ldr	r2, [pc, #552]	; (8002d14 <RobotMoveDist+0x2c4>)
 8002aec:	6013      	str	r3, [r2, #0]
		__SET_MOTOR_DIRECTION(dir);
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	2104      	movs	r1, #4
 8002afe:	4886      	ldr	r0, [pc, #536]	; (8002d18 <RobotMoveDist+0x2c8>)
 8002b00:	f004 fd60 	bl	80075c4 <HAL_GPIO_WritePin>
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	bf14      	ite	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	2300      	moveq	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	2108      	movs	r1, #8
 8002b14:	4880      	ldr	r0, [pc, #512]	; (8002d18 <RobotMoveDist+0x2c8>)
 8002b16:	f004 fd55 	bl	80075c4 <HAL_GPIO_WritePin>
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf0c      	ite	eq
 8002b20:	2301      	moveq	r3, #1
 8002b22:	2300      	movne	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	2120      	movs	r1, #32
 8002b2a:	487b      	ldr	r0, [pc, #492]	; (8002d18 <RobotMoveDist+0x2c8>)
 8002b2c:	f004 fd4a 	bl	80075c4 <HAL_GPIO_WritePin>
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bf14      	ite	ne
 8002b36:	2301      	movne	r3, #1
 8002b38:	2300      	moveq	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2110      	movs	r1, #16
 8002b40:	4875      	ldr	r0, [pc, #468]	; (8002d18 <RobotMoveDist+0x2c8>)
 8002b42:	f004 fd3f 	bl	80075c4 <HAL_GPIO_WritePin>
		__SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 8002b46:	4b75      	ldr	r3, [pc, #468]	; (8002d1c <RobotMoveDist+0x2cc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	4b74      	ldr	r3, [pc, #464]	; (8002d20 <RobotMoveDist+0x2d0>)
 8002b50:	801a      	strh	r2, [r3, #0]
		do {
			__GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002b52:	4b72      	ldr	r3, [pc, #456]	; (8002d1c <RobotMoveDist+0x2cc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	4b70      	ldr	r3, [pc, #448]	; (8002d1c <RobotMoveDist+0x2cc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d117      	bne.n	8002b98 <RobotMoveDist+0x148>
 8002b68:	4b6d      	ldr	r3, [pc, #436]	; (8002d20 <RobotMoveDist+0x2d0>)
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d806      	bhi.n	8002b82 <RobotMoveDist+0x132>
 8002b74:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <RobotMoveDist+0x2d0>)
 8002b76:	881a      	ldrh	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	e007      	b.n	8002b92 <RobotMoveDist+0x142>
 8002b82:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <RobotMoveDist+0x2d0>)
 8002b84:	881a      	ldrh	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	4a64      	ldr	r2, [pc, #400]	; (8002d24 <RobotMoveDist+0x2d4>)
 8002b94:	8013      	strh	r3, [r2, #0]
 8002b96:	e016      	b.n	8002bc6 <RobotMoveDist+0x176>
 8002b98:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <RobotMoveDist+0x2d0>)
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d306      	bcc.n	8002bb2 <RobotMoveDist+0x162>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	4b5d      	ldr	r3, [pc, #372]	; (8002d20 <RobotMoveDist+0x2d0>)
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	e007      	b.n	8002bc2 <RobotMoveDist+0x172>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	4b5a      	ldr	r3, [pc, #360]	; (8002d20 <RobotMoveDist+0x2d0>)
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	4a58      	ldr	r2, [pc, #352]	; (8002d24 <RobotMoveDist+0x2d4>)
 8002bc4:	8013      	strh	r3, [r2, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	4b55      	ldr	r3, [pc, #340]	; (8002d20 <RobotMoveDist+0x2d0>)
 8002bcc:	801a      	strh	r2, [r3, #0]
			curDistTick += dist_dL;
 8002bce:	4b4d      	ldr	r3, [pc, #308]	; (8002d04 <RobotMoveDist+0x2b4>)
 8002bd0:	881a      	ldrh	r2, [r3, #0]
 8002bd2:	4b54      	ldr	r3, [pc, #336]	; (8002d24 <RobotMoveDist+0x2d4>)
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	4b4a      	ldr	r3, [pc, #296]	; (8002d04 <RobotMoveDist+0x2b4>)
 8002bdc:	801a      	strh	r2, [r3, #0]

			if (curDistTick >= targetDistTick) break;
 8002bde:	4b49      	ldr	r3, [pc, #292]	; (8002d04 <RobotMoveDist+0x2b4>)
 8002be0:	881a      	ldrh	r2, [r3, #0]
 8002be2:	4b4b      	ldr	r3, [pc, #300]	; (8002d10 <RobotMoveDist+0x2c0>)
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	f080 80a4 	bcs.w	8002d34 <RobotMoveDist+0x2e4>

			if (HAL_GetTick() - last_curTask_tick >= 10) {
 8002bec:	f003 fd7a 	bl	80066e4 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b48      	ldr	r3, [pc, #288]	; (8002d14 <RobotMoveDist+0x2c4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b09      	cmp	r3, #9
 8002bfa:	d9aa      	bls.n	8002b52 <RobotMoveDist+0x102>
				if (speedMode == SPEED_MODE_T) {
 8002bfc:	78bb      	ldrb	r3, [r7, #2]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d103      	bne.n	8002c0a <RobotMoveDist+0x1ba>
					StraightLineMove(SPEED_MODE_T);
 8002c02:	2000      	movs	r0, #0
 8002c04:	f7ff fc0c 	bl	8002420 <StraightLineMove>
 8002c08:	e05f      	b.n	8002cca <RobotMoveDist+0x27a>
				} else {
					speedScale = abs(curDistTick - targetDistTick) / 990; // start to slow down at last 990 ticks (15cm)
 8002c0a:	4b3e      	ldr	r3, [pc, #248]	; (8002d04 <RobotMoveDist+0x2b4>)
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4b3f      	ldr	r3, [pc, #252]	; (8002d10 <RobotMoveDist+0x2c0>)
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	bfb8      	it	lt
 8002c1a:	425b      	neglt	r3, r3
 8002c1c:	4a42      	ldr	r2, [pc, #264]	; (8002d28 <RobotMoveDist+0x2d8>)
 8002c1e:	fb82 1203 	smull	r1, r2, r2, r3
 8002c22:	11d2      	asrs	r2, r2, #7
 8002c24:	17db      	asrs	r3, r3, #31
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	ee07 3a90 	vmov	s15, r3
 8002c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c30:	4b3e      	ldr	r3, [pc, #248]	; (8002d2c <RobotMoveDist+0x2dc>)
 8002c32:	edc3 7a00 	vstr	s15, [r3]
					if (speedMode == SPEED_MODE_1) speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8002c36:	78bb      	ldrb	r3, [r7, #2]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d11e      	bne.n	8002c7a <RobotMoveDist+0x22a>
 8002c3c:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <RobotMoveDist+0x2dc>)
 8002c3e:	edd3 7a00 	vldr	s15, [r3]
 8002c42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4e:	dd02      	ble.n	8002c56 <RobotMoveDist+0x206>
 8002c50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c54:	e00e      	b.n	8002c74 <RobotMoveDist+0x224>
 8002c56:	4b35      	ldr	r3, [pc, #212]	; (8002d2c <RobotMoveDist+0x2dc>)
 8002c58:	edd3 7a00 	vldr	s15, [r3]
 8002c5c:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8002c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c68:	d502      	bpl.n	8002c70 <RobotMoveDist+0x220>
 8002c6a:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002c6e:	e001      	b.n	8002c74 <RobotMoveDist+0x224>
 8002c70:	4b2e      	ldr	r3, [pc, #184]	; (8002d2c <RobotMoveDist+0x2dc>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a2d      	ldr	r2, [pc, #180]	; (8002d2c <RobotMoveDist+0x2dc>)
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	e022      	b.n	8002cc0 <RobotMoveDist+0x270>
					else if (speedMode == SPEED_MODE_2)speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8002c7a:	78bb      	ldrb	r3, [r7, #2]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d11f      	bne.n	8002cc0 <RobotMoveDist+0x270>
 8002c80:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <RobotMoveDist+0x2dc>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c92:	dd02      	ble.n	8002c9a <RobotMoveDist+0x24a>
 8002c94:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c98:	e010      	b.n	8002cbc <RobotMoveDist+0x26c>
 8002c9a:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <RobotMoveDist+0x2dc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fc4a 	bl	8000538 <__aeabi_f2d>
 8002ca4:	a310      	add	r3, pc, #64	; (adr r3, 8002ce8 <RobotMoveDist+0x298>)
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f7fd ff0f 	bl	8000acc <__aeabi_dcmplt>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <RobotMoveDist+0x268>
 8002cb4:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <RobotMoveDist+0x2e0>)
 8002cb6:	e001      	b.n	8002cbc <RobotMoveDist+0x26c>
 8002cb8:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <RobotMoveDist+0x2dc>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a1b      	ldr	r2, [pc, #108]	; (8002d2c <RobotMoveDist+0x2dc>)
 8002cbe:	6013      	str	r3, [r2, #0]
					StraightLineMoveSpeedScale(speedMode, &speedScale);
 8002cc0:	78bb      	ldrb	r3, [r7, #2]
 8002cc2:	491a      	ldr	r1, [pc, #104]	; (8002d2c <RobotMoveDist+0x2dc>)
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fd63 	bl	8002790 <StraightLineMoveSpeedScale>
				}

				last_curTask_tick = HAL_GetTick();
 8002cca:	f003 fd0b 	bl	80066e4 <HAL_GetTick>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4a10      	ldr	r2, [pc, #64]	; (8002d14 <RobotMoveDist+0x2c4>)
 8002cd2:	6013      	str	r3, [r2, #0]
			__GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002cd4:	e73d      	b.n	8002b52 <RobotMoveDist+0x102>
 8002cd6:	bf00      	nop
 8002cd8:	4363be27 	.word	0x4363be27
 8002cdc:	3ff367fa 	.word	0x3ff367fa
 8002ce0:	66666666 	.word	0x66666666
 8002ce4:	4035a666 	.word	0x4035a666
 8002ce8:	9999999a 	.word	0x9999999a
 8002cec:	3fd99999 	.word	0x3fd99999
 8002cf0:	200004ec 	.word	0x200004ec
 8002cf4:	200004f2 	.word	0x200004f2
 8002cf8:	2000051c 	.word	0x2000051c
 8002cfc:	20000508 	.word	0x20000508
 8002d00:	20000530 	.word	0x20000530
 8002d04:	20000500 	.word	0x20000500
 8002d08:	4094a000 	.word	0x4094a000
 8002d0c:	40240000 	.word	0x40240000
 8002d10:	20000502 	.word	0x20000502
 8002d14:	200004f8 	.word	0x200004f8
 8002d18:	40020000 	.word	0x40020000
 8002d1c:	200002e8 	.word	0x200002e8
 8002d20:	20000506 	.word	0x20000506
 8002d24:	20000504 	.word	0x20000504
 8002d28:	21195767 	.word	0x21195767
 8002d2c:	20000138 	.word	0x20000138
 8002d30:	3ecccccd 	.word	0x3ecccccd
			if (curDistTick >= targetDistTick) break;
 8002d34:	bf00      	nop
			}
		} while (1);
		__SET_MOTOR_DUTY(&htim8, 0, 0);
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <RobotMoveDist+0x300>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d3e:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <RobotMoveDist+0x300>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38
	}
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	200003c0 	.word	0x200003c0
 8002d54:	00000000 	.word	0x00000000

08002d58 <RobotMoveDistObstacle>:

// RobotMoveDistObstacle must be called within a task(eg. runFastestPath) and not within an interrupt(eg. UART, EXTI)
// else osDelay won't work and TRI's timer interrupt can't be given chance to update obsDist_US
void RobotMoveDistObstacle(float * targetDist, const uint8_t speedMode) {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	70fb      	strb	r3, [r7, #3]
	angleNow = 0; gyroZ = 0;
 8002d64:	4baa      	ldr	r3, [pc, #680]	; (8003010 <RobotMoveDistObstacle+0x2b8>)
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	4ba9      	ldr	r3, [pc, #676]	; (8003014 <RobotMoveDistObstacle+0x2bc>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	801a      	strh	r2, [r3, #0]
	PIDConfigReset(&pidTSlow);
 8002d72:	48a9      	ldr	r0, [pc, #676]	; (8003018 <RobotMoveDistObstacle+0x2c0>)
 8002d74:	f7ff fb41 	bl	80023fa <PIDConfigReset>
	PIDConfigReset(&pidSlow);
 8002d78:	48a8      	ldr	r0, [pc, #672]	; (800301c <RobotMoveDistObstacle+0x2c4>)
 8002d7a:	f7ff fb3e 	bl	80023fa <PIDConfigReset>
	PIDConfigReset(&pidFast);
 8002d7e:	48a8      	ldr	r0, [pc, #672]	; (8003020 <RobotMoveDistObstacle+0x2c8>)
 8002d80:	f7ff fb3b 	bl	80023fa <PIDConfigReset>
	obsDist_US = 1000;
 8002d84:	4ba7      	ldr	r3, [pc, #668]	; (8003024 <RobotMoveDistObstacle+0x2cc>)
 8002d86:	4aa8      	ldr	r2, [pc, #672]	; (8003028 <RobotMoveDistObstacle+0x2d0>)
 8002d88:	601a      	str	r2, [r3, #0]
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8002d8a:	2104      	movs	r1, #4
 8002d8c:	48a7      	ldr	r0, [pc, #668]	; (800302c <RobotMoveDistObstacle+0x2d4>)
 8002d8e:	f006 fa4b 	bl	8009228 <HAL_TIM_IC_Start_IT>
	last_curTask_tick = HAL_GetTick();
 8002d92:	f003 fca7 	bl	80066e4 <HAL_GetTick>
 8002d96:	4603      	mov	r3, r0
 8002d98:	4aa5      	ldr	r2, [pc, #660]	; (8003030 <RobotMoveDistObstacle+0x2d8>)
 8002d9a:	6013      	str	r3, [r2, #0]

	do {
	  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	2110      	movs	r1, #16
 8002da0:	48a4      	ldr	r0, [pc, #656]	; (8003034 <RobotMoveDistObstacle+0x2dc>)
 8002da2:	f004 fc0f 	bl	80075c4 <HAL_GPIO_WritePin>
	  __delay_us(&htim4, 10); // wait for 10us
 8002da6:	4ba1      	ldr	r3, [pc, #644]	; (800302c <RobotMoveDistObstacle+0x2d4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2200      	movs	r2, #0
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24
 8002dae:	4b9f      	ldr	r3, [pc, #636]	; (800302c <RobotMoveDistObstacle+0x2d4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	2b09      	cmp	r3, #9
 8002db6:	d9fa      	bls.n	8002dae <RobotMoveDistObstacle+0x56>
	  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8002db8:	2200      	movs	r2, #0
 8002dba:	2110      	movs	r1, #16
 8002dbc:	489d      	ldr	r0, [pc, #628]	; (8003034 <RobotMoveDistObstacle+0x2dc>)
 8002dbe:	f004 fc01 	bl	80075c4 <HAL_GPIO_WritePin>
	  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 8002dc2:	4b9a      	ldr	r3, [pc, #616]	; (800302c <RobotMoveDistObstacle+0x2d4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	4b98      	ldr	r3, [pc, #608]	; (800302c <RobotMoveDistObstacle+0x2d4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0204 	orr.w	r2, r2, #4
 8002dd0:	60da      	str	r2, [r3, #12]
	  osDelay(10); // give timer interrupt chance to update obsDist_US value
 8002dd2:	200a      	movs	r0, #10
 8002dd4:	f008 ff6c 	bl	800bcb0 <osDelay>
	  if (abs(*targetDist - obsDist_US) < 0.1) break;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	ed93 7a00 	vldr	s14, [r3]
 8002dde:	4b91      	ldr	r3, [pc, #580]	; (8003024 <RobotMoveDistObstacle+0x2cc>)
 8002de0:	edd3 7a00 	vldr	s15, [r3]
 8002de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002de8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dec:	ee17 3a90 	vmov	r3, s15
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	db0e      	blt.n	8002e12 <RobotMoveDistObstacle+0xba>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	ed93 7a00 	vldr	s14, [r3]
 8002dfa:	4b8a      	ldr	r3, [pc, #552]	; (8003024 <RobotMoveDistObstacle+0x2cc>)
 8002dfc:	edd3 7a00 	vldr	s15, [r3]
 8002e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e08:	ee17 3a90 	vmov	r3, s15
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f340 80e7 	ble.w	8002fe0 <RobotMoveDistObstacle+0x288>
	  __SET_MOTOR_DIRECTION(obsDist_US >= *targetDist);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	ed93 7a00 	vldr	s14, [r3]
 8002e18:	4b82      	ldr	r3, [pc, #520]	; (8003024 <RobotMoveDistObstacle+0x2cc>)
 8002e1a:	edd3 7a00 	vldr	s15, [r3]
 8002e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e26:	bf94      	ite	ls
 8002e28:	2301      	movls	r3, #1
 8002e2a:	2300      	movhi	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f083 0301 	eor.w	r3, r3, #1
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	2104      	movs	r1, #4
 8002e3a:	487f      	ldr	r0, [pc, #508]	; (8003038 <RobotMoveDistObstacle+0x2e0>)
 8002e3c:	f004 fbc2 	bl	80075c4 <HAL_GPIO_WritePin>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	ed93 7a00 	vldr	s14, [r3]
 8002e46:	4b77      	ldr	r3, [pc, #476]	; (8003024 <RobotMoveDistObstacle+0x2cc>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e54:	bf94      	ite	ls
 8002e56:	2301      	movls	r3, #1
 8002e58:	2300      	movhi	r3, #0
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2108      	movs	r1, #8
 8002e60:	4875      	ldr	r0, [pc, #468]	; (8003038 <RobotMoveDistObstacle+0x2e0>)
 8002e62:	f004 fbaf 	bl	80075c4 <HAL_GPIO_WritePin>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	ed93 7a00 	vldr	s14, [r3]
 8002e6c:	4b6d      	ldr	r3, [pc, #436]	; (8003024 <RobotMoveDistObstacle+0x2cc>)
 8002e6e:	edd3 7a00 	vldr	s15, [r3]
 8002e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7a:	bf94      	ite	ls
 8002e7c:	2301      	movls	r3, #1
 8002e7e:	2300      	movhi	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f083 0301 	eor.w	r3, r3, #1
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2120      	movs	r1, #32
 8002e8e:	486a      	ldr	r0, [pc, #424]	; (8003038 <RobotMoveDistObstacle+0x2e0>)
 8002e90:	f004 fb98 	bl	80075c4 <HAL_GPIO_WritePin>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	ed93 7a00 	vldr	s14, [r3]
 8002e9a:	4b62      	ldr	r3, [pc, #392]	; (8003024 <RobotMoveDistObstacle+0x2cc>)
 8002e9c:	edd3 7a00 	vldr	s15, [r3]
 8002ea0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea8:	bf94      	ite	ls
 8002eaa:	2301      	movls	r3, #1
 8002eac:	2300      	movhi	r3, #0
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2110      	movs	r1, #16
 8002eb4:	4860      	ldr	r0, [pc, #384]	; (8003038 <RobotMoveDistObstacle+0x2e0>)
 8002eb6:	f004 fb85 	bl	80075c4 <HAL_GPIO_WritePin>
	  if (HAL_GetTick() - last_curTask_tick >=20) {
 8002eba:	f003 fc13 	bl	80066e4 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	4b5b      	ldr	r3, [pc, #364]	; (8003030 <RobotMoveDistObstacle+0x2d8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b13      	cmp	r3, #19
 8002ec8:	f67f af68 	bls.w	8002d9c <RobotMoveDistObstacle+0x44>
//		  speedScale = 1;
		  if (speedMode == SPEED_MODE_1) {
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d13f      	bne.n	8002f52 <RobotMoveDistObstacle+0x1fa>
			  speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 8002ed2:	4b54      	ldr	r3, [pc, #336]	; (8003024 <RobotMoveDistObstacle+0x2cc>)
 8002ed4:	ed93 7a00 	vldr	s14, [r3]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	edd3 7a00 	vldr	s15, [r3]
 8002ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ee6:	ee17 3a90 	vmov	r3, s15
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	bfb8      	it	lt
 8002eee:	425b      	neglt	r3, r3
 8002ef0:	4a52      	ldr	r2, [pc, #328]	; (800303c <RobotMoveDistObstacle+0x2e4>)
 8002ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ef6:	441a      	add	r2, r3
 8002ef8:	10d2      	asrs	r2, r2, #3
 8002efa:	17db      	asrs	r3, r3, #31
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f06:	4b4e      	ldr	r3, [pc, #312]	; (8003040 <RobotMoveDistObstacle+0x2e8>)
 8002f08:	edc3 7a00 	vstr	s15, [r3]
			  speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8002f0c:	4b4c      	ldr	r3, [pc, #304]	; (8003040 <RobotMoveDistObstacle+0x2e8>)
 8002f0e:	edd3 7a00 	vldr	s15, [r3]
 8002f12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1e:	dd02      	ble.n	8002f26 <RobotMoveDistObstacle+0x1ce>
 8002f20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002f24:	e00e      	b.n	8002f44 <RobotMoveDistObstacle+0x1ec>
 8002f26:	4b46      	ldr	r3, [pc, #280]	; (8003040 <RobotMoveDistObstacle+0x2e8>)
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8002f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f38:	d502      	bpl.n	8002f40 <RobotMoveDistObstacle+0x1e8>
 8002f3a:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002f3e:	e001      	b.n	8002f44 <RobotMoveDistObstacle+0x1ec>
 8002f40:	4b3f      	ldr	r3, [pc, #252]	; (8003040 <RobotMoveDistObstacle+0x2e8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a3e      	ldr	r2, [pc, #248]	; (8003040 <RobotMoveDistObstacle+0x2e8>)
 8002f46:	6013      	str	r3, [r2, #0]
			  StraightLineMoveSpeedScale(SPEED_MODE_1, &speedScale);
 8002f48:	493d      	ldr	r1, [pc, #244]	; (8003040 <RobotMoveDistObstacle+0x2e8>)
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	f7ff fc20 	bl	8002790 <StraightLineMoveSpeedScale>
 8002f50:	e040      	b.n	8002fd4 <RobotMoveDistObstacle+0x27c>
		  } else {
			  speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 8002f52:	4b34      	ldr	r3, [pc, #208]	; (8003024 <RobotMoveDistObstacle+0x2cc>)
 8002f54:	ed93 7a00 	vldr	s14, [r3]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	edd3 7a00 	vldr	s15, [r3]
 8002f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f66:	ee17 3a90 	vmov	r3, s15
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	bfb8      	it	lt
 8002f6e:	425b      	neglt	r3, r3
 8002f70:	4a32      	ldr	r2, [pc, #200]	; (800303c <RobotMoveDistObstacle+0x2e4>)
 8002f72:	fb82 1203 	smull	r1, r2, r2, r3
 8002f76:	441a      	add	r2, r3
 8002f78:	10d2      	asrs	r2, r2, #3
 8002f7a:	17db      	asrs	r3, r3, #31
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	ee07 3a90 	vmov	s15, r3
 8002f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f86:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <RobotMoveDistObstacle+0x2e8>)
 8002f88:	edc3 7a00 	vstr	s15, [r3]
			  speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8002f8c:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <RobotMoveDistObstacle+0x2e8>)
 8002f8e:	edd3 7a00 	vldr	s15, [r3]
 8002f92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9e:	dd02      	ble.n	8002fa6 <RobotMoveDistObstacle+0x24e>
 8002fa0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002fa4:	e010      	b.n	8002fc8 <RobotMoveDistObstacle+0x270>
 8002fa6:	4b26      	ldr	r3, [pc, #152]	; (8003040 <RobotMoveDistObstacle+0x2e8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd fac4 	bl	8000538 <__aeabi_f2d>
 8002fb0:	a315      	add	r3, pc, #84	; (adr r3, 8003008 <RobotMoveDistObstacle+0x2b0>)
 8002fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb6:	f7fd fd89 	bl	8000acc <__aeabi_dcmplt>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <RobotMoveDistObstacle+0x26c>
 8002fc0:	4b20      	ldr	r3, [pc, #128]	; (8003044 <RobotMoveDistObstacle+0x2ec>)
 8002fc2:	e001      	b.n	8002fc8 <RobotMoveDistObstacle+0x270>
 8002fc4:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <RobotMoveDistObstacle+0x2e8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1d      	ldr	r2, [pc, #116]	; (8003040 <RobotMoveDistObstacle+0x2e8>)
 8002fca:	6013      	str	r3, [r2, #0]
			  StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 8002fcc:	491c      	ldr	r1, [pc, #112]	; (8003040 <RobotMoveDistObstacle+0x2e8>)
 8002fce:	2002      	movs	r0, #2
 8002fd0:	f7ff fbde 	bl	8002790 <StraightLineMoveSpeedScale>
		  }


		  last_curTask_tick = HAL_GetTick();
 8002fd4:	f003 fb86 	bl	80066e4 <HAL_GetTick>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4a15      	ldr	r2, [pc, #84]	; (8003030 <RobotMoveDistObstacle+0x2d8>)
 8002fdc:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8002fde:	e6dd      	b.n	8002d9c <RobotMoveDistObstacle+0x44>
	  if (abs(*targetDist - obsDist_US) < 0.1) break;
 8002fe0:	bf00      	nop
	  }

	} while (1);

	__SET_MOTOR_DUTY(&htim8, 0, 0);
 8002fe2:	4b19      	ldr	r3, [pc, #100]	; (8003048 <RobotMoveDistObstacle+0x2f0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <RobotMoveDistObstacle+0x2f0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_2);
 8002ff2:	2104      	movs	r1, #4
 8002ff4:	480d      	ldr	r0, [pc, #52]	; (800302c <RobotMoveDistObstacle+0x2d4>)
 8002ff6:	f006 fa3f 	bl	8009478 <HAL_TIM_IC_Stop_IT>
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	f3af 8000 	nop.w
 8003008:	9999999a 	.word	0x9999999a
 800300c:	3fd99999 	.word	0x3fd99999
 8003010:	200004ec 	.word	0x200004ec
 8003014:	200004f2 	.word	0x200004f2
 8003018:	2000051c 	.word	0x2000051c
 800301c:	20000508 	.word	0x20000508
 8003020:	20000530 	.word	0x20000530
 8003024:	2000054c 	.word	0x2000054c
 8003028:	447a0000 	.word	0x447a0000
 800302c:	20000378 	.word	0x20000378
 8003030:	200004f8 	.word	0x200004f8
 8003034:	40020400 	.word	0x40020400
 8003038:	40020000 	.word	0x40020000
 800303c:	88888889 	.word	0x88888889
 8003040:	20000138 	.word	0x20000138
 8003044:	3ecccccd 	.word	0x3ecccccd
 8003048:	200003c0 	.word	0x200003c0
 800304c:	00000000 	.word	0x00000000

08003050 <RobotMoveDistObstacle_IR>:

void RobotMoveDistObstacle_IR(float * targetDist) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	dataPoint = 0; IR_data_raw_acc = 0; obsDist_IR = 1000;
 8003058:	4ba1      	ldr	r3, [pc, #644]	; (80032e0 <RobotMoveDistObstacle_IR+0x290>)
 800305a:	2200      	movs	r2, #0
 800305c:	801a      	strh	r2, [r3, #0]
 800305e:	4ba1      	ldr	r3, [pc, #644]	; (80032e4 <RobotMoveDistObstacle_IR+0x294>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	4ba0      	ldr	r3, [pc, #640]	; (80032e8 <RobotMoveDistObstacle_IR+0x298>)
 8003066:	4aa1      	ldr	r2, [pc, #644]	; (80032ec <RobotMoveDistObstacle_IR+0x29c>)
 8003068:	601a      	str	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 800306a:	f003 fb3b 	bl	80066e4 <HAL_GetTick>
 800306e:	4603      	mov	r3, r0
 8003070:	4a9f      	ldr	r2, [pc, #636]	; (80032f0 <RobotMoveDistObstacle_IR+0x2a0>)
 8003072:	6013      	str	r3, [r2, #0]
//	__PEND_CURCMD(curCmd);

	do {
		__ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003074:	489f      	ldr	r0, [pc, #636]	; (80032f4 <RobotMoveDistObstacle_IR+0x2a4>)
 8003076:	f003 fba9 	bl	80067cc <HAL_ADC_Start>
 800307a:	2114      	movs	r1, #20
 800307c:	489d      	ldr	r0, [pc, #628]	; (80032f4 <RobotMoveDistObstacle_IR+0x2a4>)
 800307e:	f003 fcaa 	bl	80069d6 <HAL_ADC_PollForConversion>
 8003082:	489c      	ldr	r0, [pc, #624]	; (80032f4 <RobotMoveDistObstacle_IR+0x2a4>)
 8003084:	f003 fd32 	bl	8006aec <HAL_ADC_GetValue>
 8003088:	4602      	mov	r2, r0
 800308a:	4b96      	ldr	r3, [pc, #600]	; (80032e4 <RobotMoveDistObstacle_IR+0x294>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4413      	add	r3, r2
 8003090:	4a94      	ldr	r2, [pc, #592]	; (80032e4 <RobotMoveDistObstacle_IR+0x294>)
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b92      	ldr	r3, [pc, #584]	; (80032e0 <RobotMoveDistObstacle_IR+0x290>)
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	3301      	adds	r3, #1
 800309a:	4a97      	ldr	r2, [pc, #604]	; (80032f8 <RobotMoveDistObstacle_IR+0x2a8>)
 800309c:	fb82 1203 	smull	r1, r2, r2, r3
 80030a0:	1151      	asrs	r1, r2, #5
 80030a2:	17da      	asrs	r2, r3, #31
 80030a4:	1a8a      	subs	r2, r1, r2
 80030a6:	2164      	movs	r1, #100	; 0x64
 80030a8:	fb01 f202 	mul.w	r2, r1, r2
 80030ac:	1a9a      	subs	r2, r3, r2
 80030ae:	b292      	uxth	r2, r2
 80030b0:	4b8b      	ldr	r3, [pc, #556]	; (80032e0 <RobotMoveDistObstacle_IR+0x290>)
 80030b2:	801a      	strh	r2, [r3, #0]
 80030b4:	4b8a      	ldr	r3, [pc, #552]	; (80032e0 <RobotMoveDistObstacle_IR+0x290>)
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	2b63      	cmp	r3, #99	; 0x63
 80030ba:	d129      	bne.n	8003110 <RobotMoveDistObstacle_IR+0xc0>
 80030bc:	4b89      	ldr	r3, [pc, #548]	; (80032e4 <RobotMoveDistObstacle_IR+0x294>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a87      	ldr	r2, [pc, #540]	; (80032e0 <RobotMoveDistObstacle_IR+0x290>)
 80030c2:	8812      	ldrh	r2, [r2, #0]
 80030c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fa13 	bl	80004f4 <__aeabi_ui2d>
 80030ce:	a37e      	add	r3, pc, #504	; (adr r3, 80032c8 <RobotMoveDistObstacle_IR+0x278>)
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f7fd f8d0 	bl	8000278 <__aeabi_dsub>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	a17c      	add	r1, pc, #496	; (adr r1, 80032d0 <RobotMoveDistObstacle_IR+0x280>)
 80030de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030e2:	f7fd fbab 	bl	800083c <__aeabi_ddiv>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4610      	mov	r0, r2
 80030ec:	4619      	mov	r1, r3
 80030ee:	f7fd fd35 	bl	8000b5c <__aeabi_d2f>
 80030f2:	4603      	mov	r3, r0
 80030f4:	4a7c      	ldr	r2, [pc, #496]	; (80032e8 <RobotMoveDistObstacle_IR+0x298>)
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	4b7a      	ldr	r3, [pc, #488]	; (80032e4 <RobotMoveDistObstacle_IR+0x294>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a78      	ldr	r2, [pc, #480]	; (80032e0 <RobotMoveDistObstacle_IR+0x290>)
 80030fe:	8812      	ldrh	r2, [r2, #0]
 8003100:	fbb3 f3f2 	udiv	r3, r3, r2
 8003104:	b29a      	uxth	r2, r3
 8003106:	4b7d      	ldr	r3, [pc, #500]	; (80032fc <RobotMoveDistObstacle_IR+0x2ac>)
 8003108:	801a      	strh	r2, [r3, #0]
 800310a:	4b76      	ldr	r3, [pc, #472]	; (80032e4 <RobotMoveDistObstacle_IR+0x294>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
		if (*targetDist > 0 && abs(*targetDist - obsDist_IR) < 0.1) break;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	edd3 7a00 	vldr	s15, [r3]
 8003116:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800311a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311e:	dd1c      	ble.n	800315a <RobotMoveDistObstacle_IR+0x10a>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	ed93 7a00 	vldr	s14, [r3]
 8003126:	4b70      	ldr	r3, [pc, #448]	; (80032e8 <RobotMoveDistObstacle_IR+0x298>)
 8003128:	edd3 7a00 	vldr	s15, [r3]
 800312c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003134:	ee17 3a90 	vmov	r3, s15
 8003138:	2b00      	cmp	r3, #0
 800313a:	db0e      	blt.n	800315a <RobotMoveDistObstacle_IR+0x10a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	ed93 7a00 	vldr	s14, [r3]
 8003142:	4b69      	ldr	r3, [pc, #420]	; (80032e8 <RobotMoveDistObstacle_IR+0x298>)
 8003144:	edd3 7a00 	vldr	s15, [r3]
 8003148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800314c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003150:	ee17 3a90 	vmov	r3, s15
 8003154:	2b00      	cmp	r3, #0
 8003156:	f340 80a4 	ble.w	80032a2 <RobotMoveDistObstacle_IR+0x252>

		__SET_MOTOR_DIRECTION(obsDist_IR >= *targetDist);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	ed93 7a00 	vldr	s14, [r3]
 8003160:	4b61      	ldr	r3, [pc, #388]	; (80032e8 <RobotMoveDistObstacle_IR+0x298>)
 8003162:	edd3 7a00 	vldr	s15, [r3]
 8003166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800316a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316e:	bf94      	ite	ls
 8003170:	2301      	movls	r3, #1
 8003172:	2300      	movhi	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	f083 0301 	eor.w	r3, r3, #1
 800317a:	b2db      	uxtb	r3, r3
 800317c:	b2db      	uxtb	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	2104      	movs	r1, #4
 8003182:	485f      	ldr	r0, [pc, #380]	; (8003300 <RobotMoveDistObstacle_IR+0x2b0>)
 8003184:	f004 fa1e 	bl	80075c4 <HAL_GPIO_WritePin>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	ed93 7a00 	vldr	s14, [r3]
 800318e:	4b56      	ldr	r3, [pc, #344]	; (80032e8 <RobotMoveDistObstacle_IR+0x298>)
 8003190:	edd3 7a00 	vldr	s15, [r3]
 8003194:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319c:	bf94      	ite	ls
 800319e:	2301      	movls	r3, #1
 80031a0:	2300      	movhi	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	2108      	movs	r1, #8
 80031a8:	4855      	ldr	r0, [pc, #340]	; (8003300 <RobotMoveDistObstacle_IR+0x2b0>)
 80031aa:	f004 fa0b 	bl	80075c4 <HAL_GPIO_WritePin>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	ed93 7a00 	vldr	s14, [r3]
 80031b4:	4b4c      	ldr	r3, [pc, #304]	; (80032e8 <RobotMoveDistObstacle_IR+0x298>)
 80031b6:	edd3 7a00 	vldr	s15, [r3]
 80031ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c2:	bf94      	ite	ls
 80031c4:	2301      	movls	r3, #1
 80031c6:	2300      	movhi	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	f083 0301 	eor.w	r3, r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	2120      	movs	r1, #32
 80031d6:	484a      	ldr	r0, [pc, #296]	; (8003300 <RobotMoveDistObstacle_IR+0x2b0>)
 80031d8:	f004 f9f4 	bl	80075c4 <HAL_GPIO_WritePin>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	ed93 7a00 	vldr	s14, [r3]
 80031e2:	4b41      	ldr	r3, [pc, #260]	; (80032e8 <RobotMoveDistObstacle_IR+0x298>)
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f0:	bf94      	ite	ls
 80031f2:	2301      	movls	r3, #1
 80031f4:	2300      	movhi	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	2110      	movs	r1, #16
 80031fc:	4840      	ldr	r0, [pc, #256]	; (8003300 <RobotMoveDistObstacle_IR+0x2b0>)
 80031fe:	f004 f9e1 	bl	80075c4 <HAL_GPIO_WritePin>
	  if (HAL_GetTick() - last_curTask_tick >=10) {
 8003202:	f003 fa6f 	bl	80066e4 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	4b39      	ldr	r3, [pc, #228]	; (80032f0 <RobotMoveDistObstacle_IR+0x2a0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b09      	cmp	r3, #9
 8003210:	f67f af30 	bls.w	8003074 <RobotMoveDistObstacle_IR+0x24>
//		  speedScale = 1;
		  speedScale = abs(obsDist_IR - *targetDist) / 15; // slow down at 15cm
 8003214:	4b34      	ldr	r3, [pc, #208]	; (80032e8 <RobotMoveDistObstacle_IR+0x298>)
 8003216:	ed93 7a00 	vldr	s14, [r3]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	edd3 7a00 	vldr	s15, [r3]
 8003220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003228:	ee17 3a90 	vmov	r3, s15
 800322c:	2b00      	cmp	r3, #0
 800322e:	bfb8      	it	lt
 8003230:	425b      	neglt	r3, r3
 8003232:	4a34      	ldr	r2, [pc, #208]	; (8003304 <RobotMoveDistObstacle_IR+0x2b4>)
 8003234:	fb82 1203 	smull	r1, r2, r2, r3
 8003238:	441a      	add	r2, r3
 800323a:	10d2      	asrs	r2, r2, #3
 800323c:	17db      	asrs	r3, r3, #31
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	ee07 3a90 	vmov	s15, r3
 8003244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003248:	4b2f      	ldr	r3, [pc, #188]	; (8003308 <RobotMoveDistObstacle_IR+0x2b8>)
 800324a:	edc3 7a00 	vstr	s15, [r3]
		  speedScale = speedScale > 1 ? 1 : (speedScale < 0.3 ? 0.3 : speedScale);
 800324e:	4b2e      	ldr	r3, [pc, #184]	; (8003308 <RobotMoveDistObstacle_IR+0x2b8>)
 8003250:	edd3 7a00 	vldr	s15, [r3]
 8003254:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800325c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003260:	dd02      	ble.n	8003268 <RobotMoveDistObstacle_IR+0x218>
 8003262:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003266:	e010      	b.n	800328a <RobotMoveDistObstacle_IR+0x23a>
 8003268:	4b27      	ldr	r3, [pc, #156]	; (8003308 <RobotMoveDistObstacle_IR+0x2b8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7fd f963 	bl	8000538 <__aeabi_f2d>
 8003272:	a319      	add	r3, pc, #100	; (adr r3, 80032d8 <RobotMoveDistObstacle_IR+0x288>)
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	f7fd fc28 	bl	8000acc <__aeabi_dcmplt>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <RobotMoveDistObstacle_IR+0x236>
 8003282:	4b22      	ldr	r3, [pc, #136]	; (800330c <RobotMoveDistObstacle_IR+0x2bc>)
 8003284:	e001      	b.n	800328a <RobotMoveDistObstacle_IR+0x23a>
 8003286:	4b20      	ldr	r3, [pc, #128]	; (8003308 <RobotMoveDistObstacle_IR+0x2b8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <RobotMoveDistObstacle_IR+0x2b8>)
 800328c:	6013      	str	r3, [r2, #0]
		  StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 800328e:	491e      	ldr	r1, [pc, #120]	; (8003308 <RobotMoveDistObstacle_IR+0x2b8>)
 8003290:	2002      	movs	r0, #2
 8003292:	f7ff fa7d 	bl	8002790 <StraightLineMoveSpeedScale>

		  last_curTask_tick = HAL_GetTick();
 8003296:	f003 fa25 	bl	80066e4 <HAL_GetTick>
 800329a:	4603      	mov	r3, r0
 800329c:	4a14      	ldr	r2, [pc, #80]	; (80032f0 <RobotMoveDistObstacle_IR+0x2a0>)
 800329e:	6013      	str	r3, [r2, #0]
		__ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 80032a0:	e6e8      	b.n	8003074 <RobotMoveDistObstacle_IR+0x24>
		if (*targetDist > 0 && abs(*targetDist - obsDist_IR) < 0.1) break;
 80032a2:	bf00      	nop
	  }
//	  osDelay(5);
	} while (1);

//  __ON_TASK_END(&htim8, prevTask, curTask);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 80032a4:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <RobotMoveDistObstacle_IR+0x2c0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2200      	movs	r2, #0
 80032aa:	635a      	str	r2, [r3, #52]	; 0x34
 80032ac:	4b18      	ldr	r3, [pc, #96]	; (8003310 <RobotMoveDistObstacle_IR+0x2c0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2200      	movs	r2, #0
 80032b2:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_ADC_Stop(&hadc1);
 80032b4:	480f      	ldr	r0, [pc, #60]	; (80032f4 <RobotMoveDistObstacle_IR+0x2a4>)
 80032b6:	f003 fb5b 	bl	8006970 <HAL_ADC_Stop>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	f3af 8000 	nop.w
 80032c8:	fb5723d3 	.word	0xfb5723d3
 80032cc:	407046c5 	.word	0x407046c5
 80032d0:	324c8366 	.word	0x324c8366
 80032d4:	40d90b34 	.word	0x40d90b34
 80032d8:	33333333 	.word	0x33333333
 80032dc:	3fd33333 	.word	0x3fd33333
 80032e0:	20000550 	.word	0x20000550
 80032e4:	20000554 	.word	0x20000554
 80032e8:	20000548 	.word	0x20000548
 80032ec:	447a0000 	.word	0x447a0000
 80032f0:	200004f8 	.word	0x200004f8
 80032f4:	200001bc 	.word	0x200001bc
 80032f8:	51eb851f 	.word	0x51eb851f
 80032fc:	20000544 	.word	0x20000544
 8003300:	40020000 	.word	0x40020000
 8003304:	88888889 	.word	0x88888889
 8003308:	20000138 	.word	0x20000138
 800330c:	3e99999a 	.word	0x3e99999a
 8003310:	200003c0 	.word	0x200003c0
 8003314:	00000000 	.word	0x00000000

08003318 <RobotTurn>:

void RobotTurn(float * targetAngle) {
 8003318:	b5b0      	push	{r4, r5, r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af04      	add	r7, sp, #16
 800331e:	6078      	str	r0, [r7, #4]
	angleNow = 0; gyroZ = 0;
 8003320:	4b4b      	ldr	r3, [pc, #300]	; (8003450 <RobotTurn+0x138>)
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	4b4a      	ldr	r3, [pc, #296]	; (8003454 <RobotTurn+0x13c>)
 800332a:	2200      	movs	r2, #0
 800332c:	801a      	strh	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 800332e:	f003 f9d9 	bl	80066e4 <HAL_GetTick>
 8003332:	4603      	mov	r3, r0
 8003334:	4a48      	ldr	r2, [pc, #288]	; (8003458 <RobotTurn+0x140>)
 8003336:	6013      	str	r3, [r2, #0]
	do {
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 8003338:	f003 f9d4 	bl	80066e4 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	4b46      	ldr	r3, [pc, #280]	; (8003458 <RobotTurn+0x140>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b09      	cmp	r3, #9
 8003346:	d9f7      	bls.n	8003338 <RobotTurn+0x20>
		  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8003348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800334c:	9302      	str	r3, [sp, #8]
 800334e:	2302      	movs	r3, #2
 8003350:	9301      	str	r3, [sp, #4]
 8003352:	4b42      	ldr	r3, [pc, #264]	; (800345c <RobotTurn+0x144>)
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	2301      	movs	r3, #1
 8003358:	2237      	movs	r2, #55	; 0x37
 800335a:	21d0      	movs	r1, #208	; 0xd0
 800335c:	4840      	ldr	r0, [pc, #256]	; (8003460 <RobotTurn+0x148>)
 800335e:	f004 fba1 	bl	8007aa4 <HAL_I2C_Mem_Read>
 8003362:	4b3e      	ldr	r3, [pc, #248]	; (800345c <RobotTurn+0x144>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	b21a      	sxth	r2, r3
 800336a:	4b3c      	ldr	r3, [pc, #240]	; (800345c <RobotTurn+0x144>)
 800336c:	785b      	ldrb	r3, [r3, #1]
 800336e:	b21b      	sxth	r3, r3
 8003370:	4313      	orrs	r3, r2
 8003372:	b21a      	sxth	r2, r3
 8003374:	4b37      	ldr	r3, [pc, #220]	; (8003454 <RobotTurn+0x13c>)
 8003376:	801a      	strh	r2, [r3, #0]
		  angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8003378:	4b35      	ldr	r3, [pc, #212]	; (8003450 <RobotTurn+0x138>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd f8db 	bl	8000538 <__aeabi_f2d>
 8003382:	4604      	mov	r4, r0
 8003384:	460d      	mov	r5, r1
 8003386:	4b33      	ldr	r3, [pc, #204]	; (8003454 <RobotTurn+0x13c>)
 8003388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd f8c1 	bl	8000514 <__aeabi_i2d>
 8003392:	a32b      	add	r3, pc, #172	; (adr r3, 8003440 <RobotTurn+0x128>)
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	f7fd fa50 	bl	800083c <__aeabi_ddiv>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	a328      	add	r3, pc, #160	; (adr r3, 8003448 <RobotTurn+0x130>)
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f7fd f91d 	bl	80005e8 <__aeabi_dmul>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4620      	mov	r0, r4
 80033b4:	4629      	mov	r1, r5
 80033b6:	f7fc ff61 	bl	800027c <__adddf3>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	f7fd fbcb 	bl	8000b5c <__aeabi_d2f>
 80033c6:	4603      	mov	r3, r0
 80033c8:	4a21      	ldr	r2, [pc, #132]	; (8003450 <RobotTurn+0x138>)
 80033ca:	6013      	str	r3, [r2, #0]
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 80033cc:	4b20      	ldr	r3, [pc, #128]	; (8003450 <RobotTurn+0x138>)
 80033ce:	ed93 7a00 	vldr	s14, [r3]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	edd3 7a00 	vldr	s15, [r3]
 80033d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033e0:	ee17 3a90 	vmov	r3, s15
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	db0d      	blt.n	8003404 <RobotTurn+0xec>
 80033e8:	4b19      	ldr	r3, [pc, #100]	; (8003450 <RobotTurn+0x138>)
 80033ea:	ed93 7a00 	vldr	s14, [r3]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	edd3 7a00 	vldr	s15, [r3]
 80033f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033fc:	ee17 3a90 	vmov	r3, s15
 8003400:	2b00      	cmp	r3, #0
 8003402:	dd05      	ble.n	8003410 <RobotTurn+0xf8>
		  last_curTask_tick = HAL_GetTick();
 8003404:	f003 f96e 	bl	80066e4 <HAL_GetTick>
 8003408:	4603      	mov	r3, r0
 800340a:	4a13      	ldr	r2, [pc, #76]	; (8003458 <RobotTurn+0x140>)
 800340c:	6013      	str	r3, [r2, #0]
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 800340e:	e793      	b.n	8003338 <RobotTurn+0x20>
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 8003410:	bf00      	nop
	  }
	} while(1);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 8003412:	4b14      	ldr	r3, [pc, #80]	; (8003464 <RobotTurn+0x14c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2200      	movs	r2, #0
 8003418:	635a      	str	r2, [r3, #52]	; 0x34
 800341a:	4b12      	ldr	r3, [pc, #72]	; (8003464 <RobotTurn+0x14c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2200      	movs	r2, #0
 8003420:	639a      	str	r2, [r3, #56]	; 0x38
	__RESET_SERVO_TURN(&htim1);
 8003422:	4b11      	ldr	r3, [pc, #68]	; (8003468 <RobotTurn+0x150>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2247      	movs	r2, #71	; 0x47
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
 800342a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800342e:	f003 f965 	bl	80066fc <HAL_Delay>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bdb0      	pop	{r4, r5, r7, pc}
 800343a:	bf00      	nop
 800343c:	f3af 8000 	nop.w
 8003440:	66666666 	.word	0x66666666
 8003444:	40306666 	.word	0x40306666
 8003448:	47ae147b 	.word	0x47ae147b
 800344c:	3f847ae1 	.word	0x3f847ae1
 8003450:	200004ec 	.word	0x200004ec
 8003454:	200004f2 	.word	0x200004f2
 8003458:	200004f8 	.word	0x200004f8
 800345c:	200004f0 	.word	0x200004f0
 8003460:	2000024c 	.word	0x2000024c
 8003464:	200003c0 	.word	0x200003c0
 8003468:	200002a0 	.word	0x200002a0
 800346c:	00000000 	.word	0x00000000

08003470 <RobotTurnFastest>:

void RobotTurnFastest(float * targetAngle) {
 8003470:	b5b0      	push	{r4, r5, r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af04      	add	r7, sp, #16
 8003476:	6078      	str	r0, [r7, #4]
	angleNow = 0; gyroZ = 0;
 8003478:	4b49      	ldr	r3, [pc, #292]	; (80035a0 <RobotTurnFastest+0x130>)
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	4b48      	ldr	r3, [pc, #288]	; (80035a4 <RobotTurnFastest+0x134>)
 8003482:	2200      	movs	r2, #0
 8003484:	801a      	strh	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 8003486:	f003 f92d 	bl	80066e4 <HAL_GetTick>
 800348a:	4603      	mov	r3, r0
 800348c:	4a46      	ldr	r2, [pc, #280]	; (80035a8 <RobotTurnFastest+0x138>)
 800348e:	6013      	str	r3, [r2, #0]
	do {
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 8003490:	f003 f928 	bl	80066e4 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	4b44      	ldr	r3, [pc, #272]	; (80035a8 <RobotTurnFastest+0x138>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b09      	cmp	r3, #9
 800349e:	d9f7      	bls.n	8003490 <RobotTurnFastest+0x20>
		  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 80034a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034a4:	9302      	str	r3, [sp, #8]
 80034a6:	2302      	movs	r3, #2
 80034a8:	9301      	str	r3, [sp, #4]
 80034aa:	4b40      	ldr	r3, [pc, #256]	; (80035ac <RobotTurnFastest+0x13c>)
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	2301      	movs	r3, #1
 80034b0:	2237      	movs	r2, #55	; 0x37
 80034b2:	21d0      	movs	r1, #208	; 0xd0
 80034b4:	483e      	ldr	r0, [pc, #248]	; (80035b0 <RobotTurnFastest+0x140>)
 80034b6:	f004 faf5 	bl	8007aa4 <HAL_I2C_Mem_Read>
 80034ba:	4b3c      	ldr	r3, [pc, #240]	; (80035ac <RobotTurnFastest+0x13c>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	b21a      	sxth	r2, r3
 80034c2:	4b3a      	ldr	r3, [pc, #232]	; (80035ac <RobotTurnFastest+0x13c>)
 80034c4:	785b      	ldrb	r3, [r3, #1]
 80034c6:	b21b      	sxth	r3, r3
 80034c8:	4313      	orrs	r3, r2
 80034ca:	b21a      	sxth	r2, r3
 80034cc:	4b35      	ldr	r3, [pc, #212]	; (80035a4 <RobotTurnFastest+0x134>)
 80034ce:	801a      	strh	r2, [r3, #0]
		  angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 80034d0:	4b33      	ldr	r3, [pc, #204]	; (80035a0 <RobotTurnFastest+0x130>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd f82f 	bl	8000538 <__aeabi_f2d>
 80034da:	4604      	mov	r4, r0
 80034dc:	460d      	mov	r5, r1
 80034de:	4b31      	ldr	r3, [pc, #196]	; (80035a4 <RobotTurnFastest+0x134>)
 80034e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fd f815 	bl	8000514 <__aeabi_i2d>
 80034ea:	a329      	add	r3, pc, #164	; (adr r3, 8003590 <RobotTurnFastest+0x120>)
 80034ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f0:	f7fd f9a4 	bl	800083c <__aeabi_ddiv>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	a326      	add	r3, pc, #152	; (adr r3, 8003598 <RobotTurnFastest+0x128>)
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	f7fd f871 	bl	80005e8 <__aeabi_dmul>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4620      	mov	r0, r4
 800350c:	4629      	mov	r1, r5
 800350e:	f7fc feb5 	bl	800027c <__adddf3>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	f7fd fb1f 	bl	8000b5c <__aeabi_d2f>
 800351e:	4603      	mov	r3, r0
 8003520:	4a1f      	ldr	r2, [pc, #124]	; (80035a0 <RobotTurnFastest+0x130>)
 8003522:	6013      	str	r3, [r2, #0]
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 8003524:	4b1e      	ldr	r3, [pc, #120]	; (80035a0 <RobotTurnFastest+0x130>)
 8003526:	ed93 7a00 	vldr	s14, [r3]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	edd3 7a00 	vldr	s15, [r3]
 8003530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003538:	ee17 3a90 	vmov	r3, s15
 800353c:	2b00      	cmp	r3, #0
 800353e:	db0d      	blt.n	800355c <RobotTurnFastest+0xec>
 8003540:	4b17      	ldr	r3, [pc, #92]	; (80035a0 <RobotTurnFastest+0x130>)
 8003542:	ed93 7a00 	vldr	s14, [r3]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	edd3 7a00 	vldr	s15, [r3]
 800354c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003554:	ee17 3a90 	vmov	r3, s15
 8003558:	2b00      	cmp	r3, #0
 800355a:	dd05      	ble.n	8003568 <RobotTurnFastest+0xf8>
		  last_curTask_tick = HAL_GetTick();
 800355c:	f003 f8c2 	bl	80066e4 <HAL_GetTick>
 8003560:	4603      	mov	r3, r0
 8003562:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <RobotTurnFastest+0x138>)
 8003564:	6013      	str	r3, [r2, #0]
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 8003566:	e793      	b.n	8003490 <RobotTurnFastest+0x20>
		  if (abs(angleNow - *targetAngle) < 0.01) break;
 8003568:	bf00      	nop
	  }
	} while(1);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 800356a:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <RobotTurnFastest+0x144>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	635a      	str	r2, [r3, #52]	; 0x34
 8003572:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <RobotTurnFastest+0x144>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2200      	movs	r2, #0
 8003578:	639a      	str	r2, [r3, #56]	; 0x38
	__RESET_SERVO_TURN_FAST(&htim1);
 800357a:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <RobotTurnFastest+0x148>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2247      	movs	r2, #71	; 0x47
 8003580:	641a      	str	r2, [r3, #64]	; 0x40
 8003582:	20c8      	movs	r0, #200	; 0xc8
 8003584:	f003 f8ba 	bl	80066fc <HAL_Delay>
}
 8003588:	bf00      	nop
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bdb0      	pop	{r4, r5, r7, pc}
 8003590:	66666666 	.word	0x66666666
 8003594:	40306666 	.word	0x40306666
 8003598:	47ae147b 	.word	0x47ae147b
 800359c:	3f847ae1 	.word	0x3f847ae1
 80035a0:	200004ec 	.word	0x200004ec
 80035a4:	200004f2 	.word	0x200004f2
 80035a8:	200004f8 	.word	0x200004f8
 80035ac:	200004f0 	.word	0x200004f0
 80035b0:	2000024c 	.word	0x2000024c
 80035b4:	200003c0 	.word	0x200003c0
 80035b8:	200002a0 	.word	0x200002a0

080035bc <FASTESTPATH_TURN_RIGHT_90>:
	__SET_MOTOR_DIRECTION(1);
	__SET_MOTOR_DUTY(&htim8, 1000, 2000);
	RobotTurn(&targetAngle);
}

void FASTESTPATH_TURN_RIGHT_90() {
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
	targetAngle = -86;
 80035c0:	4b16      	ldr	r3, [pc, #88]	; (800361c <FASTESTPATH_TURN_RIGHT_90+0x60>)
 80035c2:	4a17      	ldr	r2, [pc, #92]	; (8003620 <FASTESTPATH_TURN_RIGHT_90+0x64>)
 80035c4:	601a      	str	r2, [r3, #0]
	__SET_SERVO_TURN(&htim1, 115);
 80035c6:	4b17      	ldr	r3, [pc, #92]	; (8003624 <FASTESTPATH_TURN_RIGHT_90+0x68>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2273      	movs	r2, #115	; 0x73
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
 80035ce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80035d2:	f003 f893 	bl	80066fc <HAL_Delay>
	__SET_MOTOR_DIRECTION(1);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2104      	movs	r1, #4
 80035da:	4813      	ldr	r0, [pc, #76]	; (8003628 <FASTESTPATH_TURN_RIGHT_90+0x6c>)
 80035dc:	f003 fff2 	bl	80075c4 <HAL_GPIO_WritePin>
 80035e0:	2201      	movs	r2, #1
 80035e2:	2108      	movs	r1, #8
 80035e4:	4810      	ldr	r0, [pc, #64]	; (8003628 <FASTESTPATH_TURN_RIGHT_90+0x6c>)
 80035e6:	f003 ffed 	bl	80075c4 <HAL_GPIO_WritePin>
 80035ea:	2200      	movs	r2, #0
 80035ec:	2120      	movs	r1, #32
 80035ee:	480e      	ldr	r0, [pc, #56]	; (8003628 <FASTESTPATH_TURN_RIGHT_90+0x6c>)
 80035f0:	f003 ffe8 	bl	80075c4 <HAL_GPIO_WritePin>
 80035f4:	2201      	movs	r2, #1
 80035f6:	2110      	movs	r1, #16
 80035f8:	480b      	ldr	r0, [pc, #44]	; (8003628 <FASTESTPATH_TURN_RIGHT_90+0x6c>)
 80035fa:	f003 ffe3 	bl	80075c4 <HAL_GPIO_WritePin>
	__SET_MOTOR_DUTY(&htim8, 3000, 800);
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <FASTESTPATH_TURN_RIGHT_90+0x70>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003606:	635a      	str	r2, [r3, #52]	; 0x34
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <FASTESTPATH_TURN_RIGHT_90+0x70>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003610:	639a      	str	r2, [r3, #56]	; 0x38

	RobotTurn(&targetAngle);
 8003612:	4802      	ldr	r0, [pc, #8]	; (800361c <FASTESTPATH_TURN_RIGHT_90+0x60>)
 8003614:	f7ff fe80 	bl	8003318 <RobotTurn>
}
 8003618:	bf00      	nop
 800361a:	bd80      	pop	{r7, pc}
 800361c:	200004e8 	.word	0x200004e8
 8003620:	c2ac0000 	.word	0xc2ac0000
 8003624:	200002a0 	.word	0x200002a0
 8003628:	40020000 	.word	0x40020000
 800362c:	200003c0 	.word	0x200003c0

08003630 <FASTESTPATH_TURN_RIGHT_180>:

void FASTESTPATH_TURN_RIGHT_180() {
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
	targetAngle = -176;
 8003634:	4b16      	ldr	r3, [pc, #88]	; (8003690 <FASTESTPATH_TURN_RIGHT_180+0x60>)
 8003636:	4a17      	ldr	r2, [pc, #92]	; (8003694 <FASTESTPATH_TURN_RIGHT_180+0x64>)
 8003638:	601a      	str	r2, [r3, #0]
	__SET_SERVO_TURN(&htim1, 115);
 800363a:	4b17      	ldr	r3, [pc, #92]	; (8003698 <FASTESTPATH_TURN_RIGHT_180+0x68>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2273      	movs	r2, #115	; 0x73
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
 8003642:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003646:	f003 f859 	bl	80066fc <HAL_Delay>
	__SET_MOTOR_DIRECTION(1);
 800364a:	2200      	movs	r2, #0
 800364c:	2104      	movs	r1, #4
 800364e:	4813      	ldr	r0, [pc, #76]	; (800369c <FASTESTPATH_TURN_RIGHT_180+0x6c>)
 8003650:	f003 ffb8 	bl	80075c4 <HAL_GPIO_WritePin>
 8003654:	2201      	movs	r2, #1
 8003656:	2108      	movs	r1, #8
 8003658:	4810      	ldr	r0, [pc, #64]	; (800369c <FASTESTPATH_TURN_RIGHT_180+0x6c>)
 800365a:	f003 ffb3 	bl	80075c4 <HAL_GPIO_WritePin>
 800365e:	2200      	movs	r2, #0
 8003660:	2120      	movs	r1, #32
 8003662:	480e      	ldr	r0, [pc, #56]	; (800369c <FASTESTPATH_TURN_RIGHT_180+0x6c>)
 8003664:	f003 ffae 	bl	80075c4 <HAL_GPIO_WritePin>
 8003668:	2201      	movs	r2, #1
 800366a:	2110      	movs	r1, #16
 800366c:	480b      	ldr	r0, [pc, #44]	; (800369c <FASTESTPATH_TURN_RIGHT_180+0x6c>)
 800366e:	f003 ffa9 	bl	80075c4 <HAL_GPIO_WritePin>
	__SET_MOTOR_DUTY(&htim8, 3000, 800);
 8003672:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <FASTESTPATH_TURN_RIGHT_180+0x70>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800367a:	635a      	str	r2, [r3, #52]	; 0x34
 800367c:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <FASTESTPATH_TURN_RIGHT_180+0x70>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003684:	639a      	str	r2, [r3, #56]	; 0x38
	RobotTurn(&targetAngle);
 8003686:	4802      	ldr	r0, [pc, #8]	; (8003690 <FASTESTPATH_TURN_RIGHT_180+0x60>)
 8003688:	f7ff fe46 	bl	8003318 <RobotTurn>
}
 800368c:	bf00      	nop
 800368e:	bd80      	pop	{r7, pc}
 8003690:	200004e8 	.word	0x200004e8
 8003694:	c3300000 	.word	0xc3300000
 8003698:	200002a0 	.word	0x200002a0
 800369c:	40020000 	.word	0x40020000
 80036a0:	200003c0 	.word	0x200003c0

080036a4 <FASTESTPATH_TURN_LEFT_90X>:

void FASTESTPATH_TURN_LEFT_90X(uint8_t * turnSize) { // x3
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	__SET_MOTOR_DIRECTION(1);
 80036ac:	2200      	movs	r2, #0
 80036ae:	2104      	movs	r1, #4
 80036b0:	4825      	ldr	r0, [pc, #148]	; (8003748 <FASTESTPATH_TURN_LEFT_90X+0xa4>)
 80036b2:	f003 ff87 	bl	80075c4 <HAL_GPIO_WritePin>
 80036b6:	2201      	movs	r2, #1
 80036b8:	2108      	movs	r1, #8
 80036ba:	4823      	ldr	r0, [pc, #140]	; (8003748 <FASTESTPATH_TURN_LEFT_90X+0xa4>)
 80036bc:	f003 ff82 	bl	80075c4 <HAL_GPIO_WritePin>
 80036c0:	2200      	movs	r2, #0
 80036c2:	2120      	movs	r1, #32
 80036c4:	4820      	ldr	r0, [pc, #128]	; (8003748 <FASTESTPATH_TURN_LEFT_90X+0xa4>)
 80036c6:	f003 ff7d 	bl	80075c4 <HAL_GPIO_WritePin>
 80036ca:	2201      	movs	r2, #1
 80036cc:	2110      	movs	r1, #16
 80036ce:	481e      	ldr	r0, [pc, #120]	; (8003748 <FASTESTPATH_TURN_LEFT_90X+0xa4>)
 80036d0:	f003 ff78 	bl	80075c4 <HAL_GPIO_WritePin>
	switch (*turnSize) {
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d001      	beq.n	80036e0 <FASTESTPATH_TURN_LEFT_90X+0x3c>
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d115      	bne.n	800370c <FASTESTPATH_TURN_LEFT_90X+0x68>
	case 1:
	case 3:
		targetAngle = 83;
 80036e0:	4b1a      	ldr	r3, [pc, #104]	; (800374c <FASTESTPATH_TURN_LEFT_90X+0xa8>)
 80036e2:	4a1b      	ldr	r2, [pc, #108]	; (8003750 <FASTESTPATH_TURN_LEFT_90X+0xac>)
 80036e4:	601a      	str	r2, [r3, #0]
		__SET_SERVO_TURN(&htim1, 50);
 80036e6:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <FASTESTPATH_TURN_LEFT_90X+0xb0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2232      	movs	r2, #50	; 0x32
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40
 80036ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80036f2:	f003 f803 	bl	80066fc <HAL_Delay>
		__SET_MOTOR_DUTY(&htim8, 2000, 3500);
 80036f6:	4b18      	ldr	r3, [pc, #96]	; (8003758 <FASTESTPATH_TURN_LEFT_90X+0xb4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80036fe:	635a      	str	r2, [r3, #52]	; 0x34
 8003700:	4b15      	ldr	r3, [pc, #84]	; (8003758 <FASTESTPATH_TURN_LEFT_90X+0xb4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003708:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800370a:	e015      	b.n	8003738 <FASTESTPATH_TURN_LEFT_90X+0x94>
	case 2:
	case 4:
	default:
//		targetAngle = 85;
		targetAngle = 83;
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <FASTESTPATH_TURN_LEFT_90X+0xa8>)
 800370e:	4a10      	ldr	r2, [pc, #64]	; (8003750 <FASTESTPATH_TURN_LEFT_90X+0xac>)
 8003710:	601a      	str	r2, [r3, #0]
		__SET_SERVO_TURN(&htim1, 52);
 8003712:	4b10      	ldr	r3, [pc, #64]	; (8003754 <FASTESTPATH_TURN_LEFT_90X+0xb0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2234      	movs	r2, #52	; 0x34
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
 800371a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800371e:	f002 ffed 	bl	80066fc <HAL_Delay>
//		__SET_MOTOR_DUTY(&htim8, 2500, 2916);
		__SET_MOTOR_DUTY(&htim8, 3000, 3500);
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <FASTESTPATH_TURN_LEFT_90X+0xb4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800372a:	635a      	str	r2, [r3, #52]	; 0x34
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <FASTESTPATH_TURN_LEFT_90X+0xb4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003734:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003736:	bf00      	nop
	}
	RobotTurnFastest(&targetAngle);
 8003738:	4804      	ldr	r0, [pc, #16]	; (800374c <FASTESTPATH_TURN_LEFT_90X+0xa8>)
 800373a:	f7ff fe99 	bl	8003470 <RobotTurnFastest>

}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40020000 	.word	0x40020000
 800374c:	200004e8 	.word	0x200004e8
 8003750:	42a60000 	.word	0x42a60000
 8003754:	200002a0 	.word	0x200002a0
 8003758:	200003c0 	.word	0x200003c0

0800375c <FASTESTPATH_TURN_LEFT_90X_RETURN>:

void FASTESTPATH_TURN_LEFT_90X_RETURN(uint8_t * turnSize) {
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
	__SET_MOTOR_DIRECTION(1);
 8003764:	2200      	movs	r2, #0
 8003766:	2104      	movs	r1, #4
 8003768:	4830      	ldr	r0, [pc, #192]	; (800382c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd0>)
 800376a:	f003 ff2b 	bl	80075c4 <HAL_GPIO_WritePin>
 800376e:	2201      	movs	r2, #1
 8003770:	2108      	movs	r1, #8
 8003772:	482e      	ldr	r0, [pc, #184]	; (800382c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd0>)
 8003774:	f003 ff26 	bl	80075c4 <HAL_GPIO_WritePin>
 8003778:	2200      	movs	r2, #0
 800377a:	2120      	movs	r1, #32
 800377c:	482b      	ldr	r0, [pc, #172]	; (800382c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd0>)
 800377e:	f003 ff21 	bl	80075c4 <HAL_GPIO_WritePin>
 8003782:	2201      	movs	r2, #1
 8003784:	2110      	movs	r1, #16
 8003786:	4829      	ldr	r0, [pc, #164]	; (800382c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd0>)
 8003788:	f003 ff1c 	bl	80075c4 <HAL_GPIO_WritePin>
		switch (*turnSize) {
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d002      	beq.n	800379a <FASTESTPATH_TURN_LEFT_90X_RETURN+0x3e>
 8003794:	2b03      	cmp	r3, #3
 8003796:	d016      	beq.n	80037c6 <FASTESTPATH_TURN_LEFT_90X_RETURN+0x6a>
 8003798:	e02b      	b.n	80037f2 <FASTESTPATH_TURN_LEFT_90X_RETURN+0x96>
		case 1:
			targetAngle = 83;
 800379a:	4b25      	ldr	r3, [pc, #148]	; (8003830 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd4>)
 800379c:	4a25      	ldr	r2, [pc, #148]	; (8003834 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd8>)
 800379e:	601a      	str	r2, [r3, #0]
			__SET_SERVO_TURN(&htim1, 50);
 80037a0:	4b25      	ldr	r3, [pc, #148]	; (8003838 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xdc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2232      	movs	r2, #50	; 0x32
 80037a6:	641a      	str	r2, [r3, #64]	; 0x40
 80037a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80037ac:	f002 ffa6 	bl	80066fc <HAL_Delay>
			__SET_MOTOR_DUTY(&htim8, 2000, 3500);
 80037b0:	4b22      	ldr	r3, [pc, #136]	; (800383c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f640 52ac 	movw	r2, #3500	; 0xdac
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80037c4:	e02b      	b.n	800381e <FASTESTPATH_TURN_LEFT_90X_RETURN+0xc2>
		case 3:
			targetAngle = 85;
 80037c6:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd4>)
 80037c8:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe4>)
 80037ca:	601a      	str	r2, [r3, #0]
			__SET_SERVO_TURN(&htim1, 50);
 80037cc:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xdc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2232      	movs	r2, #50	; 0x32
 80037d2:	641a      	str	r2, [r3, #64]	; 0x40
 80037d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80037d8:	f002 ff90 	bl	80066fc <HAL_Delay>
			__SET_MOTOR_DUTY(&htim8, 2000, 3500);
 80037dc:	4b17      	ldr	r3, [pc, #92]	; (800383c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80037e4:	635a      	str	r2, [r3, #52]	; 0x34
 80037e6:	4b15      	ldr	r3, [pc, #84]	; (800383c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f640 52ac 	movw	r2, #3500	; 0xdac
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80037f0:	e015      	b.n	800381e <FASTESTPATH_TURN_LEFT_90X_RETURN+0xc2>
		case 2:
		case 4:
		default:
	//		targetAngle = 85;
			targetAngle = 79;
 80037f2:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd4>)
 80037f4:	4a13      	ldr	r2, [pc, #76]	; (8003844 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe8>)
 80037f6:	601a      	str	r2, [r3, #0]
			__SET_SERVO_TURN(&htim1, 52);
 80037f8:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xdc>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2234      	movs	r2, #52	; 0x34
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40
 8003800:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003804:	f002 ff7a 	bl	80066fc <HAL_Delay>
	//		__SET_MOTOR_DUTY(&htim8, 2500, 2916);
			__SET_MOTOR_DUTY(&htim8, 3000, 3500);
 8003808:	4b0c      	ldr	r3, [pc, #48]	; (800383c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003810:	635a      	str	r2, [r3, #52]	; 0x34
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <FASTESTPATH_TURN_LEFT_90X_RETURN+0xe0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f640 52ac 	movw	r2, #3500	; 0xdac
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800381c:	bf00      	nop
		}
		RobotTurnFastest(&targetAngle);
 800381e:	4804      	ldr	r0, [pc, #16]	; (8003830 <FASTESTPATH_TURN_LEFT_90X_RETURN+0xd4>)
 8003820:	f7ff fe26 	bl	8003470 <RobotTurnFastest>
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40020000 	.word	0x40020000
 8003830:	200004e8 	.word	0x200004e8
 8003834:	42a60000 	.word	0x42a60000
 8003838:	200002a0 	.word	0x200002a0
 800383c:	200003c0 	.word	0x200003c0
 8003840:	42aa0000 	.word	0x42aa0000
 8003844:	429e0000 	.word	0x429e0000

08003848 <FASTESTPATH_TURN_RIGHT_180X>:
//		break;
//	}
//	RobotTurnFastest(&targetAngle);
//}

void FASTESTPATH_TURN_RIGHT_180X(uint8_t * turnSize) {
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	__SET_MOTOR_DIRECTION(1);
 8003850:	2200      	movs	r2, #0
 8003852:	2104      	movs	r1, #4
 8003854:	4825      	ldr	r0, [pc, #148]	; (80038ec <FASTESTPATH_TURN_RIGHT_180X+0xa4>)
 8003856:	f003 feb5 	bl	80075c4 <HAL_GPIO_WritePin>
 800385a:	2201      	movs	r2, #1
 800385c:	2108      	movs	r1, #8
 800385e:	4823      	ldr	r0, [pc, #140]	; (80038ec <FASTESTPATH_TURN_RIGHT_180X+0xa4>)
 8003860:	f003 feb0 	bl	80075c4 <HAL_GPIO_WritePin>
 8003864:	2200      	movs	r2, #0
 8003866:	2120      	movs	r1, #32
 8003868:	4820      	ldr	r0, [pc, #128]	; (80038ec <FASTESTPATH_TURN_RIGHT_180X+0xa4>)
 800386a:	f003 feab 	bl	80075c4 <HAL_GPIO_WritePin>
 800386e:	2201      	movs	r2, #1
 8003870:	2110      	movs	r1, #16
 8003872:	481e      	ldr	r0, [pc, #120]	; (80038ec <FASTESTPATH_TURN_RIGHT_180X+0xa4>)
 8003874:	f003 fea6 	bl	80075c4 <HAL_GPIO_WritePin>
	switch (*turnSize) {
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d001      	beq.n	8003884 <FASTESTPATH_TURN_RIGHT_180X+0x3c>
 8003880:	2b03      	cmp	r3, #3
 8003882:	d115      	bne.n	80038b0 <FASTESTPATH_TURN_RIGHT_180X+0x68>
	case 1:
	case 3:
		targetAngle = -172;
 8003884:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <FASTESTPATH_TURN_RIGHT_180X+0xa8>)
 8003886:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <FASTESTPATH_TURN_RIGHT_180X+0xac>)
 8003888:	601a      	str	r2, [r3, #0]
		__SET_SERVO_TURN(&htim1, 115);
 800388a:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <FASTESTPATH_TURN_RIGHT_180X+0xb0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2273      	movs	r2, #115	; 0x73
 8003890:	641a      	str	r2, [r3, #64]	; 0x40
 8003892:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003896:	f002 ff31 	bl	80066fc <HAL_Delay>
		__SET_MOTOR_DUTY(&htim8, 3500, 2000);
 800389a:	4b18      	ldr	r3, [pc, #96]	; (80038fc <FASTESTPATH_TURN_RIGHT_180X+0xb4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f640 52ac 	movw	r2, #3500	; 0xdac
 80038a2:	635a      	str	r2, [r3, #52]	; 0x34
 80038a4:	4b15      	ldr	r3, [pc, #84]	; (80038fc <FASTESTPATH_TURN_RIGHT_180X+0xb4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80038ac:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80038ae:	e015      	b.n	80038dc <FASTESTPATH_TURN_RIGHT_180X+0x94>
	case 2:
	case 4:
	default:
//		targetAngle = -176;
		targetAngle = -170;
 80038b0:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <FASTESTPATH_TURN_RIGHT_180X+0xa8>)
 80038b2:	4a13      	ldr	r2, [pc, #76]	; (8003900 <FASTESTPATH_TURN_RIGHT_180X+0xb8>)
 80038b4:	601a      	str	r2, [r3, #0]
		__SET_SERVO_TURN(&htim1, 98);
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <FASTESTPATH_TURN_RIGHT_180X+0xb0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2262      	movs	r2, #98	; 0x62
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40
 80038be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80038c2:	f002 ff1b 	bl	80066fc <HAL_Delay>
//		__SET_MOTOR_DUTY(&htim8, 2700, 2500);
		__SET_MOTOR_DUTY(&htim8, 3500, 3240);
 80038c6:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <FASTESTPATH_TURN_RIGHT_180X+0xb4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f640 52ac 	movw	r2, #3500	; 0xdac
 80038ce:	635a      	str	r2, [r3, #52]	; 0x34
 80038d0:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <FASTESTPATH_TURN_RIGHT_180X+0xb4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f640 42a8 	movw	r2, #3240	; 0xca8
 80038d8:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80038da:	bf00      	nop
	}
	RobotTurnFastest(&targetAngle);
 80038dc:	4804      	ldr	r0, [pc, #16]	; (80038f0 <FASTESTPATH_TURN_RIGHT_180X+0xa8>)
 80038de:	f7ff fdc7 	bl	8003470 <RobotTurnFastest>
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40020000 	.word	0x40020000
 80038f0:	200004e8 	.word	0x200004e8
 80038f4:	c32c0000 	.word	0xc32c0000
 80038f8:	200002a0 	.word	0x200002a0
 80038fc:	200003c0 	.word	0x200003c0
 8003900:	c32a0000 	.word	0xc32a0000
 8003904:	00000000 	.word	0x00000000

08003908 <RobotMoveUntilIROvershoot>:

void RobotMoveUntilIROvershoot() {
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
	obsDist_IR = 0;
 800390c:	4b46      	ldr	r3, [pc, #280]	; (8003a28 <RobotMoveUntilIROvershoot+0x120>)
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
	angleNow = 0; gyroZ = 0;
 8003914:	4b45      	ldr	r3, [pc, #276]	; (8003a2c <RobotMoveUntilIROvershoot+0x124>)
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	4b44      	ldr	r3, [pc, #272]	; (8003a30 <RobotMoveUntilIROvershoot+0x128>)
 800391e:	2200      	movs	r2, #0
 8003920:	801a      	strh	r2, [r3, #0]
	  last_curTask_tick = HAL_GetTick();
 8003922:	f002 fedf 	bl	80066e4 <HAL_GetTick>
 8003926:	4603      	mov	r3, r0
 8003928:	4a42      	ldr	r2, [pc, #264]	; (8003a34 <RobotMoveUntilIROvershoot+0x12c>)
 800392a:	6013      	str	r3, [r2, #0]
	  do {
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 800392c:	4842      	ldr	r0, [pc, #264]	; (8003a38 <RobotMoveUntilIROvershoot+0x130>)
 800392e:	f002 ff4d 	bl	80067cc <HAL_ADC_Start>
 8003932:	2114      	movs	r1, #20
 8003934:	4840      	ldr	r0, [pc, #256]	; (8003a38 <RobotMoveUntilIROvershoot+0x130>)
 8003936:	f003 f84e 	bl	80069d6 <HAL_ADC_PollForConversion>
 800393a:	483f      	ldr	r0, [pc, #252]	; (8003a38 <RobotMoveUntilIROvershoot+0x130>)
 800393c:	f003 f8d6 	bl	8006aec <HAL_ADC_GetValue>
 8003940:	4602      	mov	r2, r0
 8003942:	4b3e      	ldr	r3, [pc, #248]	; (8003a3c <RobotMoveUntilIROvershoot+0x134>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4413      	add	r3, r2
 8003948:	4a3c      	ldr	r2, [pc, #240]	; (8003a3c <RobotMoveUntilIROvershoot+0x134>)
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	4b3c      	ldr	r3, [pc, #240]	; (8003a40 <RobotMoveUntilIROvershoot+0x138>)
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	3301      	adds	r3, #1
 8003952:	4a3c      	ldr	r2, [pc, #240]	; (8003a44 <RobotMoveUntilIROvershoot+0x13c>)
 8003954:	fb82 1203 	smull	r1, r2, r2, r3
 8003958:	1151      	asrs	r1, r2, #5
 800395a:	17da      	asrs	r2, r3, #31
 800395c:	1a8a      	subs	r2, r1, r2
 800395e:	2164      	movs	r1, #100	; 0x64
 8003960:	fb01 f202 	mul.w	r2, r1, r2
 8003964:	1a9a      	subs	r2, r3, r2
 8003966:	b292      	uxth	r2, r2
 8003968:	4b35      	ldr	r3, [pc, #212]	; (8003a40 <RobotMoveUntilIROvershoot+0x138>)
 800396a:	801a      	strh	r2, [r3, #0]
 800396c:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <RobotMoveUntilIROvershoot+0x138>)
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	2b63      	cmp	r3, #99	; 0x63
 8003972:	d129      	bne.n	80039c8 <RobotMoveUntilIROvershoot+0xc0>
 8003974:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <RobotMoveUntilIROvershoot+0x134>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a31      	ldr	r2, [pc, #196]	; (8003a40 <RobotMoveUntilIROvershoot+0x138>)
 800397a:	8812      	ldrh	r2, [r2, #0]
 800397c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f7fc fdb7 	bl	80004f4 <__aeabi_ui2d>
 8003986:	a324      	add	r3, pc, #144	; (adr r3, 8003a18 <RobotMoveUntilIROvershoot+0x110>)
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	f7fc fc74 	bl	8000278 <__aeabi_dsub>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	a122      	add	r1, pc, #136	; (adr r1, 8003a20 <RobotMoveUntilIROvershoot+0x118>)
 8003996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800399a:	f7fc ff4f 	bl	800083c <__aeabi_ddiv>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4610      	mov	r0, r2
 80039a4:	4619      	mov	r1, r3
 80039a6:	f7fd f8d9 	bl	8000b5c <__aeabi_d2f>
 80039aa:	4603      	mov	r3, r0
 80039ac:	4a1e      	ldr	r2, [pc, #120]	; (8003a28 <RobotMoveUntilIROvershoot+0x120>)
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	4b22      	ldr	r3, [pc, #136]	; (8003a3c <RobotMoveUntilIROvershoot+0x134>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a22      	ldr	r2, [pc, #136]	; (8003a40 <RobotMoveUntilIROvershoot+0x138>)
 80039b6:	8812      	ldrh	r2, [r2, #0]
 80039b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80039bc:	b29a      	uxth	r2, r3
 80039be:	4b22      	ldr	r3, [pc, #136]	; (8003a48 <RobotMoveUntilIROvershoot+0x140>)
 80039c0:	801a      	strh	r2, [r3, #0]
 80039c2:	4b1e      	ldr	r3, [pc, #120]	; (8003a3c <RobotMoveUntilIROvershoot+0x134>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
		  if (obsDist_IR > 40) break;
 80039c8:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <RobotMoveUntilIROvershoot+0x120>)
 80039ca:	edd3 7a00 	vldr	s15, [r3]
 80039ce:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003a4c <RobotMoveUntilIROvershoot+0x144>
 80039d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039da:	dc10      	bgt.n	80039fe <RobotMoveUntilIROvershoot+0xf6>
		  if (HAL_GetTick() - last_curTask_tick >= 10) {
 80039dc:	f002 fe82 	bl	80066e4 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <RobotMoveUntilIROvershoot+0x12c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b09      	cmp	r3, #9
 80039ea:	d99f      	bls.n	800392c <RobotMoveUntilIROvershoot+0x24>
			  StraightLineMove(SPEED_MODE_2);
 80039ec:	2002      	movs	r0, #2
 80039ee:	f7fe fd17 	bl	8002420 <StraightLineMove>
			  last_curTask_tick = HAL_GetTick();
 80039f2:	f002 fe77 	bl	80066e4 <HAL_GetTick>
 80039f6:	4603      	mov	r3, r0
 80039f8:	4a0e      	ldr	r2, [pc, #56]	; (8003a34 <RobotMoveUntilIROvershoot+0x12c>)
 80039fa:	6013      	str	r3, [r2, #0]
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 80039fc:	e796      	b.n	800392c <RobotMoveUntilIROvershoot+0x24>
		  if (obsDist_IR > 40) break;
 80039fe:	bf00      	nop
		  }
	  } while (1);
	  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003a00:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <RobotMoveUntilIROvershoot+0x148>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2200      	movs	r2, #0
 8003a06:	635a      	str	r2, [r3, #52]	; 0x34
 8003a08:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <RobotMoveUntilIROvershoot+0x148>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	f3af 8000 	nop.w
 8003a18:	fb5723d3 	.word	0xfb5723d3
 8003a1c:	407046c5 	.word	0x407046c5
 8003a20:	324c8366 	.word	0x324c8366
 8003a24:	40d90b34 	.word	0x40d90b34
 8003a28:	20000548 	.word	0x20000548
 8003a2c:	200004ec 	.word	0x200004ec
 8003a30:	200004f2 	.word	0x200004f2
 8003a34:	200004f8 	.word	0x200004f8
 8003a38:	200001bc 	.word	0x200001bc
 8003a3c:	20000554 	.word	0x20000554
 8003a40:	20000550 	.word	0x20000550
 8003a44:	51eb851f 	.word	0x51eb851f
 8003a48:	20000544 	.word	0x20000544
 8003a4c:	42200000 	.word	0x42200000
 8003a50:	200003c0 	.word	0x200003c0
 8003a54:	00000000 	.word	0x00000000

08003a58 <RobotMoveUntilIRHit>:

void RobotMoveUntilIRHit() {
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
	obsDist_IR = 1000;
 8003a5c:	4b46      	ldr	r3, [pc, #280]	; (8003b78 <RobotMoveUntilIRHit+0x120>)
 8003a5e:	4a47      	ldr	r2, [pc, #284]	; (8003b7c <RobotMoveUntilIRHit+0x124>)
 8003a60:	601a      	str	r2, [r3, #0]
	angleNow = 0; gyroZ = 0;
 8003a62:	4b47      	ldr	r3, [pc, #284]	; (8003b80 <RobotMoveUntilIRHit+0x128>)
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	4b46      	ldr	r3, [pc, #280]	; (8003b84 <RobotMoveUntilIRHit+0x12c>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	801a      	strh	r2, [r3, #0]
	  last_curTask_tick = HAL_GetTick();
 8003a70:	f002 fe38 	bl	80066e4 <HAL_GetTick>
 8003a74:	4603      	mov	r3, r0
 8003a76:	4a44      	ldr	r2, [pc, #272]	; (8003b88 <RobotMoveUntilIRHit+0x130>)
 8003a78:	6013      	str	r3, [r2, #0]
	  do {
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003a7a:	4844      	ldr	r0, [pc, #272]	; (8003b8c <RobotMoveUntilIRHit+0x134>)
 8003a7c:	f002 fea6 	bl	80067cc <HAL_ADC_Start>
 8003a80:	2114      	movs	r1, #20
 8003a82:	4842      	ldr	r0, [pc, #264]	; (8003b8c <RobotMoveUntilIRHit+0x134>)
 8003a84:	f002 ffa7 	bl	80069d6 <HAL_ADC_PollForConversion>
 8003a88:	4840      	ldr	r0, [pc, #256]	; (8003b8c <RobotMoveUntilIRHit+0x134>)
 8003a8a:	f003 f82f 	bl	8006aec <HAL_ADC_GetValue>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	4b3f      	ldr	r3, [pc, #252]	; (8003b90 <RobotMoveUntilIRHit+0x138>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4413      	add	r3, r2
 8003a96:	4a3e      	ldr	r2, [pc, #248]	; (8003b90 <RobotMoveUntilIRHit+0x138>)
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b3e      	ldr	r3, [pc, #248]	; (8003b94 <RobotMoveUntilIRHit+0x13c>)
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	4a3d      	ldr	r2, [pc, #244]	; (8003b98 <RobotMoveUntilIRHit+0x140>)
 8003aa2:	fb82 1203 	smull	r1, r2, r2, r3
 8003aa6:	1151      	asrs	r1, r2, #5
 8003aa8:	17da      	asrs	r2, r3, #31
 8003aaa:	1a8a      	subs	r2, r1, r2
 8003aac:	2164      	movs	r1, #100	; 0x64
 8003aae:	fb01 f202 	mul.w	r2, r1, r2
 8003ab2:	1a9a      	subs	r2, r3, r2
 8003ab4:	b292      	uxth	r2, r2
 8003ab6:	4b37      	ldr	r3, [pc, #220]	; (8003b94 <RobotMoveUntilIRHit+0x13c>)
 8003ab8:	801a      	strh	r2, [r3, #0]
 8003aba:	4b36      	ldr	r3, [pc, #216]	; (8003b94 <RobotMoveUntilIRHit+0x13c>)
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	2b63      	cmp	r3, #99	; 0x63
 8003ac0:	d129      	bne.n	8003b16 <RobotMoveUntilIRHit+0xbe>
 8003ac2:	4b33      	ldr	r3, [pc, #204]	; (8003b90 <RobotMoveUntilIRHit+0x138>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a33      	ldr	r2, [pc, #204]	; (8003b94 <RobotMoveUntilIRHit+0x13c>)
 8003ac8:	8812      	ldrh	r2, [r2, #0]
 8003aca:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fc fd10 	bl	80004f4 <__aeabi_ui2d>
 8003ad4:	a324      	add	r3, pc, #144	; (adr r3, 8003b68 <RobotMoveUntilIRHit+0x110>)
 8003ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ada:	f7fc fbcd 	bl	8000278 <__aeabi_dsub>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	a123      	add	r1, pc, #140	; (adr r1, 8003b70 <RobotMoveUntilIRHit+0x118>)
 8003ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ae8:	f7fc fea8 	bl	800083c <__aeabi_ddiv>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4610      	mov	r0, r2
 8003af2:	4619      	mov	r1, r3
 8003af4:	f7fd f832 	bl	8000b5c <__aeabi_d2f>
 8003af8:	4603      	mov	r3, r0
 8003afa:	4a1f      	ldr	r2, [pc, #124]	; (8003b78 <RobotMoveUntilIRHit+0x120>)
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <RobotMoveUntilIRHit+0x138>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a24      	ldr	r2, [pc, #144]	; (8003b94 <RobotMoveUntilIRHit+0x13c>)
 8003b04:	8812      	ldrh	r2, [r2, #0]
 8003b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <RobotMoveUntilIRHit+0x144>)
 8003b0e:	801a      	strh	r2, [r3, #0]
 8003b10:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <RobotMoveUntilIRHit+0x138>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
		  if (obsDist_IR < 40) break;
 8003b16:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <RobotMoveUntilIRHit+0x120>)
 8003b18:	edd3 7a00 	vldr	s15, [r3]
 8003b1c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003ba0 <RobotMoveUntilIRHit+0x148>
 8003b20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b28:	d410      	bmi.n	8003b4c <RobotMoveUntilIRHit+0xf4>
		  if (HAL_GetTick() - last_curTask_tick >= 10) {
 8003b2a:	f002 fddb 	bl	80066e4 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <RobotMoveUntilIRHit+0x130>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b09      	cmp	r3, #9
 8003b38:	d99f      	bls.n	8003a7a <RobotMoveUntilIRHit+0x22>
			  StraightLineMove(SPEED_MODE_2);
 8003b3a:	2002      	movs	r0, #2
 8003b3c:	f7fe fc70 	bl	8002420 <StraightLineMove>
			  last_curTask_tick = HAL_GetTick();
 8003b40:	f002 fdd0 	bl	80066e4 <HAL_GetTick>
 8003b44:	4603      	mov	r3, r0
 8003b46:	4a10      	ldr	r2, [pc, #64]	; (8003b88 <RobotMoveUntilIRHit+0x130>)
 8003b48:	6013      	str	r3, [r2, #0]
		  __ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003b4a:	e796      	b.n	8003a7a <RobotMoveUntilIRHit+0x22>
		  if (obsDist_IR < 40) break;
 8003b4c:	bf00      	nop
		  }
	  } while (1);
	  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003b4e:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <RobotMoveUntilIRHit+0x14c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2200      	movs	r2, #0
 8003b54:	635a      	str	r2, [r3, #52]	; 0x34
 8003b56:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <RobotMoveUntilIRHit+0x14c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	f3af 8000 	nop.w
 8003b68:	fb5723d3 	.word	0xfb5723d3
 8003b6c:	407046c5 	.word	0x407046c5
 8003b70:	324c8366 	.word	0x324c8366
 8003b74:	40d90b34 	.word	0x40d90b34
 8003b78:	20000548 	.word	0x20000548
 8003b7c:	447a0000 	.word	0x447a0000
 8003b80:	200004ec 	.word	0x200004ec
 8003b84:	200004f2 	.word	0x200004f2
 8003b88:	200004f8 	.word	0x200004f8
 8003b8c:	200001bc 	.word	0x200001bc
 8003b90:	20000554 	.word	0x20000554
 8003b94:	20000550 	.word	0x20000550
 8003b98:	51eb851f 	.word	0x51eb851f
 8003b9c:	20000544 	.word	0x20000544
 8003ba0:	42200000 	.word	0x42200000
 8003ba4:	200003c0 	.word	0x200003c0

08003ba8 <runOledTask>:
  * @retval None
  */
/* USER CODE END Header_runOledTask */
float angleTemp;
void runOledTask(void *argument)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	snprintf(ch, sizeof(ch), "%-3d%%", (int)batteryVal);
 8003bb0:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <runOledTask+0x4c>)
 8003bb2:	edd3 7a00 	vldr	s15, [r3]
 8003bb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bba:	ee17 3a90 	vmov	r3, s15
 8003bbe:	4a0e      	ldr	r2, [pc, #56]	; (8003bf8 <runOledTask+0x50>)
 8003bc0:	2110      	movs	r1, #16
 8003bc2:	480e      	ldr	r0, [pc, #56]	; (8003bfc <runOledTask+0x54>)
 8003bc4:	f00a ffc8 	bl	800eb58 <sniprintf>
	OLED_ShowString(0, 0, (char *) ch);
 8003bc8:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <runOledTask+0x54>)
 8003bca:	2100      	movs	r1, #0
 8003bcc:	2000      	movs	r0, #0
 8003bce:	f00a ff05 	bl	800e9dc <OLED_ShowString>
//	snprintf(ch, sizeof(ch), "IR:%-4d", (int) obsDist_IR);
//	OLED_ShowString(0, 20, (char *) ch);
//	obsDist_US = (IC_Val2 > IC_Val1 ? (IC_Val2 - IC_Val1) : (65535 - IC_Val1 + IC_Val2)) * 0.034 / 2;
//	snprintf(ch, sizeof(ch), "ultra:%-4d", (int) obsDist_US);
//	OLED_ShowString(0, 30, (char *) ch);
	OLED_ShowString(0, 20, (char *) rxMsg);
 8003bd2:	4a0b      	ldr	r2, [pc, #44]	; (8003c00 <runOledTask+0x58>)
 8003bd4:	2114      	movs	r1, #20
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	f00a ff00 	bl	800e9dc <OLED_ShowString>
	OLED_ShowString(0, 40, (char *) aRxBuffer);
 8003bdc:	4a09      	ldr	r2, [pc, #36]	; (8003c04 <runOledTask+0x5c>)
 8003bde:	2128      	movs	r1, #40	; 0x28
 8003be0:	2000      	movs	r0, #0
 8003be2:	f00a fefb 	bl	800e9dc <OLED_ShowString>
//	OLED_ShowString(0, 24, (char *) ch);
//	snprintf(ch, sizeof(ch), "obs_a:%-4d|x:%-4d", (int)obs_a, (int) x);
//	OLED_ShowString(0, 24, (char *) ch);
//	snprintf(ch, sizeof(ch), "US:%-4d|IR:%-4d", (int)obsDist_US, (int)obsDist_IR);
//	OLED_ShowString(0, 48, (char *) ch);
	OLED_Refresh_Gram();
 8003be6:	f00a fd91 	bl	800e70c <OLED_Refresh_Gram>

	osDelay(250);
 8003bea:	20fa      	movs	r0, #250	; 0xfa
 8003bec:	f008 f860 	bl	800bcb0 <osDelay>
	snprintf(ch, sizeof(ch), "%-3d%%", (int)batteryVal);
 8003bf0:	e7de      	b.n	8003bb0 <runOledTask+0x8>
 8003bf2:	bf00      	nop
 8003bf4:	20000558 	.word	0x20000558
 8003bf8:	08010230 	.word	0x08010230
 8003bfc:	200004d4 	.word	0x200004d4
 8003c00:	200004c4 	.word	0x200004c4
 8003c04:	20000480 	.word	0x20000480

08003c08 <runCmdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runCmdTask */
void runCmdTask(void *argument)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runCmdTask */
  /* Infinite loop */
  for(;;)
  {
	  switch(curCmd.index) {
 8003c10:	4bc6      	ldr	r3, [pc, #792]	; (8003f2c <runCmdTask+0x324>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	2b63      	cmp	r3, #99	; 0x63
 8003c18:	f200 827a 	bhi.w	8004110 <runCmdTask+0x508>
 8003c1c:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <runCmdTask+0x1c>)
 8003c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c22:	bf00      	nop
 8003c24:	08003db5 	.word	0x08003db5
 8003c28:	08003db5 	.word	0x08003db5
 8003c2c:	08003dd1 	.word	0x08003dd1
 8003c30:	08003dd1 	.word	0x08003dd1
 8003c34:	08003dd1 	.word	0x08003dd1
 8003c38:	08003dd1 	.word	0x08003dd1
 8003c3c:	08003fa1 	.word	0x08003fa1
 8003c40:	08003faf 	.word	0x08003faf
 8003c44:	08003fbd 	.word	0x08003fbd
 8003c48:	08003fcb 	.word	0x08003fcb
 8003c4c:	08003fd9 	.word	0x08003fd9
 8003c50:	08003fd9 	.word	0x08003fd9
 8003c54:	08004021 	.word	0x08004021
 8003c58:	08004029 	.word	0x08004029
 8003c5c:	08004037 	.word	0x08004037
 8003c60:	08004045 	.word	0x08004045
 8003c64:	08004053 	.word	0x08004053
 8003c68:	08004111 	.word	0x08004111
 8003c6c:	08004111 	.word	0x08004111
 8003c70:	08004111 	.word	0x08004111
 8003c74:	08004111 	.word	0x08004111
 8003c78:	08004111 	.word	0x08004111
 8003c7c:	08004111 	.word	0x08004111
 8003c80:	08004111 	.word	0x08004111
 8003c84:	08004111 	.word	0x08004111
 8003c88:	08004111 	.word	0x08004111
 8003c8c:	08004111 	.word	0x08004111
 8003c90:	08004111 	.word	0x08004111
 8003c94:	08004111 	.word	0x08004111
 8003c98:	08004111 	.word	0x08004111
 8003c9c:	08004111 	.word	0x08004111
 8003ca0:	08004111 	.word	0x08004111
 8003ca4:	08004111 	.word	0x08004111
 8003ca8:	08004111 	.word	0x08004111
 8003cac:	08004111 	.word	0x08004111
 8003cb0:	08004111 	.word	0x08004111
 8003cb4:	08004111 	.word	0x08004111
 8003cb8:	08004111 	.word	0x08004111
 8003cbc:	08004111 	.word	0x08004111
 8003cc0:	08004111 	.word	0x08004111
 8003cc4:	08004111 	.word	0x08004111
 8003cc8:	08004111 	.word	0x08004111
 8003ccc:	08004111 	.word	0x08004111
 8003cd0:	08004111 	.word	0x08004111
 8003cd4:	08004111 	.word	0x08004111
 8003cd8:	08004111 	.word	0x08004111
 8003cdc:	08004111 	.word	0x08004111
 8003ce0:	08004111 	.word	0x08004111
 8003ce4:	08004111 	.word	0x08004111
 8003ce8:	08004111 	.word	0x08004111
 8003cec:	08004111 	.word	0x08004111
 8003cf0:	08004111 	.word	0x08004111
 8003cf4:	08004111 	.word	0x08004111
 8003cf8:	08004111 	.word	0x08004111
 8003cfc:	08004111 	.word	0x08004111
 8003d00:	08004111 	.word	0x08004111
 8003d04:	08004111 	.word	0x08004111
 8003d08:	08004111 	.word	0x08004111
 8003d0c:	08004111 	.word	0x08004111
 8003d10:	08004111 	.word	0x08004111
 8003d14:	08004111 	.word	0x08004111
 8003d18:	08004111 	.word	0x08004111
 8003d1c:	08004111 	.word	0x08004111
 8003d20:	08004111 	.word	0x08004111
 8003d24:	08004111 	.word	0x08004111
 8003d28:	08004111 	.word	0x08004111
 8003d2c:	08004111 	.word	0x08004111
 8003d30:	08004111 	.word	0x08004111
 8003d34:	08004111 	.word	0x08004111
 8003d38:	08004111 	.word	0x08004111
 8003d3c:	08004111 	.word	0x08004111
 8003d40:	08004111 	.word	0x08004111
 8003d44:	08004111 	.word	0x08004111
 8003d48:	08004111 	.word	0x08004111
 8003d4c:	08004111 	.word	0x08004111
 8003d50:	08004111 	.word	0x08004111
 8003d54:	08004111 	.word	0x08004111
 8003d58:	08004111 	.word	0x08004111
 8003d5c:	08004111 	.word	0x08004111
 8003d60:	08004111 	.word	0x08004111
 8003d64:	08004111 	.word	0x08004111
 8003d68:	08004111 	.word	0x08004111
 8003d6c:	08004111 	.word	0x08004111
 8003d70:	08004111 	.word	0x08004111
 8003d74:	08004111 	.word	0x08004111
 8003d78:	08004111 	.word	0x08004111
 8003d7c:	08004111 	.word	0x08004111
 8003d80:	08004061 	.word	0x08004061
 8003d84:	08004061 	.word	0x08004061
 8003d88:	08004111 	.word	0x08004111
 8003d8c:	08004111 	.word	0x08004111
 8003d90:	08004111 	.word	0x08004111
 8003d94:	08004111 	.word	0x08004111
 8003d98:	08004111 	.word	0x08004111
 8003d9c:	08004111 	.word	0x08004111
 8003da0:	08004111 	.word	0x08004111
 8003da4:	08004111 	.word	0x08004111
 8003da8:	08004111 	.word	0x08004111
 8003dac:	08004111 	.word	0x08004111
 8003db0:	08004111 	.word	0x08004111
//	  	 case 0: // STOP handled in UART IRQ directly
//	  	  	  break;
	  	 case 1: //FW
	  	 case 2: //BW
	  		curTask = curCmd.index == 1 ? TASK_MOVE : TASK_MOVE_BACKWARD;
 8003db4:	4b5d      	ldr	r3, [pc, #372]	; (8003f2c <runCmdTask+0x324>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	bf14      	ite	ne
 8003dbc:	2301      	movne	r3, #1
 8003dbe:	2300      	moveq	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	4b5a      	ldr	r3, [pc, #360]	; (8003f30 <runCmdTask+0x328>)
 8003dc6:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8003dc8:	4b58      	ldr	r3, [pc, #352]	; (8003f2c <runCmdTask+0x324>)
 8003dca:	2263      	movs	r2, #99	; 0x63
 8003dcc:	701a      	strb	r2, [r3, #0]
	  		 break;
 8003dce:	e1a0      	b.n	8004112 <runCmdTask+0x50a>
	  	case 3: //FL manual
		case 4: //FR manual
		case 5: //BL manual
		case 6: //BR manual
			__SET_CMD_CONFIG(cfgs[curCmd.index], &htim8, &htim1, targetAngle);
 8003dd0:	4b56      	ldr	r3, [pc, #344]	; (8003f2c <runCmdTask+0x324>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	4a57      	ldr	r2, [pc, #348]	; (8003f34 <runCmdTask+0x32c>)
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	4413      	add	r3, r2
 8003dda:	3304      	adds	r3, #4
 8003ddc:	edd3 7a00 	vldr	s15, [r3]
 8003de0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003f38 <runCmdTask+0x330>
 8003de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dec:	dd01      	ble.n	8003df2 <runCmdTask+0x1ea>
 8003dee:	2373      	movs	r3, #115	; 0x73
 8003df0:	e01c      	b.n	8003e2c <runCmdTask+0x224>
 8003df2:	4b4e      	ldr	r3, [pc, #312]	; (8003f2c <runCmdTask+0x324>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	4a4f      	ldr	r2, [pc, #316]	; (8003f34 <runCmdTask+0x32c>)
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	edd3 7a00 	vldr	s15, [r3]
 8003e02:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8003f3c <runCmdTask+0x334>
 8003e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0e:	d501      	bpl.n	8003e14 <runCmdTask+0x20c>
 8003e10:	2332      	movs	r3, #50	; 0x32
 8003e12:	e00b      	b.n	8003e2c <runCmdTask+0x224>
 8003e14:	4b45      	ldr	r3, [pc, #276]	; (8003f2c <runCmdTask+0x324>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	4a46      	ldr	r2, [pc, #280]	; (8003f34 <runCmdTask+0x32c>)
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3304      	adds	r3, #4
 8003e20:	edd3 7a00 	vldr	s15, [r3]
 8003e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e28:	ee17 3a90 	vmov	r3, s15
 8003e2c:	4a44      	ldr	r2, [pc, #272]	; (8003f40 <runCmdTask+0x338>)
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	6413      	str	r3, [r2, #64]	; 0x40
 8003e32:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003e36:	f002 fc61 	bl	80066fc <HAL_Delay>
 8003e3a:	4b3c      	ldr	r3, [pc, #240]	; (8003f2c <runCmdTask+0x324>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	4a3d      	ldr	r2, [pc, #244]	; (8003f34 <runCmdTask+0x32c>)
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	4413      	add	r3, r2
 8003e44:	3308      	adds	r3, #8
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a3e      	ldr	r2, [pc, #248]	; (8003f44 <runCmdTask+0x33c>)
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	4b37      	ldr	r3, [pc, #220]	; (8003f2c <runCmdTask+0x324>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	4a38      	ldr	r2, [pc, #224]	; (8003f34 <runCmdTask+0x32c>)
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	4413      	add	r3, r2
 8003e56:	330c      	adds	r3, #12
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bf0c      	ite	eq
 8003e5e:	2301      	moveq	r3, #1
 8003e60:	2300      	movne	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	2104      	movs	r1, #4
 8003e68:	4837      	ldr	r0, [pc, #220]	; (8003f48 <runCmdTask+0x340>)
 8003e6a:	f003 fbab 	bl	80075c4 <HAL_GPIO_WritePin>
 8003e6e:	4b2f      	ldr	r3, [pc, #188]	; (8003f2c <runCmdTask+0x324>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	4a30      	ldr	r2, [pc, #192]	; (8003f34 <runCmdTask+0x32c>)
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	4413      	add	r3, r2
 8003e78:	330c      	adds	r3, #12
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	2108      	movs	r1, #8
 8003e8a:	482f      	ldr	r0, [pc, #188]	; (8003f48 <runCmdTask+0x340>)
 8003e8c:	f003 fb9a 	bl	80075c4 <HAL_GPIO_WritePin>
 8003e90:	4b26      	ldr	r3, [pc, #152]	; (8003f2c <runCmdTask+0x324>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	4a27      	ldr	r2, [pc, #156]	; (8003f34 <runCmdTask+0x32c>)
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	4413      	add	r3, r2
 8003e9a:	330c      	adds	r3, #12
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	bf0c      	ite	eq
 8003ea2:	2301      	moveq	r3, #1
 8003ea4:	2300      	movne	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	2120      	movs	r1, #32
 8003eac:	4826      	ldr	r0, [pc, #152]	; (8003f48 <runCmdTask+0x340>)
 8003eae:	f003 fb89 	bl	80075c4 <HAL_GPIO_WritePin>
 8003eb2:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <runCmdTask+0x324>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	4a1f      	ldr	r2, [pc, #124]	; (8003f34 <runCmdTask+0x32c>)
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	4413      	add	r3, r2
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bf14      	ite	ne
 8003ec4:	2301      	movne	r3, #1
 8003ec6:	2300      	moveq	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2110      	movs	r1, #16
 8003ece:	481e      	ldr	r0, [pc, #120]	; (8003f48 <runCmdTask+0x340>)
 8003ed0:	f003 fb78 	bl	80075c4 <HAL_GPIO_WritePin>
 8003ed4:	4b15      	ldr	r3, [pc, #84]	; (8003f2c <runCmdTask+0x324>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	4a16      	ldr	r2, [pc, #88]	; (8003f34 <runCmdTask+0x32c>)
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	4413      	add	r3, r2
 8003ede:	881a      	ldrh	r2, [r3, #0]
 8003ee0:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <runCmdTask+0x344>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ee6:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <runCmdTask+0x324>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <runCmdTask+0x32c>)
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	4413      	add	r3, r2
 8003ef0:	3302      	adds	r3, #2
 8003ef2:	881a      	ldrh	r2, [r3, #0]
 8003ef4:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <runCmdTask+0x344>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
			if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8003efa:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <runCmdTask+0x348>)
 8003efc:	781a      	ldrb	r2, [r3, #0]
 8003efe:	4b14      	ldr	r3, [pc, #80]	; (8003f50 <runCmdTask+0x348>)
 8003f00:	785b      	ldrb	r3, [r3, #1]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d12e      	bne.n	8003f64 <runCmdTask+0x35c>
				__CLEAR_CURCMD(curCmd);
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <runCmdTask+0x324>)
 8003f08:	2264      	movs	r2, #100	; 0x64
 8003f0a:	701a      	strb	r2, [r3, #0]
 8003f0c:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <runCmdTask+0x324>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8003f12:	4a10      	ldr	r2, [pc, #64]	; (8003f54 <runCmdTask+0x34c>)
 8003f14:	210f      	movs	r1, #15
 8003f16:	4810      	ldr	r0, [pc, #64]	; (8003f58 <runCmdTask+0x350>)
 8003f18:	f00a fe1e 	bl	800eb58 <sniprintf>
 8003f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f20:	2206      	movs	r2, #6
 8003f22:	490e      	ldr	r1, [pc, #56]	; (8003f5c <runCmdTask+0x354>)
 8003f24:	480e      	ldr	r0, [pc, #56]	; (8003f60 <runCmdTask+0x358>)
 8003f26:	f006 fd8c 	bl	800aa42 <HAL_UART_Transmit>
 8003f2a:	e035      	b.n	8003f98 <runCmdTask+0x390>
 8003f2c:	200004c0 	.word	0x200004c0
 8003f30:	20000134 	.word	0x20000134
 8003f34:	20000004 	.word	0x20000004
 8003f38:	42e60000 	.word	0x42e60000
 8003f3c:	42480000 	.word	0x42480000
 8003f40:	200002a0 	.word	0x200002a0
 8003f44:	200004e8 	.word	0x200004e8
 8003f48:	40020000 	.word	0x40020000
 8003f4c:	200003c0 	.word	0x200003c0
 8003f50:	2000048c 	.word	0x2000048c
 8003f54:	08010218 	.word	0x08010218
 8003f58:	200004c4 	.word	0x200004c4
 8003f5c:	08010220 	.word	0x08010220
 8003f60:	20000408 	.word	0x20000408
			} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8003f64:	4b6d      	ldr	r3, [pc, #436]	; (800411c <runCmdTask+0x514>)
 8003f66:	785b      	ldrb	r3, [r3, #1]
 8003f68:	4a6d      	ldr	r2, [pc, #436]	; (8004120 <runCmdTask+0x518>)
 8003f6a:	496c      	ldr	r1, [pc, #432]	; (800411c <runCmdTask+0x514>)
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	4b69      	ldr	r3, [pc, #420]	; (800411c <runCmdTask+0x514>)
 8003f76:	785b      	ldrb	r3, [r3, #1]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	4a68      	ldr	r2, [pc, #416]	; (800411c <runCmdTask+0x514>)
 8003f7c:	7892      	ldrb	r2, [r2, #2]
 8003f7e:	fb93 f1f2 	sdiv	r1, r3, r2
 8003f82:	fb01 f202 	mul.w	r2, r1, r2
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	4b64      	ldr	r3, [pc, #400]	; (800411c <runCmdTask+0x514>)
 8003f8c:	705a      	strb	r2, [r3, #1]
 8003f8e:	4a65      	ldr	r2, [pc, #404]	; (8004124 <runCmdTask+0x51c>)
 8003f90:	210f      	movs	r1, #15
 8003f92:	4865      	ldr	r0, [pc, #404]	; (8004128 <runCmdTask+0x520>)
 8003f94:	f00a fde0 	bl	800eb58 <sniprintf>
			__PEND_CURCMD(curCmd);
 8003f98:	4b61      	ldr	r3, [pc, #388]	; (8004120 <runCmdTask+0x518>)
 8003f9a:	2263      	movs	r2, #99	; 0x63
 8003f9c:	701a      	strb	r2, [r3, #0]
			 break;
 8003f9e:	e0b8      	b.n	8004112 <runCmdTask+0x50a>
	  	 case 7: // FL
	  		 curTask = TASK_FL;
 8003fa0:	4b62      	ldr	r3, [pc, #392]	; (800412c <runCmdTask+0x524>)
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8003fa6:	4b5e      	ldr	r3, [pc, #376]	; (8004120 <runCmdTask+0x518>)
 8003fa8:	2263      	movs	r2, #99	; 0x63
 8003faa:	701a      	strb	r2, [r3, #0]
	  		 break;
 8003fac:	e0b1      	b.n	8004112 <runCmdTask+0x50a>
	  	 case 8: // FR
	  		curTask = TASK_FR;
 8003fae:	4b5f      	ldr	r3, [pc, #380]	; (800412c <runCmdTask+0x524>)
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8003fb4:	4b5a      	ldr	r3, [pc, #360]	; (8004120 <runCmdTask+0x518>)
 8003fb6:	2263      	movs	r2, #99	; 0x63
 8003fb8:	701a      	strb	r2, [r3, #0]
	  		break;
 8003fba:	e0aa      	b.n	8004112 <runCmdTask+0x50a>
	  	 case 9: // BL
	  		curTask = TASK_BL;
 8003fbc:	4b5b      	ldr	r3, [pc, #364]	; (800412c <runCmdTask+0x524>)
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8003fc2:	4b57      	ldr	r3, [pc, #348]	; (8004120 <runCmdTask+0x518>)
 8003fc4:	2263      	movs	r2, #99	; 0x63
 8003fc6:	701a      	strb	r2, [r3, #0]
	  		break;
 8003fc8:	e0a3      	b.n	8004112 <runCmdTask+0x50a>
	  	 case 10: //BR
	  		curTask = TASK_BR;
 8003fca:	4b58      	ldr	r3, [pc, #352]	; (800412c <runCmdTask+0x524>)
 8003fcc:	2205      	movs	r2, #5
 8003fce:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8003fd0:	4b53      	ldr	r3, [pc, #332]	; (8004120 <runCmdTask+0x518>)
 8003fd2:	2263      	movs	r2, #99	; 0x63
 8003fd4:	701a      	strb	r2, [r3, #0]
	  		break;
 8003fd6:	e09c      	b.n	8004112 <runCmdTask+0x50a>
	  	 case 11: // TL
	  	 case 12: // TR
	  		 __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 11 ? 1 : 0);
 8003fd8:	4b51      	ldr	r3, [pc, #324]	; (8004120 <runCmdTask+0x518>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b0b      	cmp	r3, #11
 8003fde:	d004      	beq.n	8003fea <runCmdTask+0x3e2>
 8003fe0:	4b53      	ldr	r3, [pc, #332]	; (8004130 <runCmdTask+0x528>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2273      	movs	r2, #115	; 0x73
 8003fe6:	641a      	str	r2, [r3, #64]	; 0x40
 8003fe8:	e003      	b.n	8003ff2 <runCmdTask+0x3ea>
 8003fea:	4b51      	ldr	r3, [pc, #324]	; (8004130 <runCmdTask+0x528>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2232      	movs	r2, #50	; 0x32
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
 8003ff2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003ff6:	f002 fb81 	bl	80066fc <HAL_Delay>
	  		__CLEAR_CURCMD(curCmd);
 8003ffa:	4b49      	ldr	r3, [pc, #292]	; (8004120 <runCmdTask+0x518>)
 8003ffc:	2264      	movs	r2, #100	; 0x64
 8003ffe:	701a      	strb	r2, [r3, #0]
 8004000:	4b47      	ldr	r3, [pc, #284]	; (8004120 <runCmdTask+0x518>)
 8004002:	2200      	movs	r2, #0
 8004004:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 8004006:	4a4b      	ldr	r2, [pc, #300]	; (8004134 <runCmdTask+0x52c>)
 8004008:	210f      	movs	r1, #15
 800400a:	4847      	ldr	r0, [pc, #284]	; (8004128 <runCmdTask+0x520>)
 800400c:	f00a fda4 	bl	800eb58 <sniprintf>
 8004010:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004014:	2206      	movs	r2, #6
 8004016:	4948      	ldr	r1, [pc, #288]	; (8004138 <runCmdTask+0x530>)
 8004018:	4848      	ldr	r0, [pc, #288]	; (800413c <runCmdTask+0x534>)
 800401a:	f006 fd12 	bl	800aa42 <HAL_UART_Transmit>
	  		 break;
 800401e:	e078      	b.n	8004112 <runCmdTask+0x50a>
	  	 case 13: // debug IR sensor
	  		 curTask = TASK_ADC;
 8004020:	4b42      	ldr	r3, [pc, #264]	; (800412c <runCmdTask+0x524>)
 8004022:	2206      	movs	r2, #6
 8004024:	701a      	strb	r2, [r3, #0]
	  		 break;
 8004026:	e074      	b.n	8004112 <runCmdTask+0x50a>
	  	 case 14: // DT move until specified distance from obstacle
	  		  curTask = TASK_MOVE_OBS;
 8004028:	4b40      	ldr	r3, [pc, #256]	; (800412c <runCmdTask+0x524>)
 800402a:	2207      	movs	r2, #7
 800402c:	701a      	strb	r2, [r3, #0]
	  		  __PEND_CURCMD(curCmd);
 800402e:	4b3c      	ldr	r3, [pc, #240]	; (8004120 <runCmdTask+0x518>)
 8004030:	2263      	movs	r2, #99	; 0x63
 8004032:	701a      	strb	r2, [r3, #0]
	  		 break;
 8004034:	e06d      	b.n	8004112 <runCmdTask+0x50a>
	  	 case 15:
	  		 curTask = TASK_BUZZER;
 8004036:	4b3d      	ldr	r3, [pc, #244]	; (800412c <runCmdTask+0x524>)
 8004038:	220a      	movs	r2, #10
 800403a:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 800403c:	4b38      	ldr	r3, [pc, #224]	; (8004120 <runCmdTask+0x518>)
 800403e:	2263      	movs	r2, #99	; 0x63
 8004040:	701a      	strb	r2, [r3, #0]
	  		break;
 8004042:	e066      	b.n	8004112 <runCmdTask+0x50a>
	  	 case 16:
	  		 curTask = TASK_FASTESTPATH;
 8004044:	4b39      	ldr	r3, [pc, #228]	; (800412c <runCmdTask+0x524>)
 8004046:	2208      	movs	r2, #8
 8004048:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 800404a:	4b35      	ldr	r3, [pc, #212]	; (8004120 <runCmdTask+0x518>)
 800404c:	2263      	movs	r2, #99	; 0x63
 800404e:	701a      	strb	r2, [r3, #0]
	  		 break;
 8004050:	e05f      	b.n	8004112 <runCmdTask+0x50a>
	  	 case 17:
	  		 curTask = TASK_FASTESTPATH_V2;
 8004052:	4b36      	ldr	r3, [pc, #216]	; (800412c <runCmdTask+0x524>)
 8004054:	2209      	movs	r2, #9
 8004056:	701a      	strb	r2, [r3, #0]
	  		__PEND_CURCMD(curCmd);
 8004058:	4b31      	ldr	r3, [pc, #196]	; (8004120 <runCmdTask+0x518>)
 800405a:	2263      	movs	r2, #99	; 0x63
 800405c:	701a      	strb	r2, [r3, #0]
	  		 break;
 800405e:	e058      	b.n	8004112 <runCmdTask+0x50a>
	  	 case 88: // Axxx, rotate left by xxx degree
	  	 case 89: // Cxxx, rotate right by xxx degree
	  		 __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 88);
 8004060:	4b2f      	ldr	r3, [pc, #188]	; (8004120 <runCmdTask+0x518>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b58      	cmp	r3, #88	; 0x58
 8004066:	d004      	beq.n	8004072 <runCmdTask+0x46a>
 8004068:	4b31      	ldr	r3, [pc, #196]	; (8004130 <runCmdTask+0x528>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2273      	movs	r2, #115	; 0x73
 800406e:	641a      	str	r2, [r3, #64]	; 0x40
 8004070:	e003      	b.n	800407a <runCmdTask+0x472>
 8004072:	4b2f      	ldr	r3, [pc, #188]	; (8004130 <runCmdTask+0x528>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2232      	movs	r2, #50	; 0x32
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
 800407a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800407e:	f002 fb3d 	bl	80066fc <HAL_Delay>
	  		 __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8004082:	2200      	movs	r2, #0
 8004084:	2104      	movs	r1, #4
 8004086:	482e      	ldr	r0, [pc, #184]	; (8004140 <runCmdTask+0x538>)
 8004088:	f003 fa9c 	bl	80075c4 <HAL_GPIO_WritePin>
 800408c:	2201      	movs	r2, #1
 800408e:	2108      	movs	r1, #8
 8004090:	482b      	ldr	r0, [pc, #172]	; (8004140 <runCmdTask+0x538>)
 8004092:	f003 fa97 	bl	80075c4 <HAL_GPIO_WritePin>
 8004096:	2200      	movs	r2, #0
 8004098:	2120      	movs	r1, #32
 800409a:	4829      	ldr	r0, [pc, #164]	; (8004140 <runCmdTask+0x538>)
 800409c:	f003 fa92 	bl	80075c4 <HAL_GPIO_WritePin>
 80040a0:	2201      	movs	r2, #1
 80040a2:	2110      	movs	r1, #16
 80040a4:	4826      	ldr	r0, [pc, #152]	; (8004140 <runCmdTask+0x538>)
 80040a6:	f003 fa8d 	bl	80075c4 <HAL_GPIO_WritePin>
	  		 if (curCmd.index == 88) {
 80040aa:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <runCmdTask+0x518>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b58      	cmp	r3, #88	; 0x58
 80040b0:	d113      	bne.n	80040da <runCmdTask+0x4d2>
	  			 targetAngle = curCmd.val;
 80040b2:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <runCmdTask+0x518>)
 80040b4:	885b      	ldrh	r3, [r3, #2]
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040be:	4b21      	ldr	r3, [pc, #132]	; (8004144 <runCmdTask+0x53c>)
 80040c0:	edc3 7a00 	vstr	s15, [r3]
	  			 __SET_MOTOR_DUTY(&htim8, 800, 1200);
 80040c4:	4b20      	ldr	r3, [pc, #128]	; (8004148 <runCmdTask+0x540>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80040cc:	635a      	str	r2, [r3, #52]	; 0x34
 80040ce:	4b1e      	ldr	r3, [pc, #120]	; (8004148 <runCmdTask+0x540>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80040d6:	639a      	str	r2, [r3, #56]	; 0x38
 80040d8:	e013      	b.n	8004102 <runCmdTask+0x4fa>
	  		 } else {
	  			targetAngle = -curCmd.val;
 80040da:	4b11      	ldr	r3, [pc, #68]	; (8004120 <runCmdTask+0x518>)
 80040dc:	885b      	ldrh	r3, [r3, #2]
 80040de:	425b      	negs	r3, r3
 80040e0:	ee07 3a90 	vmov	s15, r3
 80040e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040e8:	4b16      	ldr	r3, [pc, #88]	; (8004144 <runCmdTask+0x53c>)
 80040ea:	edc3 7a00 	vstr	s15, [r3]
	  			 __SET_MOTOR_DUTY(&htim8, 1200, 800);
 80040ee:	4b16      	ldr	r3, [pc, #88]	; (8004148 <runCmdTask+0x540>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80040f6:	635a      	str	r2, [r3, #52]	; 0x34
 80040f8:	4b13      	ldr	r3, [pc, #76]	; (8004148 <runCmdTask+0x540>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004100:	639a      	str	r2, [r3, #56]	; 0x38
	  		 }
	  		__PEND_CURCMD(curCmd);
 8004102:	4b07      	ldr	r3, [pc, #28]	; (8004120 <runCmdTask+0x518>)
 8004104:	2263      	movs	r2, #99	; 0x63
 8004106:	701a      	strb	r2, [r3, #0]
	  		 RobotTurn(&targetAngle);
 8004108:	480e      	ldr	r0, [pc, #56]	; (8004144 <runCmdTask+0x53c>)
 800410a:	f7ff f905 	bl	8003318 <RobotTurn>
	  		 break;
 800410e:	e000      	b.n	8004112 <runCmdTask+0x50a>
	  		 break;
	  	 case 100:
	  		 break;
	  	 default:
	  //		 curCmd.index = 99;
	  		 break;
 8004110:	bf00      	nop
	  	 }

	  osDelay(100);
 8004112:	2064      	movs	r0, #100	; 0x64
 8004114:	f007 fdcc 	bl	800bcb0 <osDelay>
	  switch(curCmd.index) {
 8004118:	e57a      	b.n	8003c10 <runCmdTask+0x8>
 800411a:	bf00      	nop
 800411c:	2000048c 	.word	0x2000048c
 8004120:	200004c0 	.word	0x200004c0
 8004124:	08010228 	.word	0x08010228
 8004128:	200004c4 	.word	0x200004c4
 800412c:	20000134 	.word	0x20000134
 8004130:	200002a0 	.word	0x200002a0
 8004134:	08010218 	.word	0x08010218
 8004138:	08010220 	.word	0x08010220
 800413c:	20000408 	.word	0x20000408
 8004140:	40020000 	.word	0x40020000
 8004144:	200004e8 	.word	0x200004e8
 8004148:	200003c0 	.word	0x200003c0

0800414c <runADCTask>:
* Greedy Task (can only preempted by UART IRQ or EXTI)
* When activate (curTask == TASK_ADC), function executes in 1MHz
*/
/* USER CODE END Header_runADCTask */
void runADCTask(void *argument)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runADCTask */
	uint16_t dataPoint = 0; uint32_t IR_data_raw_acc = 0;
 8004154:	2300      	movs	r3, #0
 8004156:	81fb      	strh	r3, [r7, #14]
 8004158:	2300      	movs	r3, #0
 800415a:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_ADC) osDelay(1000);
 800415c:	4b27      	ldr	r3, [pc, #156]	; (80041fc <runADCTask+0xb0>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b06      	cmp	r3, #6
 8004162:	d004      	beq.n	800416e <runADCTask+0x22>
 8004164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004168:	f007 fda2 	bl	800bcb0 <osDelay>
 800416c:	e7f6      	b.n	800415c <runADCTask+0x10>
	  else {
//			dataPoint = 0; IR_data_raw_acc = 0; obsDist_IR = 1000;
//			last_curTask_tick = HAL_GetTick();
			__PEND_CURCMD(curCmd);
 800416e:	4b24      	ldr	r3, [pc, #144]	; (8004200 <runADCTask+0xb4>)
 8004170:	2263      	movs	r2, #99	; 0x63
 8004172:	701a      	strb	r2, [r3, #0]
			targetDist = 40;
 8004174:	4b23      	ldr	r3, [pc, #140]	; (8004204 <runADCTask+0xb8>)
 8004176:	4a24      	ldr	r2, [pc, #144]	; (8004208 <runADCTask+0xbc>)
 8004178:	601a      	str	r2, [r3, #0]
			RobotMoveDistObstacle_IR(&targetDist);
 800417a:	4822      	ldr	r0, [pc, #136]	; (8004204 <runADCTask+0xb8>)
 800417c:	f7fe ff68 	bl	8003050 <RobotMoveDistObstacle_IR>
//			  osDelay(5);
//			} while (1);
//
//		  __ON_TASK_END(&htim8, prevTask, curTask);
//		  HAL_ADC_Stop(&hadc1);
		  clickOnce = 0;
 8004180:	4b22      	ldr	r3, [pc, #136]	; (800420c <runADCTask+0xc0>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8004186:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <runADCTask+0xb0>)
 8004188:	781a      	ldrb	r2, [r3, #0]
 800418a:	4b21      	ldr	r3, [pc, #132]	; (8004210 <runADCTask+0xc4>)
 800418c:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 800418e:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <runADCTask+0xb0>)
 8004190:	220b      	movs	r2, #11
 8004192:	701a      	strb	r2, [r3, #0]
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8004194:	4b1f      	ldr	r3, [pc, #124]	; (8004214 <runADCTask+0xc8>)
 8004196:	781a      	ldrb	r2, [r3, #0]
 8004198:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <runADCTask+0xc8>)
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	429a      	cmp	r2, r3
 800419e:	d112      	bne.n	80041c6 <runADCTask+0x7a>
			__CLEAR_CURCMD(curCmd);
 80041a0:	4b17      	ldr	r3, [pc, #92]	; (8004200 <runADCTask+0xb4>)
 80041a2:	2264      	movs	r2, #100	; 0x64
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	4b16      	ldr	r3, [pc, #88]	; (8004200 <runADCTask+0xb4>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 80041ac:	4a1a      	ldr	r2, [pc, #104]	; (8004218 <runADCTask+0xcc>)
 80041ae:	210f      	movs	r1, #15
 80041b0:	481a      	ldr	r0, [pc, #104]	; (800421c <runADCTask+0xd0>)
 80041b2:	f00a fcd1 	bl	800eb58 <sniprintf>
 80041b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041ba:	2206      	movs	r2, #6
 80041bc:	4918      	ldr	r1, [pc, #96]	; (8004220 <runADCTask+0xd4>)
 80041be:	4819      	ldr	r0, [pc, #100]	; (8004224 <runADCTask+0xd8>)
 80041c0:	f006 fc3f 	bl	800aa42 <HAL_UART_Transmit>
 80041c4:	e7ca      	b.n	800415c <runADCTask+0x10>

		} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 80041c6:	4b13      	ldr	r3, [pc, #76]	; (8004214 <runADCTask+0xc8>)
 80041c8:	785b      	ldrb	r3, [r3, #1]
 80041ca:	4a0d      	ldr	r2, [pc, #52]	; (8004200 <runADCTask+0xb4>)
 80041cc:	4911      	ldr	r1, [pc, #68]	; (8004214 <runADCTask+0xc8>)
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <runADCTask+0xc8>)
 80041d8:	785b      	ldrb	r3, [r3, #1]
 80041da:	3301      	adds	r3, #1
 80041dc:	4a0d      	ldr	r2, [pc, #52]	; (8004214 <runADCTask+0xc8>)
 80041de:	7892      	ldrb	r2, [r2, #2]
 80041e0:	fb93 f1f2 	sdiv	r1, r3, r2
 80041e4:	fb01 f202 	mul.w	r2, r1, r2
 80041e8:	1a9b      	subs	r3, r3, r2
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	4b09      	ldr	r3, [pc, #36]	; (8004214 <runADCTask+0xc8>)
 80041ee:	705a      	strb	r2, [r3, #1]
 80041f0:	4a0d      	ldr	r2, [pc, #52]	; (8004228 <runADCTask+0xdc>)
 80041f2:	210f      	movs	r1, #15
 80041f4:	4809      	ldr	r0, [pc, #36]	; (800421c <runADCTask+0xd0>)
 80041f6:	f00a fcaf 	bl	800eb58 <sniprintf>
	  if (curTask != TASK_ADC) osDelay(1000);
 80041fa:	e7af      	b.n	800415c <runADCTask+0x10>
 80041fc:	20000134 	.word	0x20000134
 8004200:	200004c0 	.word	0x200004c0
 8004204:	200004fc 	.word	0x200004fc
 8004208:	42200000 	.word	0x42200000
 800420c:	20000578 	.word	0x20000578
 8004210:	20000135 	.word	0x20000135
 8004214:	2000048c 	.word	0x2000048c
 8004218:	08010218 	.word	0x08010218
 800421c:	200004c4 	.word	0x200004c4
 8004220:	08010220 	.word	0x08010220
 8004224:	20000408 	.word	0x20000408
 8004228:	08010228 	.word	0x08010228

0800422c <runMoveDistTask>:
* @retval None
* Greedy Task (can only preempted by UART IRQ or EXTI)
*/
/* USER CODE END Header_runMoveDistTask */
void runMoveDistTask(void *argument)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_MOVE && curTask != TASK_MOVE_BACKWARD) osDelay(1000);
 8004234:	4b85      	ldr	r3, [pc, #532]	; (800444c <runMoveDistTask+0x220>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <runMoveDistTask+0x22>
 800423c:	4b83      	ldr	r3, [pc, #524]	; (800444c <runMoveDistTask+0x220>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d004      	beq.n	800424e <runMoveDistTask+0x22>
 8004244:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004248:	f007 fd32 	bl	800bcb0 <osDelay>
 800424c:	e0fc      	b.n	8004448 <runMoveDistTask+0x21c>
	  else {
		  if (manualMode) {
 800424e:	4b80      	ldr	r3, [pc, #512]	; (8004450 <runMoveDistTask+0x224>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d07e      	beq.n	8004354 <runMoveDistTask+0x128>
			  angleNow = 0; gyroZ = 0; // reset angle for PID
 8004256:	4b7f      	ldr	r3, [pc, #508]	; (8004454 <runMoveDistTask+0x228>)
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	4b7e      	ldr	r3, [pc, #504]	; (8004458 <runMoveDistTask+0x22c>)
 8004260:	2200      	movs	r2, #0
 8004262:	801a      	strh	r2, [r3, #0]
			PIDConfigReset(&pidTSlow);
 8004264:	487d      	ldr	r0, [pc, #500]	; (800445c <runMoveDistTask+0x230>)
 8004266:	f7fe f8c8 	bl	80023fa <PIDConfigReset>
			PIDConfigReset(&pidSlow);
 800426a:	487d      	ldr	r0, [pc, #500]	; (8004460 <runMoveDistTask+0x234>)
 800426c:	f7fe f8c5 	bl	80023fa <PIDConfigReset>
			PIDConfigReset(&pidFast);
 8004270:	487c      	ldr	r0, [pc, #496]	; (8004464 <runMoveDistTask+0x238>)
 8004272:	f7fe f8c2 	bl	80023fa <PIDConfigReset>

			__SET_MOTOR_DIRECTION(curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD);
 8004276:	4b75      	ldr	r3, [pc, #468]	; (800444c <runMoveDistTask+0x220>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	bf14      	ite	ne
 800427e:	2301      	movne	r3, #1
 8004280:	2300      	moveq	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	2104      	movs	r1, #4
 8004288:	4877      	ldr	r0, [pc, #476]	; (8004468 <runMoveDistTask+0x23c>)
 800428a:	f003 f99b 	bl	80075c4 <HAL_GPIO_WritePin>
 800428e:	4b6f      	ldr	r3, [pc, #444]	; (800444c <runMoveDistTask+0x220>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	bf0c      	ite	eq
 8004296:	2301      	moveq	r3, #1
 8004298:	2300      	movne	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	2108      	movs	r1, #8
 80042a0:	4871      	ldr	r0, [pc, #452]	; (8004468 <runMoveDistTask+0x23c>)
 80042a2:	f003 f98f 	bl	80075c4 <HAL_GPIO_WritePin>
 80042a6:	4b69      	ldr	r3, [pc, #420]	; (800444c <runMoveDistTask+0x220>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bf14      	ite	ne
 80042ae:	2301      	movne	r3, #1
 80042b0:	2300      	moveq	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	2120      	movs	r1, #32
 80042b8:	486b      	ldr	r0, [pc, #428]	; (8004468 <runMoveDistTask+0x23c>)
 80042ba:	f003 f983 	bl	80075c4 <HAL_GPIO_WritePin>
 80042be:	4b63      	ldr	r3, [pc, #396]	; (800444c <runMoveDistTask+0x220>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	bf0c      	ite	eq
 80042c6:	2301      	moveq	r3, #1
 80042c8:	2300      	movne	r3, #0
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	461a      	mov	r2, r3
 80042ce:	2110      	movs	r1, #16
 80042d0:	4865      	ldr	r0, [pc, #404]	; (8004468 <runMoveDistTask+0x23c>)
 80042d2:	f003 f977 	bl	80075c4 <HAL_GPIO_WritePin>
			  __ON_TASK_END(&htim8, prevTask, curTask);
 80042d6:	4b65      	ldr	r3, [pc, #404]	; (800446c <runMoveDistTask+0x240>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	635a      	str	r2, [r3, #52]	; 0x34
 80042de:	4b63      	ldr	r3, [pc, #396]	; (800446c <runMoveDistTask+0x240>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	639a      	str	r2, [r3, #56]	; 0x38
 80042e6:	4b59      	ldr	r3, [pc, #356]	; (800444c <runMoveDistTask+0x220>)
 80042e8:	781a      	ldrb	r2, [r3, #0]
 80042ea:	4b61      	ldr	r3, [pc, #388]	; (8004470 <runMoveDistTask+0x244>)
 80042ec:	701a      	strb	r2, [r3, #0]
 80042ee:	4b57      	ldr	r3, [pc, #348]	; (800444c <runMoveDistTask+0x220>)
 80042f0:	220b      	movs	r2, #11
 80042f2:	701a      	strb	r2, [r3, #0]
			  clickOnce = 0;
 80042f4:	4b5f      	ldr	r3, [pc, #380]	; (8004474 <runMoveDistTask+0x248>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]

			  __CLEAR_CURCMD(curCmd);
 80042fa:	4b5f      	ldr	r3, [pc, #380]	; (8004478 <runMoveDistTask+0x24c>)
 80042fc:	2264      	movs	r2, #100	; 0x64
 80042fe:	701a      	strb	r2, [r3, #0]
 8004300:	4b5d      	ldr	r3, [pc, #372]	; (8004478 <runMoveDistTask+0x24c>)
 8004302:	2200      	movs	r2, #0
 8004304:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 8004306:	4a5d      	ldr	r2, [pc, #372]	; (800447c <runMoveDistTask+0x250>)
 8004308:	210f      	movs	r1, #15
 800430a:	485d      	ldr	r0, [pc, #372]	; (8004480 <runMoveDistTask+0x254>)
 800430c:	f00a fc24 	bl	800eb58 <sniprintf>
 8004310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004314:	2206      	movs	r2, #6
 8004316:	495b      	ldr	r1, [pc, #364]	; (8004484 <runMoveDistTask+0x258>)
 8004318:	485b      	ldr	r0, [pc, #364]	; (8004488 <runMoveDistTask+0x25c>)
 800431a:	f006 fb92 	bl	800aa42 <HAL_UART_Transmit>

			last_curTask_tick = HAL_GetTick();
 800431e:	f002 f9e1 	bl	80066e4 <HAL_GetTick>
 8004322:	4603      	mov	r3, r0
 8004324:	4a59      	ldr	r2, [pc, #356]	; (800448c <runMoveDistTask+0x260>)
 8004326:	6013      	str	r3, [r2, #0]
			do {
				if (!manualMode) break;
 8004328:	4b49      	ldr	r3, [pc, #292]	; (8004450 <runMoveDistTask+0x224>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 808a 	beq.w	8004446 <runMoveDistTask+0x21a>
				if (HAL_GetTick() - last_curTask_tick >= 10) {
 8004332:	f002 f9d7 	bl	80066e4 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	4b54      	ldr	r3, [pc, #336]	; (800448c <runMoveDistTask+0x260>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b09      	cmp	r3, #9
 8004340:	d9f2      	bls.n	8004328 <runMoveDistTask+0xfc>
					StraightLineMove(SPEED_MODE_T);
 8004342:	2000      	movs	r0, #0
 8004344:	f7fe f86c 	bl	8002420 <StraightLineMove>
					last_curTask_tick = HAL_GetTick();
 8004348:	f002 f9cc 	bl	80066e4 <HAL_GetTick>
 800434c:	4603      	mov	r3, r0
 800434e:	4a4f      	ldr	r2, [pc, #316]	; (800448c <runMoveDistTask+0x260>)
 8004350:	6013      	str	r3, [r2, #0]
				if (!manualMode) break;
 8004352:	e7e9      	b.n	8004328 <runMoveDistTask+0xfc>
//				osDelay(5); // for video demo only, give OLED chances to update
			} while (1);

		  } else {
//			  osDelay(5000); // for video demo only
			  targetDist = (float) curCmd.val;
 8004354:	4b48      	ldr	r3, [pc, #288]	; (8004478 <runMoveDistTask+0x24c>)
 8004356:	885b      	ldrh	r3, [r3, #2]
 8004358:	ee07 3a90 	vmov	s15, r3
 800435c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004360:	4b4b      	ldr	r3, [pc, #300]	; (8004490 <runMoveDistTask+0x264>)
 8004362:	edc3 7a00 	vstr	s15, [r3]
			  // for target distance lesser than 15, move mode must be forced to SLOW
			  if (targetDist <= 15) moveMode = SLOW;
 8004366:	4b4a      	ldr	r3, [pc, #296]	; (8004490 <runMoveDistTask+0x264>)
 8004368:	edd3 7a00 	vldr	s15, [r3]
 800436c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8004370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004378:	d802      	bhi.n	8004380 <runMoveDistTask+0x154>
 800437a:	4b46      	ldr	r3, [pc, #280]	; (8004494 <runMoveDistTask+0x268>)
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]

			  if (moveMode == SLOW) {
 8004380:	4b44      	ldr	r3, [pc, #272]	; (8004494 <runMoveDistTask+0x268>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10c      	bne.n	80043a2 <runMoveDistTask+0x176>
				  RobotMoveDist(&targetDist, curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD, SPEED_MODE_1);
 8004388:	4b30      	ldr	r3, [pc, #192]	; (800444c <runMoveDistTask+0x220>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	bf0c      	ite	eq
 8004390:	2301      	moveq	r3, #1
 8004392:	2300      	movne	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2201      	movs	r2, #1
 8004398:	4619      	mov	r1, r3
 800439a:	483d      	ldr	r0, [pc, #244]	; (8004490 <runMoveDistTask+0x264>)
 800439c:	f7fe fb58 	bl	8002a50 <RobotMoveDist>
 80043a0:	e00b      	b.n	80043ba <runMoveDistTask+0x18e>
			  } else {
				  RobotMoveDist(&targetDist, curTask == TASK_MOVE ? DIR_FORWARD : DIR_BACKWARD, SPEED_MODE_2);
 80043a2:	4b2a      	ldr	r3, [pc, #168]	; (800444c <runMoveDistTask+0x220>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	bf0c      	ite	eq
 80043aa:	2301      	moveq	r3, #1
 80043ac:	2300      	movne	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2202      	movs	r2, #2
 80043b2:	4619      	mov	r1, r3
 80043b4:	4836      	ldr	r0, [pc, #216]	; (8004490 <runMoveDistTask+0x264>)
 80043b6:	f7fe fb4b 	bl	8002a50 <RobotMoveDist>
			  }

			  __ON_TASK_END(&htim8, prevTask, curTask);
 80043ba:	4b2c      	ldr	r3, [pc, #176]	; (800446c <runMoveDistTask+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2200      	movs	r2, #0
 80043c0:	635a      	str	r2, [r3, #52]	; 0x34
 80043c2:	4b2a      	ldr	r3, [pc, #168]	; (800446c <runMoveDistTask+0x240>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2200      	movs	r2, #0
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
 80043ca:	4b20      	ldr	r3, [pc, #128]	; (800444c <runMoveDistTask+0x220>)
 80043cc:	781a      	ldrb	r2, [r3, #0]
 80043ce:	4b28      	ldr	r3, [pc, #160]	; (8004470 <runMoveDistTask+0x244>)
 80043d0:	701a      	strb	r2, [r3, #0]
 80043d2:	4b1e      	ldr	r3, [pc, #120]	; (800444c <runMoveDistTask+0x220>)
 80043d4:	220b      	movs	r2, #11
 80043d6:	701a      	strb	r2, [r3, #0]
				  clickOnce = 0;
 80043d8:	4b26      	ldr	r3, [pc, #152]	; (8004474 <runMoveDistTask+0x248>)
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]

				if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 80043de:	4b2e      	ldr	r3, [pc, #184]	; (8004498 <runMoveDistTask+0x26c>)
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <runMoveDistTask+0x26c>)
 80043e4:	785b      	ldrb	r3, [r3, #1]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d112      	bne.n	8004410 <runMoveDistTask+0x1e4>
					__CLEAR_CURCMD(curCmd);
 80043ea:	4b23      	ldr	r3, [pc, #140]	; (8004478 <runMoveDistTask+0x24c>)
 80043ec:	2264      	movs	r2, #100	; 0x64
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	4b21      	ldr	r3, [pc, #132]	; (8004478 <runMoveDistTask+0x24c>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	805a      	strh	r2, [r3, #2]
					__ACK_TASK_DONE(&huart3, rxMsg);
 80043f6:	4a21      	ldr	r2, [pc, #132]	; (800447c <runMoveDistTask+0x250>)
 80043f8:	210f      	movs	r1, #15
 80043fa:	4821      	ldr	r0, [pc, #132]	; (8004480 <runMoveDistTask+0x254>)
 80043fc:	f00a fbac 	bl	800eb58 <sniprintf>
 8004400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004404:	2206      	movs	r2, #6
 8004406:	491f      	ldr	r1, [pc, #124]	; (8004484 <runMoveDistTask+0x258>)
 8004408:	481f      	ldr	r0, [pc, #124]	; (8004488 <runMoveDistTask+0x25c>)
 800440a:	f006 fb1a 	bl	800aa42 <HAL_UART_Transmit>
 800440e:	e711      	b.n	8004234 <runMoveDistTask+0x8>
				} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004410:	4b21      	ldr	r3, [pc, #132]	; (8004498 <runMoveDistTask+0x26c>)
 8004412:	785b      	ldrb	r3, [r3, #1]
 8004414:	4a18      	ldr	r2, [pc, #96]	; (8004478 <runMoveDistTask+0x24c>)
 8004416:	4920      	ldr	r1, [pc, #128]	; (8004498 <runMoveDistTask+0x26c>)
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <runMoveDistTask+0x26c>)
 8004422:	785b      	ldrb	r3, [r3, #1]
 8004424:	3301      	adds	r3, #1
 8004426:	4a1c      	ldr	r2, [pc, #112]	; (8004498 <runMoveDistTask+0x26c>)
 8004428:	7892      	ldrb	r2, [r2, #2]
 800442a:	fb93 f1f2 	sdiv	r1, r3, r2
 800442e:	fb01 f202 	mul.w	r2, r1, r2
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	b2da      	uxtb	r2, r3
 8004436:	4b18      	ldr	r3, [pc, #96]	; (8004498 <runMoveDistTask+0x26c>)
 8004438:	705a      	strb	r2, [r3, #1]
 800443a:	4a18      	ldr	r2, [pc, #96]	; (800449c <runMoveDistTask+0x270>)
 800443c:	210f      	movs	r1, #15
 800443e:	4810      	ldr	r0, [pc, #64]	; (8004480 <runMoveDistTask+0x254>)
 8004440:	f00a fb8a 	bl	800eb58 <sniprintf>
 8004444:	e6f6      	b.n	8004234 <runMoveDistTask+0x8>
				if (!manualMode) break;
 8004446:	bf00      	nop
	  if (curTask != TASK_MOVE && curTask != TASK_MOVE_BACKWARD) osDelay(1000);
 8004448:	e6f4      	b.n	8004234 <runMoveDistTask+0x8>
 800444a:	bf00      	nop
 800444c:	20000134 	.word	0x20000134
 8004450:	200004e4 	.word	0x200004e4
 8004454:	200004ec 	.word	0x200004ec
 8004458:	200004f2 	.word	0x200004f2
 800445c:	2000051c 	.word	0x2000051c
 8004460:	20000508 	.word	0x20000508
 8004464:	20000530 	.word	0x20000530
 8004468:	40020000 	.word	0x40020000
 800446c:	200003c0 	.word	0x200003c0
 8004470:	20000135 	.word	0x20000135
 8004474:	20000578 	.word	0x20000578
 8004478:	200004c0 	.word	0x200004c0
 800447c:	08010218 	.word	0x08010218
 8004480:	200004c4 	.word	0x200004c4
 8004484:	08010220 	.word	0x08010220
 8004488:	20000408 	.word	0x20000408
 800448c:	200004f8 	.word	0x200004f8
 8004490:	200004fc 	.word	0x200004fc
 8004494:	20000136 	.word	0x20000136
 8004498:	2000048c 	.word	0x2000048c
 800449c:	08010228 	.word	0x08010228

080044a0 <runFastestPathTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFastestPathTask */
void runFastestPathTask(void *argument)
{
 80044a0:	b5b0      	push	{r4, r5, r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af04      	add	r7, sp, #16
 80044a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFastestPathTask */
	uint8_t hadOvershoot = 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_FASTESTPATH) osDelay(1000);
 80044ac:	4b84      	ldr	r3, [pc, #528]	; (80046c0 <runFastestPathTask+0x220>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d004      	beq.n	80044be <runFastestPathTask+0x1e>
 80044b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044b8:	f007 fbfa 	bl	800bcb0 <osDelay>
 80044bc:	e7f6      	b.n	80044ac <runFastestPathTask+0xc>
	  else {
		  if (step == 0) {
 80044be:	4b81      	ldr	r3, [pc, #516]	; (80046c4 <runFastestPathTask+0x224>)
 80044c0:	f993 3000 	ldrsb.w	r3, [r3]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d107      	bne.n	80044d8 <runFastestPathTask+0x38>
			  targetDist = 30;
 80044c8:	4b7f      	ldr	r3, [pc, #508]	; (80046c8 <runFastestPathTask+0x228>)
 80044ca:	4a80      	ldr	r2, [pc, #512]	; (80046cc <runFastestPathTask+0x22c>)
 80044cc:	601a      	str	r2, [r3, #0]
			  RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 80044ce:	2102      	movs	r1, #2
 80044d0:	487d      	ldr	r0, [pc, #500]	; (80046c8 <runFastestPathTask+0x228>)
 80044d2:	f7fe fc41 	bl	8002d58 <RobotMoveDistObstacle>
 80044d6:	e23c      	b.n	8004952 <runFastestPathTask+0x4b2>
		  } else if (step == 1) {
 80044d8:	4b7a      	ldr	r3, [pc, #488]	; (80046c4 <runFastestPathTask+0x224>)
 80044da:	f993 3000 	ldrsb.w	r3, [r3]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	f040 8198 	bne.w	8004814 <runFastestPathTask+0x374>
			  //2:  turn left by 90 degree, record down angle when US sensor overshoot
			  hadOvershoot = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	73fb      	strb	r3, [r7, #15]
			  angleNow = 0; gyroZ = 0;
 80044e8:	4b79      	ldr	r3, [pc, #484]	; (80046d0 <runFastestPathTask+0x230>)
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	4b78      	ldr	r3, [pc, #480]	; (80046d4 <runFastestPathTask+0x234>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	801a      	strh	r2, [r3, #0]
			  angle_left = 0;
 80044f6:	4b78      	ldr	r3, [pc, #480]	; (80046d8 <runFastestPathTask+0x238>)
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
			  targetAngle = 90;
 80044fe:	4b77      	ldr	r3, [pc, #476]	; (80046dc <runFastestPathTask+0x23c>)
 8004500:	4a77      	ldr	r2, [pc, #476]	; (80046e0 <runFastestPathTask+0x240>)
 8004502:	601a      	str	r2, [r3, #0]
			  obsDist_US = 0;
 8004504:	4b77      	ldr	r3, [pc, #476]	; (80046e4 <runFastestPathTask+0x244>)
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
			  __SET_SERVO_TURN_MAX(&htim1, 0);
 800450c:	4b76      	ldr	r3, [pc, #472]	; (80046e8 <runFastestPathTask+0x248>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2232      	movs	r2, #50	; 0x32
 8004512:	641a      	str	r2, [r3, #64]	; 0x40
 8004514:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004518:	f002 f8f0 	bl	80066fc <HAL_Delay>
			  __SET_MOTOR_DUTY(&htim8, 600, 1000);
 800451c:	4b73      	ldr	r3, [pc, #460]	; (80046ec <runFastestPathTask+0x24c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004524:	635a      	str	r2, [r3, #52]	; 0x34
 8004526:	4b71      	ldr	r3, [pc, #452]	; (80046ec <runFastestPathTask+0x24c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800452e:	639a      	str	r2, [r3, #56]	; 0x38
			  __SET_MOTOR_DIRECTION(1);
 8004530:	2200      	movs	r2, #0
 8004532:	2104      	movs	r1, #4
 8004534:	486e      	ldr	r0, [pc, #440]	; (80046f0 <runFastestPathTask+0x250>)
 8004536:	f003 f845 	bl	80075c4 <HAL_GPIO_WritePin>
 800453a:	2201      	movs	r2, #1
 800453c:	2108      	movs	r1, #8
 800453e:	486c      	ldr	r0, [pc, #432]	; (80046f0 <runFastestPathTask+0x250>)
 8004540:	f003 f840 	bl	80075c4 <HAL_GPIO_WritePin>
 8004544:	2200      	movs	r2, #0
 8004546:	2120      	movs	r1, #32
 8004548:	4869      	ldr	r0, [pc, #420]	; (80046f0 <runFastestPathTask+0x250>)
 800454a:	f003 f83b 	bl	80075c4 <HAL_GPIO_WritePin>
 800454e:	2201      	movs	r2, #1
 8004550:	2110      	movs	r1, #16
 8004552:	4867      	ldr	r0, [pc, #412]	; (80046f0 <runFastestPathTask+0x250>)
 8004554:	f003 f836 	bl	80075c4 <HAL_GPIO_WritePin>
			  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8004558:	2104      	movs	r1, #4
 800455a:	4866      	ldr	r0, [pc, #408]	; (80046f4 <runFastestPathTask+0x254>)
 800455c:	f004 fe64 	bl	8009228 <HAL_TIM_IC_Start_IT>
			  last_curTask_tick = HAL_GetTick();
 8004560:	f002 f8c0 	bl	80066e4 <HAL_GetTick>
 8004564:	4603      	mov	r3, r0
 8004566:	4a64      	ldr	r2, [pc, #400]	; (80046f8 <runFastestPathTask+0x258>)
 8004568:	6013      	str	r3, [r2, #0]
			  do {
				  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 800456a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800456e:	9302      	str	r3, [sp, #8]
 8004570:	2302      	movs	r3, #2
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	4b61      	ldr	r3, [pc, #388]	; (80046fc <runFastestPathTask+0x25c>)
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	2301      	movs	r3, #1
 800457a:	2237      	movs	r2, #55	; 0x37
 800457c:	21d0      	movs	r1, #208	; 0xd0
 800457e:	4860      	ldr	r0, [pc, #384]	; (8004700 <runFastestPathTask+0x260>)
 8004580:	f003 fa90 	bl	8007aa4 <HAL_I2C_Mem_Read>
 8004584:	4b5d      	ldr	r3, [pc, #372]	; (80046fc <runFastestPathTask+0x25c>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	b21a      	sxth	r2, r3
 800458c:	4b5b      	ldr	r3, [pc, #364]	; (80046fc <runFastestPathTask+0x25c>)
 800458e:	785b      	ldrb	r3, [r3, #1]
 8004590:	b21b      	sxth	r3, r3
 8004592:	4313      	orrs	r3, r2
 8004594:	b21a      	sxth	r2, r3
 8004596:	4b4f      	ldr	r3, [pc, #316]	; (80046d4 <runFastestPathTask+0x234>)
 8004598:	801a      	strh	r2, [r3, #0]
				  if (!hadOvershoot) {
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d11d      	bne.n	80045dc <runFastestPathTask+0x13c>
					  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80045a0:	2201      	movs	r2, #1
 80045a2:	2110      	movs	r1, #16
 80045a4:	4857      	ldr	r0, [pc, #348]	; (8004704 <runFastestPathTask+0x264>)
 80045a6:	f003 f80d 	bl	80075c4 <HAL_GPIO_WritePin>
					  __delay_us(&htim4, 10); // wait for 10us
 80045aa:	4b52      	ldr	r3, [pc, #328]	; (80046f4 <runFastestPathTask+0x254>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	625a      	str	r2, [r3, #36]	; 0x24
 80045b2:	4b50      	ldr	r3, [pc, #320]	; (80046f4 <runFastestPathTask+0x254>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	2b09      	cmp	r3, #9
 80045ba:	d9fa      	bls.n	80045b2 <runFastestPathTask+0x112>
					  HAL_GPIO_WritePin(TRI_GPIO_Port, TRI_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80045bc:	2200      	movs	r2, #0
 80045be:	2110      	movs	r1, #16
 80045c0:	4850      	ldr	r0, [pc, #320]	; (8004704 <runFastestPathTask+0x264>)
 80045c2:	f002 ffff 	bl	80075c4 <HAL_GPIO_WritePin>
					  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 80045c6:	4b4b      	ldr	r3, [pc, #300]	; (80046f4 <runFastestPathTask+0x254>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	4b49      	ldr	r3, [pc, #292]	; (80046f4 <runFastestPathTask+0x254>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0204 	orr.w	r2, r2, #4
 80045d4:	60da      	str	r2, [r3, #12]
					  osDelay(5); // give timer interrupt chance to update obsDist_US value
 80045d6:	2005      	movs	r0, #5
 80045d8:	f007 fb6a 	bl	800bcb0 <osDelay>
				  }


				  if (HAL_GetTick() - last_curTask_tick >=10) {
 80045dc:	f002 f882 	bl	80066e4 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	4b45      	ldr	r3, [pc, #276]	; (80046f8 <runFastestPathTask+0x258>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b09      	cmp	r3, #9
 80045ea:	d9be      	bls.n	800456a <runFastestPathTask+0xca>
//					  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
					  angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 80045ec:	4b38      	ldr	r3, [pc, #224]	; (80046d0 <runFastestPathTask+0x230>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fb ffa1 	bl	8000538 <__aeabi_f2d>
 80045f6:	4604      	mov	r4, r0
 80045f8:	460d      	mov	r5, r1
 80045fa:	4b36      	ldr	r3, [pc, #216]	; (80046d4 <runFastestPathTask+0x234>)
 80045fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004600:	4618      	mov	r0, r3
 8004602:	f7fb ff87 	bl	8000514 <__aeabi_i2d>
 8004606:	a32a      	add	r3, pc, #168	; (adr r3, 80046b0 <runFastestPathTask+0x210>)
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	f7fc f916 	bl	800083c <__aeabi_ddiv>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4610      	mov	r0, r2
 8004616:	4619      	mov	r1, r3
 8004618:	a327      	add	r3, pc, #156	; (adr r3, 80046b8 <runFastestPathTask+0x218>)
 800461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461e:	f7fb ffe3 	bl	80005e8 <__aeabi_dmul>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4620      	mov	r0, r4
 8004628:	4629      	mov	r1, r5
 800462a:	f7fb fe27 	bl	800027c <__adddf3>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4610      	mov	r0, r2
 8004634:	4619      	mov	r1, r3
 8004636:	f7fc fa91 	bl	8000b5c <__aeabi_d2f>
 800463a:	4603      	mov	r3, r0
 800463c:	4a24      	ldr	r2, [pc, #144]	; (80046d0 <runFastestPathTask+0x230>)
 800463e:	6013      	str	r3, [r2, #0]
					  if (obsDist_US > 55 && !hadOvershoot) {
 8004640:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <runFastestPathTask+0x244>)
 8004642:	edd3 7a00 	vldr	s15, [r3]
 8004646:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004708 <runFastestPathTask+0x268>
 800464a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800464e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004652:	dd08      	ble.n	8004666 <runFastestPathTask+0x1c6>
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d105      	bne.n	8004666 <runFastestPathTask+0x1c6>
						  angle_left = angleNow;
 800465a:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <runFastestPathTask+0x230>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1e      	ldr	r2, [pc, #120]	; (80046d8 <runFastestPathTask+0x238>)
 8004660:	6013      	str	r3, [r2, #0]
						  hadOvershoot = 1;
 8004662:	2301      	movs	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
					  }

					  if (abs(targetAngle - angleNow) < 0.01) break;
 8004666:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <runFastestPathTask+0x23c>)
 8004668:	ed93 7a00 	vldr	s14, [r3]
 800466c:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <runFastestPathTask+0x230>)
 800466e:	edd3 7a00 	vldr	s15, [r3]
 8004672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800467a:	ee17 3a90 	vmov	r3, s15
 800467e:	2b00      	cmp	r3, #0
 8004680:	db0d      	blt.n	800469e <runFastestPathTask+0x1fe>
 8004682:	4b16      	ldr	r3, [pc, #88]	; (80046dc <runFastestPathTask+0x23c>)
 8004684:	ed93 7a00 	vldr	s14, [r3]
 8004688:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <runFastestPathTask+0x230>)
 800468a:	edd3 7a00 	vldr	s15, [r3]
 800468e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004696:	ee17 3a90 	vmov	r3, s15
 800469a:	2b00      	cmp	r3, #0
 800469c:	dd36      	ble.n	800470c <runFastestPathTask+0x26c>
					  last_curTask_tick = HAL_GetTick();
 800469e:	f002 f821 	bl	80066e4 <HAL_GetTick>
 80046a2:	4603      	mov	r3, r0
 80046a4:	4a14      	ldr	r2, [pc, #80]	; (80046f8 <runFastestPathTask+0x258>)
 80046a6:	6013      	str	r3, [r2, #0]
				  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 80046a8:	e75f      	b.n	800456a <runFastestPathTask+0xca>
 80046aa:	bf00      	nop
 80046ac:	f3af 8000 	nop.w
 80046b0:	66666666 	.word	0x66666666
 80046b4:	40306666 	.word	0x40306666
 80046b8:	47ae147b 	.word	0x47ae147b
 80046bc:	3f847ae1 	.word	0x3f847ae1
 80046c0:	20000134 	.word	0x20000134
 80046c4:	2000057c 	.word	0x2000057c
 80046c8:	200004fc 	.word	0x200004fc
 80046cc:	41f00000 	.word	0x41f00000
 80046d0:	200004ec 	.word	0x200004ec
 80046d4:	200004f2 	.word	0x200004f2
 80046d8:	20000564 	.word	0x20000564
 80046dc:	200004e8 	.word	0x200004e8
 80046e0:	42b40000 	.word	0x42b40000
 80046e4:	2000054c 	.word	0x2000054c
 80046e8:	200002a0 	.word	0x200002a0
 80046ec:	200003c0 	.word	0x200003c0
 80046f0:	40020000 	.word	0x40020000
 80046f4:	20000378 	.word	0x20000378
 80046f8:	200004f8 	.word	0x200004f8
 80046fc:	200004f0 	.word	0x200004f0
 8004700:	2000024c 	.word	0x2000024c
 8004704:	40020400 	.word	0x40020400
 8004708:	425c0000 	.word	0x425c0000
					  if (abs(targetAngle - angleNow) < 0.01) break;
 800470c:	bf00      	nop
				  }

				} while (1);
			  __SET_MOTOR_DUTY(&htim8, 0, 0);
 800470e:	4ba2      	ldr	r3, [pc, #648]	; (8004998 <runFastestPathTask+0x4f8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	635a      	str	r2, [r3, #52]	; 0x34
 8004716:	4ba0      	ldr	r3, [pc, #640]	; (8004998 <runFastestPathTask+0x4f8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2200      	movs	r2, #0
 800471c:	639a      	str	r2, [r3, #56]	; 0x38
			  __RESET_SERVO_TURN(&htim1);
 800471e:	4b9f      	ldr	r3, [pc, #636]	; (800499c <runFastestPathTask+0x4fc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2247      	movs	r2, #71	; 0x47
 8004724:	641a      	str	r2, [r3, #64]	; 0x40
 8004726:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800472a:	f001 ffe7 	bl	80066fc <HAL_Delay>
			  osDelay(10);
 800472e:	200a      	movs	r0, #10
 8004730:	f007 fabe 	bl	800bcb0 <osDelay>

			  obs_a = 30 * tanf(angle_left * PI / 180);
 8004734:	4b9a      	ldr	r3, [pc, #616]	; (80049a0 <runFastestPathTask+0x500>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7fb fefd 	bl	8000538 <__aeabi_f2d>
 800473e:	a394      	add	r3, pc, #592	; (adr r3, 8004990 <runFastestPathTask+0x4f0>)
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	f7fb ff50 	bl	80005e8 <__aeabi_dmul>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4610      	mov	r0, r2
 800474e:	4619      	mov	r1, r3
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	4b93      	ldr	r3, [pc, #588]	; (80049a4 <runFastestPathTask+0x504>)
 8004756:	f7fc f871 	bl	800083c <__aeabi_ddiv>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4610      	mov	r0, r2
 8004760:	4619      	mov	r1, r3
 8004762:	f7fc f9fb 	bl	8000b5c <__aeabi_d2f>
 8004766:	4603      	mov	r3, r0
 8004768:	ee00 3a10 	vmov	s0, r3
 800476c:	f00a ffa6 	bl	800f6bc <tanf>
 8004770:	eef0 7a40 	vmov.f32	s15, s0
 8004774:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800477c:	4b8a      	ldr	r3, [pc, #552]	; (80049a8 <runFastestPathTask+0x508>)
 800477e:	edc3 7a00 	vstr	s15, [r3]
			  angle_right = atanf((60 - obs_a) / 30) * 180 / PI;
 8004782:	4b89      	ldr	r3, [pc, #548]	; (80049a8 <runFastestPathTask+0x508>)
 8004784:	edd3 7a00 	vldr	s15, [r3]
 8004788:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80049ac <runFastestPathTask+0x50c>
 800478c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004790:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8004794:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004798:	eeb0 0a47 	vmov.f32	s0, s14
 800479c:	f00a feb2 	bl	800f504 <atanf>
 80047a0:	eef0 7a40 	vmov.f32	s15, s0
 80047a4:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80049b0 <runFastestPathTask+0x510>
 80047a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047ac:	ee17 0a90 	vmov	r0, s15
 80047b0:	f7fb fec2 	bl	8000538 <__aeabi_f2d>
 80047b4:	a376      	add	r3, pc, #472	; (adr r3, 8004990 <runFastestPathTask+0x4f0>)
 80047b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ba:	f7fc f83f 	bl	800083c <__aeabi_ddiv>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4610      	mov	r0, r2
 80047c4:	4619      	mov	r1, r3
 80047c6:	f7fc f9c9 	bl	8000b5c <__aeabi_d2f>
 80047ca:	4603      	mov	r3, r0
 80047cc:	4a79      	ldr	r2, [pc, #484]	; (80049b4 <runFastestPathTask+0x514>)
 80047ce:	6013      	str	r3, [r2, #0]
			  x = sqrtf((60 - obs_a) * (60 - obs_a) + 900) - 23; // 23 robot length offset
 80047d0:	4b75      	ldr	r3, [pc, #468]	; (80049a8 <runFastestPathTask+0x508>)
 80047d2:	edd3 7a00 	vldr	s15, [r3]
 80047d6:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80049ac <runFastestPathTask+0x50c>
 80047da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047de:	4b72      	ldr	r3, [pc, #456]	; (80049a8 <runFastestPathTask+0x508>)
 80047e0:	edd3 7a00 	vldr	s15, [r3]
 80047e4:	eddf 6a71 	vldr	s13, [pc, #452]	; 80049ac <runFastestPathTask+0x50c>
 80047e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80047ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f0:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80049b8 <runFastestPathTask+0x518>
 80047f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047f8:	eeb0 0a67 	vmov.f32	s0, s15
 80047fc:	f00a fe64 	bl	800f4c8 <sqrtf>
 8004800:	eef0 7a40 	vmov.f32	s15, s0
 8004804:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8004808:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800480c:	4b6b      	ldr	r3, [pc, #428]	; (80049bc <runFastestPathTask+0x51c>)
 800480e:	edc3 7a00 	vstr	s15, [r3]
 8004812:	e09e      	b.n	8004952 <runFastestPathTask+0x4b2>

		  } else if (step == 2) {
 8004814:	4b6a      	ldr	r3, [pc, #424]	; (80049c0 <runFastestPathTask+0x520>)
 8004816:	f993 3000 	ldrsb.w	r3, [r3]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d105      	bne.n	800482a <runFastestPathTask+0x38a>
			  // 3: move forward until IR overshoot
			  RobotMoveUntilIROvershoot();
 800481e:	f7ff f873 	bl	8003908 <RobotMoveUntilIROvershoot>
			  osDelay(10);
 8004822:	200a      	movs	r0, #10
 8004824:	f007 fa44 	bl	800bcb0 <osDelay>
 8004828:	e093      	b.n	8004952 <runFastestPathTask+0x4b2>
		  }else if (step == 3) {
 800482a:	4b65      	ldr	r3, [pc, #404]	; (80049c0 <runFastestPathTask+0x520>)
 800482c:	f993 3000 	ldrsb.w	r3, [r3]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d105      	bne.n	8004840 <runFastestPathTask+0x3a0>
			  // 4: Turn right by 180 degree
			  FASTESTPATH_TURN_RIGHT_180();
 8004834:	f7fe fefc 	bl	8003630 <FASTESTPATH_TURN_RIGHT_180>
			  osDelay(10);
 8004838:	200a      	movs	r0, #10
 800483a:	f007 fa39 	bl	800bcb0 <osDelay>
 800483e:	e088      	b.n	8004952 <runFastestPathTask+0x4b2>
		  } else if (step == 4){
 8004840:	4b5f      	ldr	r3, [pc, #380]	; (80049c0 <runFastestPathTask+0x520>)
 8004842:	f993 3000 	ldrsb.w	r3, [r3]
 8004846:	2b04      	cmp	r3, #4
 8004848:	d105      	bne.n	8004856 <runFastestPathTask+0x3b6>
			  // 5: move forward until right beside obstacle
			  RobotMoveUntilIRHit();
 800484a:	f7ff f905 	bl	8003a58 <RobotMoveUntilIRHit>
			  osDelay(10);
 800484e:	200a      	movs	r0, #10
 8004850:	f007 fa2e 	bl	800bcb0 <osDelay>
 8004854:	e07d      	b.n	8004952 <runFastestPathTask+0x4b2>
		  }else if (step == 5) {
 8004856:	4b5a      	ldr	r3, [pc, #360]	; (80049c0 <runFastestPathTask+0x520>)
 8004858:	f993 3000 	ldrsb.w	r3, [r3]
 800485c:	2b05      	cmp	r3, #5
 800485e:	d105      	bne.n	800486c <runFastestPathTask+0x3cc>
			  // 6: move forward until IR overshoot
			  RobotMoveUntilIROvershoot();
 8004860:	f7ff f852 	bl	8003908 <RobotMoveUntilIROvershoot>
			  osDelay(10);
 8004864:	200a      	movs	r0, #10
 8004866:	f007 fa23 	bl	800bcb0 <osDelay>
 800486a:	e072      	b.n	8004952 <runFastestPathTask+0x4b2>
		  }else if (step == 6) {
 800486c:	4b54      	ldr	r3, [pc, #336]	; (80049c0 <runFastestPathTask+0x520>)
 800486e:	f993 3000 	ldrsb.w	r3, [r3]
 8004872:	2b06      	cmp	r3, #6
 8004874:	d105      	bne.n	8004882 <runFastestPathTask+0x3e2>
			  // 7: Turn right by 90 degree
			  FASTESTPATH_TURN_RIGHT_90();
 8004876:	f7fe fea1 	bl	80035bc <FASTESTPATH_TURN_RIGHT_90>
			  osDelay(10);
 800487a:	200a      	movs	r0, #10
 800487c:	f007 fa18 	bl	800bcb0 <osDelay>
 8004880:	e067      	b.n	8004952 <runFastestPathTask+0x4b2>
		  }else if (step == 7) {
 8004882:	4b4f      	ldr	r3, [pc, #316]	; (80049c0 <runFastestPathTask+0x520>)
 8004884:	f993 3000 	ldrsb.w	r3, [r3]
 8004888:	2b07      	cmp	r3, #7
 800488a:	d105      	bne.n	8004898 <runFastestPathTask+0x3f8>
			  // 8: move forward until IR overshoot
			  RobotMoveUntilIROvershoot();
 800488c:	f7ff f83c 	bl	8003908 <RobotMoveUntilIROvershoot>
			  osDelay(10);
 8004890:	200a      	movs	r0, #10
 8004892:	f007 fa0d 	bl	800bcb0 <osDelay>
 8004896:	e05c      	b.n	8004952 <runFastestPathTask+0x4b2>
		  }else if (step == 8) {
 8004898:	4b49      	ldr	r3, [pc, #292]	; (80049c0 <runFastestPathTask+0x520>)
 800489a:	f993 3000 	ldrsb.w	r3, [r3]
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d11d      	bne.n	80048de <runFastestPathTask+0x43e>
			  // 9: turn right by angle_right
			  __SET_SERVO_TURN_MAX(&htim1, 1);
 80048a2:	4b3e      	ldr	r3, [pc, #248]	; (800499c <runFastestPathTask+0x4fc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2273      	movs	r2, #115	; 0x73
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40
 80048aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80048ae:	f001 ff25 	bl	80066fc <HAL_Delay>
			  __SET_MOTOR_DUTY(&htim8, 2000, 1000);
 80048b2:	4b39      	ldr	r3, [pc, #228]	; (8004998 <runFastestPathTask+0x4f8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80048ba:	635a      	str	r2, [r3, #52]	; 0x34
 80048bc:	4b36      	ldr	r3, [pc, #216]	; (8004998 <runFastestPathTask+0x4f8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
			  targetAngle = angle_right *-1;
 80048c6:	4b3b      	ldr	r3, [pc, #236]	; (80049b4 <runFastestPathTask+0x514>)
 80048c8:	edd3 7a00 	vldr	s15, [r3]
 80048cc:	eef1 7a67 	vneg.f32	s15, s15
 80048d0:	4b3c      	ldr	r3, [pc, #240]	; (80049c4 <runFastestPathTask+0x524>)
 80048d2:	edc3 7a00 	vstr	s15, [r3]
			  RobotTurn(&targetAngle);
 80048d6:	483b      	ldr	r0, [pc, #236]	; (80049c4 <runFastestPathTask+0x524>)
 80048d8:	f7fe fd1e 	bl	8003318 <RobotTurn>
 80048dc:	e039      	b.n	8004952 <runFastestPathTask+0x4b2>
		  }else if (step == 9) {
 80048de:	4b38      	ldr	r3, [pc, #224]	; (80049c0 <runFastestPathTask+0x520>)
 80048e0:	f993 3000 	ldrsb.w	r3, [r3]
 80048e4:	2b09      	cmp	r3, #9
 80048e6:	d109      	bne.n	80048fc <runFastestPathTask+0x45c>
			  //10: move until center of the original path
			  targetDist = x;
 80048e8:	4b34      	ldr	r3, [pc, #208]	; (80049bc <runFastestPathTask+0x51c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a36      	ldr	r2, [pc, #216]	; (80049c8 <runFastestPathTask+0x528>)
 80048ee:	6013      	str	r3, [r2, #0]
			  RobotMoveDist(&targetDist, 1, SPEED_MODE_T);
 80048f0:	2200      	movs	r2, #0
 80048f2:	2101      	movs	r1, #1
 80048f4:	4834      	ldr	r0, [pc, #208]	; (80049c8 <runFastestPathTask+0x528>)
 80048f6:	f7fe f8ab 	bl	8002a50 <RobotMoveDist>
 80048fa:	e02a      	b.n	8004952 <runFastestPathTask+0x4b2>
		  }else if (step == 10) {
 80048fc:	4b30      	ldr	r3, [pc, #192]	; (80049c0 <runFastestPathTask+0x520>)
 80048fe:	f993 3000 	ldrsb.w	r3, [r3]
 8004902:	2b0a      	cmp	r3, #10
 8004904:	d119      	bne.n	800493a <runFastestPathTask+0x49a>
			  //11: turn left to face the carpark
			  __SET_SERVO_TURN_MAX(&htim1, 0);
 8004906:	4b25      	ldr	r3, [pc, #148]	; (800499c <runFastestPathTask+0x4fc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2232      	movs	r2, #50	; 0x32
 800490c:	641a      	str	r2, [r3, #64]	; 0x40
 800490e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004912:	f001 fef3 	bl	80066fc <HAL_Delay>
			  __SET_MOTOR_DUTY(&htim8, 1000, 2000);
 8004916:	4b20      	ldr	r3, [pc, #128]	; (8004998 <runFastestPathTask+0x4f8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800491e:	635a      	str	r2, [r3, #52]	; 0x34
 8004920:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <runFastestPathTask+0x4f8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004928:	639a      	str	r2, [r3, #56]	; 0x38
			  targetAngle = angle_right;
 800492a:	4b22      	ldr	r3, [pc, #136]	; (80049b4 <runFastestPathTask+0x514>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a25      	ldr	r2, [pc, #148]	; (80049c4 <runFastestPathTask+0x524>)
 8004930:	6013      	str	r3, [r2, #0]
			  RobotTurn(&targetAngle);
 8004932:	4824      	ldr	r0, [pc, #144]	; (80049c4 <runFastestPathTask+0x524>)
 8004934:	f7fe fcf0 	bl	8003318 <RobotTurn>
 8004938:	e00b      	b.n	8004952 <runFastestPathTask+0x4b2>
		  } else if (step == 11) {
 800493a:	4b21      	ldr	r3, [pc, #132]	; (80049c0 <runFastestPathTask+0x520>)
 800493c:	f993 3000 	ldrsb.w	r3, [r3]
 8004940:	2b0b      	cmp	r3, #11
 8004942:	d106      	bne.n	8004952 <runFastestPathTask+0x4b2>
			  //12: back to the carpark
			  targetDist = 15;
 8004944:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <runFastestPathTask+0x528>)
 8004946:	4a21      	ldr	r2, [pc, #132]	; (80049cc <runFastestPathTask+0x52c>)
 8004948:	601a      	str	r2, [r3, #0]
			  RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 800494a:	2102      	movs	r1, #2
 800494c:	481e      	ldr	r0, [pc, #120]	; (80049c8 <runFastestPathTask+0x528>)
 800494e:	f7fe fa03 	bl	8002d58 <RobotMoveDistObstacle>
		  }

		  clickOnce = 0;
 8004952:	4b1f      	ldr	r3, [pc, #124]	; (80049d0 <runFastestPathTask+0x530>)
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8004958:	4b1e      	ldr	r3, [pc, #120]	; (80049d4 <runFastestPathTask+0x534>)
 800495a:	781a      	ldrb	r2, [r3, #0]
 800495c:	4b1e      	ldr	r3, [pc, #120]	; (80049d8 <runFastestPathTask+0x538>)
 800495e:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8004960:	4b1c      	ldr	r3, [pc, #112]	; (80049d4 <runFastestPathTask+0x534>)
 8004962:	220b      	movs	r2, #11
 8004964:	701a      	strb	r2, [r3, #0]
		  __CLEAR_CURCMD(curCmd);
 8004966:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <runFastestPathTask+0x53c>)
 8004968:	2264      	movs	r2, #100	; 0x64
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <runFastestPathTask+0x53c>)
 800496e:	2200      	movs	r2, #0
 8004970:	805a      	strh	r2, [r3, #2]
		  __ACK_TASK_DONE(&huart3, rxMsg);
 8004972:	4a1b      	ldr	r2, [pc, #108]	; (80049e0 <runFastestPathTask+0x540>)
 8004974:	210f      	movs	r1, #15
 8004976:	481b      	ldr	r0, [pc, #108]	; (80049e4 <runFastestPathTask+0x544>)
 8004978:	f00a f8ee 	bl	800eb58 <sniprintf>
 800497c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004980:	2206      	movs	r2, #6
 8004982:	4919      	ldr	r1, [pc, #100]	; (80049e8 <runFastestPathTask+0x548>)
 8004984:	4819      	ldr	r0, [pc, #100]	; (80049ec <runFastestPathTask+0x54c>)
 8004986:	f006 f85c 	bl	800aa42 <HAL_UART_Transmit>
	  if (curTask != TASK_FASTESTPATH) osDelay(1000);
 800498a:	e58f      	b.n	80044ac <runFastestPathTask+0xc>
 800498c:	f3af 8000 	nop.w
 8004990:	54524550 	.word	0x54524550
 8004994:	400921fb 	.word	0x400921fb
 8004998:	200003c0 	.word	0x200003c0
 800499c:	200002a0 	.word	0x200002a0
 80049a0:	20000564 	.word	0x20000564
 80049a4:	40668000 	.word	0x40668000
 80049a8:	2000055c 	.word	0x2000055c
 80049ac:	42700000 	.word	0x42700000
 80049b0:	43340000 	.word	0x43340000
 80049b4:	20000568 	.word	0x20000568
 80049b8:	44610000 	.word	0x44610000
 80049bc:	20000560 	.word	0x20000560
 80049c0:	2000057c 	.word	0x2000057c
 80049c4:	200004e8 	.word	0x200004e8
 80049c8:	200004fc 	.word	0x200004fc
 80049cc:	41700000 	.word	0x41700000
 80049d0:	20000578 	.word	0x20000578
 80049d4:	20000134 	.word	0x20000134
 80049d8:	20000135 	.word	0x20000135
 80049dc:	200004c0 	.word	0x200004c0
 80049e0:	08010218 	.word	0x08010218
 80049e4:	200004c4 	.word	0x200004c4
 80049e8:	08010220 	.word	0x08010220
 80049ec:	20000408 	.word	0x20000408

080049f0 <runBuzzerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBuzzerTask */
void runBuzzerTask(void *argument)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBuzzerTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_BUZZER) osDelay(1000);
 80049f8:	4b31      	ldr	r3, [pc, #196]	; (8004ac0 <runBuzzerTask+0xd0>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b0a      	cmp	r3, #10
 80049fe:	d01c      	beq.n	8004a3a <runBuzzerTask+0x4a>
 8004a00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a04:	f007 f954 	bl	800bcb0 <osDelay>
 8004a08:	e7f6      	b.n	80049f8 <runBuzzerTask+0x8>
	  else {
		  while (curCmd.val > 0) {
			  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a10:	482c      	ldr	r0, [pc, #176]	; (8004ac4 <runBuzzerTask+0xd4>)
 8004a12:	f002 fdd7 	bl	80075c4 <HAL_GPIO_WritePin>
			  osDelay(100);
 8004a16:	2064      	movs	r0, #100	; 0x64
 8004a18:	f007 f94a 	bl	800bcb0 <osDelay>
			  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a22:	4828      	ldr	r0, [pc, #160]	; (8004ac4 <runBuzzerTask+0xd4>)
 8004a24:	f002 fdce 	bl	80075c4 <HAL_GPIO_WritePin>
			  osDelay(100);
 8004a28:	2064      	movs	r0, #100	; 0x64
 8004a2a:	f007 f941 	bl	800bcb0 <osDelay>
			  curCmd.val--;
 8004a2e:	4b26      	ldr	r3, [pc, #152]	; (8004ac8 <runBuzzerTask+0xd8>)
 8004a30:	885b      	ldrh	r3, [r3, #2]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	4b24      	ldr	r3, [pc, #144]	; (8004ac8 <runBuzzerTask+0xd8>)
 8004a38:	805a      	strh	r2, [r3, #2]
		  while (curCmd.val > 0) {
 8004a3a:	4b23      	ldr	r3, [pc, #140]	; (8004ac8 <runBuzzerTask+0xd8>)
 8004a3c:	885b      	ldrh	r3, [r3, #2]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e3      	bne.n	8004a0a <runBuzzerTask+0x1a>
		  }
		  prevTask = curTask;
 8004a42:	4b1f      	ldr	r3, [pc, #124]	; (8004ac0 <runBuzzerTask+0xd0>)
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	4b21      	ldr	r3, [pc, #132]	; (8004acc <runBuzzerTask+0xdc>)
 8004a48:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8004a4a:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <runBuzzerTask+0xd0>)
 8004a4c:	220b      	movs	r2, #11
 8004a4e:	701a      	strb	r2, [r3, #0]
		  clickOnce = 0;
 8004a50:	4b1f      	ldr	r3, [pc, #124]	; (8004ad0 <runBuzzerTask+0xe0>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]


		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8004a56:	4b1f      	ldr	r3, [pc, #124]	; (8004ad4 <runBuzzerTask+0xe4>)
 8004a58:	781a      	ldrb	r2, [r3, #0]
 8004a5a:	4b1e      	ldr	r3, [pc, #120]	; (8004ad4 <runBuzzerTask+0xe4>)
 8004a5c:	785b      	ldrb	r3, [r3, #1]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d112      	bne.n	8004a88 <runBuzzerTask+0x98>
				__CLEAR_CURCMD(curCmd);
 8004a62:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <runBuzzerTask+0xd8>)
 8004a64:	2264      	movs	r2, #100	; 0x64
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	4b17      	ldr	r3, [pc, #92]	; (8004ac8 <runBuzzerTask+0xd8>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8004a6e:	4a1a      	ldr	r2, [pc, #104]	; (8004ad8 <runBuzzerTask+0xe8>)
 8004a70:	210f      	movs	r1, #15
 8004a72:	481a      	ldr	r0, [pc, #104]	; (8004adc <runBuzzerTask+0xec>)
 8004a74:	f00a f870 	bl	800eb58 <sniprintf>
 8004a78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a7c:	2206      	movs	r2, #6
 8004a7e:	4918      	ldr	r1, [pc, #96]	; (8004ae0 <runBuzzerTask+0xf0>)
 8004a80:	4818      	ldr	r0, [pc, #96]	; (8004ae4 <runBuzzerTask+0xf4>)
 8004a82:	f005 ffde 	bl	800aa42 <HAL_UART_Transmit>
 8004a86:	e7b7      	b.n	80049f8 <runBuzzerTask+0x8>
			} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004a88:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <runBuzzerTask+0xe4>)
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	4a0e      	ldr	r2, [pc, #56]	; (8004ac8 <runBuzzerTask+0xd8>)
 8004a8e:	4911      	ldr	r1, [pc, #68]	; (8004ad4 <runBuzzerTask+0xe4>)
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <runBuzzerTask+0xe4>)
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	4a0d      	ldr	r2, [pc, #52]	; (8004ad4 <runBuzzerTask+0xe4>)
 8004aa0:	7892      	ldrb	r2, [r2, #2]
 8004aa2:	fb93 f1f2 	sdiv	r1, r3, r2
 8004aa6:	fb01 f202 	mul.w	r2, r1, r2
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <runBuzzerTask+0xe4>)
 8004ab0:	705a      	strb	r2, [r3, #1]
 8004ab2:	4a0d      	ldr	r2, [pc, #52]	; (8004ae8 <runBuzzerTask+0xf8>)
 8004ab4:	210f      	movs	r1, #15
 8004ab6:	4809      	ldr	r0, [pc, #36]	; (8004adc <runBuzzerTask+0xec>)
 8004ab8:	f00a f84e 	bl	800eb58 <sniprintf>
	  if (curTask != TASK_BUZZER) osDelay(1000);
 8004abc:	e79c      	b.n	80049f8 <runBuzzerTask+0x8>
 8004abe:	bf00      	nop
 8004ac0:	20000134 	.word	0x20000134
 8004ac4:	40020400 	.word	0x40020400
 8004ac8:	200004c0 	.word	0x200004c0
 8004acc:	20000135 	.word	0x20000135
 8004ad0:	20000578 	.word	0x20000578
 8004ad4:	2000048c 	.word	0x2000048c
 8004ad8:	08010218 	.word	0x08010218
 8004adc:	200004c4 	.word	0x200004c4
 8004ae0:	08010220 	.word	0x08010220
 8004ae4:	20000408 	.word	0x20000408
 8004ae8:	08010228 	.word	0x08010228

08004aec <runFLTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFLTask */
void runFLTask(void *argument)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFLTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_FL) osDelay(1000);
 8004af4:	4b9c      	ldr	r3, [pc, #624]	; (8004d68 <runFLTask+0x27c>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d004      	beq.n	8004b06 <runFLTask+0x1a>
 8004afc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b00:	f007 f8d6 	bl	800bcb0 <osDelay>
 8004b04:	e7f6      	b.n	8004af4 <runFLTask+0x8>
	  else {
//		  osDelay(3000); // video demo only
		  switch(curCmd.val) {
 8004b06:	4b99      	ldr	r3, [pc, #612]	; (8004d6c <runFLTask+0x280>)
 8004b08:	885b      	ldrh	r3, [r3, #2]
 8004b0a:	2b14      	cmp	r3, #20
 8004b0c:	f000 8081 	beq.w	8004c12 <runFLTask+0x126>
 8004b10:	2b1e      	cmp	r3, #30
 8004b12:	f040 8106 	bne.w	8004d22 <runFLTask+0x236>
		  case 30: // FL30 (4x2)
			  __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 8004b16:	4b96      	ldr	r3, [pc, #600]	; (8004d70 <runFLTask+0x284>)
 8004b18:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8004b1c:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8004d74 <runFLTask+0x288>
 8004b20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b28:	dd01      	ble.n	8004b2e <runFLTask+0x42>
 8004b2a:	2373      	movs	r3, #115	; 0x73
 8004b2c:	e012      	b.n	8004b54 <runFLTask+0x68>
 8004b2e:	4b90      	ldr	r3, [pc, #576]	; (8004d70 <runFLTask+0x284>)
 8004b30:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8004b34:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8004d78 <runFLTask+0x28c>
 8004b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b40:	d501      	bpl.n	8004b46 <runFLTask+0x5a>
 8004b42:	2332      	movs	r3, #50	; 0x32
 8004b44:	e006      	b.n	8004b54 <runFLTask+0x68>
 8004b46:	4b8a      	ldr	r3, [pc, #552]	; (8004d70 <runFLTask+0x284>)
 8004b48:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8004b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b50:	ee17 3a90 	vmov	r3, s15
 8004b54:	4a89      	ldr	r2, [pc, #548]	; (8004d7c <runFLTask+0x290>)
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	6413      	str	r3, [r2, #64]	; 0x40
 8004b5a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004b5e:	f001 fdcd 	bl	80066fc <HAL_Delay>
 8004b62:	4b83      	ldr	r3, [pc, #524]	; (8004d70 <runFLTask+0x284>)
 8004b64:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004b68:	4a85      	ldr	r2, [pc, #532]	; (8004d80 <runFLTask+0x294>)
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	4b80      	ldr	r3, [pc, #512]	; (8004d70 <runFLTask+0x284>)
 8004b6e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bf0c      	ite	eq
 8004b76:	2301      	moveq	r3, #1
 8004b78:	2300      	movne	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	2104      	movs	r1, #4
 8004b80:	4880      	ldr	r0, [pc, #512]	; (8004d84 <runFLTask+0x298>)
 8004b82:	f002 fd1f 	bl	80075c4 <HAL_GPIO_WritePin>
 8004b86:	4b7a      	ldr	r3, [pc, #488]	; (8004d70 <runFLTask+0x284>)
 8004b88:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bf14      	ite	ne
 8004b90:	2301      	movne	r3, #1
 8004b92:	2300      	moveq	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	2108      	movs	r1, #8
 8004b9a:	487a      	ldr	r0, [pc, #488]	; (8004d84 <runFLTask+0x298>)
 8004b9c:	f002 fd12 	bl	80075c4 <HAL_GPIO_WritePin>
 8004ba0:	4b73      	ldr	r3, [pc, #460]	; (8004d70 <runFLTask+0x284>)
 8004ba2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	bf0c      	ite	eq
 8004baa:	2301      	moveq	r3, #1
 8004bac:	2300      	movne	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	2120      	movs	r1, #32
 8004bb4:	4873      	ldr	r0, [pc, #460]	; (8004d84 <runFLTask+0x298>)
 8004bb6:	f002 fd05 	bl	80075c4 <HAL_GPIO_WritePin>
 8004bba:	4b6d      	ldr	r3, [pc, #436]	; (8004d70 <runFLTask+0x284>)
 8004bbc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	bf14      	ite	ne
 8004bc4:	2301      	movne	r3, #1
 8004bc6:	2300      	moveq	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	461a      	mov	r2, r3
 8004bcc:	2110      	movs	r1, #16
 8004bce:	486d      	ldr	r0, [pc, #436]	; (8004d84 <runFLTask+0x298>)
 8004bd0:	f002 fcf8 	bl	80075c4 <HAL_GPIO_WritePin>
 8004bd4:	4b66      	ldr	r3, [pc, #408]	; (8004d70 <runFLTask+0x284>)
 8004bd6:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 8004bda:	4b6b      	ldr	r3, [pc, #428]	; (8004d88 <runFLTask+0x29c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	635a      	str	r2, [r3, #52]	; 0x34
 8004be0:	4b63      	ldr	r3, [pc, #396]	; (8004d70 <runFLTask+0x284>)
 8004be2:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 8004be6:	4b68      	ldr	r3, [pc, #416]	; (8004d88 <runFLTask+0x29c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8004bec:	4864      	ldr	r0, [pc, #400]	; (8004d80 <runFLTask+0x294>)
 8004bee:	f7fe fb93 	bl	8003318 <RobotTurn>
			  osDelay(10);
 8004bf2:	200a      	movs	r0, #10
 8004bf4:	f007 f85c 	bl	800bcb0 <osDelay>
			  targetDist = 4;
 8004bf8:	4b64      	ldr	r3, [pc, #400]	; (8004d8c <runFLTask+0x2a0>)
 8004bfa:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004bfe:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004c00:	2200      	movs	r2, #0
 8004c02:	2100      	movs	r1, #0
 8004c04:	4861      	ldr	r0, [pc, #388]	; (8004d8c <runFLTask+0x2a0>)
 8004c06:	f7fd ff23 	bl	8002a50 <RobotMoveDist>
			  osDelay(10);
 8004c0a:	200a      	movs	r0, #10
 8004c0c:	f007 f850 	bl	800bcb0 <osDelay>
			  break;
 8004c10:	e126      	b.n	8004e60 <runFLTask+0x374>
		  case 20: // FL20 (outdoor 3x1)
			  targetDist = 8.5;
 8004c12:	4b5e      	ldr	r3, [pc, #376]	; (8004d8c <runFLTask+0x2a0>)
 8004c14:	4a5e      	ldr	r2, [pc, #376]	; (8004d90 <runFLTask+0x2a4>)
 8004c16:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	485b      	ldr	r0, [pc, #364]	; (8004d8c <runFLTask+0x2a0>)
 8004c1e:	f7fd ff17 	bl	8002a50 <RobotMoveDist>
			  osDelay(10);
 8004c22:	200a      	movs	r0, #10
 8004c24:	f007 f844 	bl	800bcb0 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_FL20], &htim8, &htim1, targetAngle);
 8004c28:	4b51      	ldr	r3, [pc, #324]	; (8004d70 <runFLTask+0x284>)
 8004c2a:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004c2e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8004d74 <runFLTask+0x288>
 8004c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3a:	dd01      	ble.n	8004c40 <runFLTask+0x154>
 8004c3c:	2373      	movs	r3, #115	; 0x73
 8004c3e:	e012      	b.n	8004c66 <runFLTask+0x17a>
 8004c40:	4b4b      	ldr	r3, [pc, #300]	; (8004d70 <runFLTask+0x284>)
 8004c42:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004c46:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8004d78 <runFLTask+0x28c>
 8004c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c52:	d501      	bpl.n	8004c58 <runFLTask+0x16c>
 8004c54:	2332      	movs	r3, #50	; 0x32
 8004c56:	e006      	b.n	8004c66 <runFLTask+0x17a>
 8004c58:	4b45      	ldr	r3, [pc, #276]	; (8004d70 <runFLTask+0x284>)
 8004c5a:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c62:	ee17 3a90 	vmov	r3, s15
 8004c66:	4a45      	ldr	r2, [pc, #276]	; (8004d7c <runFLTask+0x290>)
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c6c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004c70:	f001 fd44 	bl	80066fc <HAL_Delay>
 8004c74:	4b3e      	ldr	r3, [pc, #248]	; (8004d70 <runFLTask+0x284>)
 8004c76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004c7a:	4a41      	ldr	r2, [pc, #260]	; (8004d80 <runFLTask+0x294>)
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	4b3c      	ldr	r3, [pc, #240]	; (8004d70 <runFLTask+0x284>)
 8004c80:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	bf0c      	ite	eq
 8004c88:	2301      	moveq	r3, #1
 8004c8a:	2300      	movne	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	2104      	movs	r1, #4
 8004c92:	483c      	ldr	r0, [pc, #240]	; (8004d84 <runFLTask+0x298>)
 8004c94:	f002 fc96 	bl	80075c4 <HAL_GPIO_WritePin>
 8004c98:	4b35      	ldr	r3, [pc, #212]	; (8004d70 <runFLTask+0x284>)
 8004c9a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	bf14      	ite	ne
 8004ca2:	2301      	movne	r3, #1
 8004ca4:	2300      	moveq	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	2108      	movs	r1, #8
 8004cac:	4835      	ldr	r0, [pc, #212]	; (8004d84 <runFLTask+0x298>)
 8004cae:	f002 fc89 	bl	80075c4 <HAL_GPIO_WritePin>
 8004cb2:	4b2f      	ldr	r3, [pc, #188]	; (8004d70 <runFLTask+0x284>)
 8004cb4:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	bf0c      	ite	eq
 8004cbc:	2301      	moveq	r3, #1
 8004cbe:	2300      	movne	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	2120      	movs	r1, #32
 8004cc6:	482f      	ldr	r0, [pc, #188]	; (8004d84 <runFLTask+0x298>)
 8004cc8:	f002 fc7c 	bl	80075c4 <HAL_GPIO_WritePin>
 8004ccc:	4b28      	ldr	r3, [pc, #160]	; (8004d70 <runFLTask+0x284>)
 8004cce:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	bf14      	ite	ne
 8004cd6:	2301      	movne	r3, #1
 8004cd8:	2300      	moveq	r3, #0
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	461a      	mov	r2, r3
 8004cde:	2110      	movs	r1, #16
 8004ce0:	4828      	ldr	r0, [pc, #160]	; (8004d84 <runFLTask+0x298>)
 8004ce2:	f002 fc6f 	bl	80075c4 <HAL_GPIO_WritePin>
 8004ce6:	4b22      	ldr	r3, [pc, #136]	; (8004d70 <runFLTask+0x284>)
 8004ce8:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 8004cec:	4b26      	ldr	r3, [pc, #152]	; (8004d88 <runFLTask+0x29c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	635a      	str	r2, [r3, #52]	; 0x34
 8004cf2:	4b1f      	ldr	r3, [pc, #124]	; (8004d70 <runFLTask+0x284>)
 8004cf4:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 8004cf8:	4b23      	ldr	r3, [pc, #140]	; (8004d88 <runFLTask+0x29c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8004cfe:	4820      	ldr	r0, [pc, #128]	; (8004d80 <runFLTask+0x294>)
 8004d00:	f7fe fb0a 	bl	8003318 <RobotTurn>
			  osDelay(10);
 8004d04:	200a      	movs	r0, #10
 8004d06:	f006 ffd3 	bl	800bcb0 <osDelay>
			  targetDist = 5.875;
 8004d0a:	4b20      	ldr	r3, [pc, #128]	; (8004d8c <runFLTask+0x2a0>)
 8004d0c:	4a21      	ldr	r2, [pc, #132]	; (8004d94 <runFLTask+0x2a8>)
 8004d0e:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004d10:	2200      	movs	r2, #0
 8004d12:	2100      	movs	r1, #0
 8004d14:	481d      	ldr	r0, [pc, #116]	; (8004d8c <runFLTask+0x2a0>)
 8004d16:	f7fd fe9b 	bl	8002a50 <RobotMoveDist>
			  osDelay(20);
 8004d1a:	2014      	movs	r0, #20
 8004d1c:	f006 ffc8 	bl	800bcb0 <osDelay>
			  break;
 8004d20:	e09e      	b.n	8004e60 <runFLTask+0x374>
		  default: // FL00 (indoor 3x1)
			  targetDist = 8.5;
 8004d22:	4b1a      	ldr	r3, [pc, #104]	; (8004d8c <runFLTask+0x2a0>)
 8004d24:	4a1a      	ldr	r2, [pc, #104]	; (8004d90 <runFLTask+0x2a4>)
 8004d26:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	4817      	ldr	r0, [pc, #92]	; (8004d8c <runFLTask+0x2a0>)
 8004d2e:	f7fd fe8f 	bl	8002a50 <RobotMoveDist>
			  osDelay(10);
 8004d32:	200a      	movs	r0, #10
 8004d34:	f006 ffbc 	bl	800bcb0 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_FL00], &htim8, &htim1, targetAngle);
 8004d38:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <runFLTask+0x284>)
 8004d3a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004d3e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004d74 <runFLTask+0x288>
 8004d42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4a:	dd01      	ble.n	8004d50 <runFLTask+0x264>
 8004d4c:	2373      	movs	r3, #115	; 0x73
 8004d4e:	e02a      	b.n	8004da6 <runFLTask+0x2ba>
 8004d50:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <runFLTask+0x284>)
 8004d52:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004d56:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004d78 <runFLTask+0x28c>
 8004d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d62:	d519      	bpl.n	8004d98 <runFLTask+0x2ac>
 8004d64:	2332      	movs	r3, #50	; 0x32
 8004d66:	e01e      	b.n	8004da6 <runFLTask+0x2ba>
 8004d68:	20000134 	.word	0x20000134
 8004d6c:	200004c0 	.word	0x200004c0
 8004d70:	20000004 	.word	0x20000004
 8004d74:	42e60000 	.word	0x42e60000
 8004d78:	42480000 	.word	0x42480000
 8004d7c:	200002a0 	.word	0x200002a0
 8004d80:	200004e8 	.word	0x200004e8
 8004d84:	40020000 	.word	0x40020000
 8004d88:	200003c0 	.word	0x200003c0
 8004d8c:	200004fc 	.word	0x200004fc
 8004d90:	41080000 	.word	0x41080000
 8004d94:	40bc0000 	.word	0x40bc0000
 8004d98:	4b50      	ldr	r3, [pc, #320]	; (8004edc <runFLTask+0x3f0>)
 8004d9a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004da2:	ee17 3a90 	vmov	r3, s15
 8004da6:	4a4e      	ldr	r2, [pc, #312]	; (8004ee0 <runFLTask+0x3f4>)
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	6413      	str	r3, [r2, #64]	; 0x40
 8004dac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004db0:	f001 fca4 	bl	80066fc <HAL_Delay>
 8004db4:	4b49      	ldr	r3, [pc, #292]	; (8004edc <runFLTask+0x3f0>)
 8004db6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004db8:	4a4a      	ldr	r2, [pc, #296]	; (8004ee4 <runFLTask+0x3f8>)
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	4b47      	ldr	r3, [pc, #284]	; (8004edc <runFLTask+0x3f0>)
 8004dbe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	bf0c      	ite	eq
 8004dc6:	2301      	moveq	r3, #1
 8004dc8:	2300      	movne	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	2104      	movs	r1, #4
 8004dd0:	4845      	ldr	r0, [pc, #276]	; (8004ee8 <runFLTask+0x3fc>)
 8004dd2:	f002 fbf7 	bl	80075c4 <HAL_GPIO_WritePin>
 8004dd6:	4b41      	ldr	r3, [pc, #260]	; (8004edc <runFLTask+0x3f0>)
 8004dd8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bf14      	ite	ne
 8004de0:	2301      	movne	r3, #1
 8004de2:	2300      	moveq	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	461a      	mov	r2, r3
 8004de8:	2108      	movs	r1, #8
 8004dea:	483f      	ldr	r0, [pc, #252]	; (8004ee8 <runFLTask+0x3fc>)
 8004dec:	f002 fbea 	bl	80075c4 <HAL_GPIO_WritePin>
 8004df0:	4b3a      	ldr	r3, [pc, #232]	; (8004edc <runFLTask+0x3f0>)
 8004df2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	bf0c      	ite	eq
 8004dfa:	2301      	moveq	r3, #1
 8004dfc:	2300      	movne	r3, #0
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	461a      	mov	r2, r3
 8004e02:	2120      	movs	r1, #32
 8004e04:	4838      	ldr	r0, [pc, #224]	; (8004ee8 <runFLTask+0x3fc>)
 8004e06:	f002 fbdd 	bl	80075c4 <HAL_GPIO_WritePin>
 8004e0a:	4b34      	ldr	r3, [pc, #208]	; (8004edc <runFLTask+0x3f0>)
 8004e0c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bf14      	ite	ne
 8004e14:	2301      	movne	r3, #1
 8004e16:	2300      	moveq	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	2110      	movs	r1, #16
 8004e1e:	4832      	ldr	r0, [pc, #200]	; (8004ee8 <runFLTask+0x3fc>)
 8004e20:	f002 fbd0 	bl	80075c4 <HAL_GPIO_WritePin>
 8004e24:	4b2d      	ldr	r3, [pc, #180]	; (8004edc <runFLTask+0x3f0>)
 8004e26:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 8004e2a:	4b30      	ldr	r3, [pc, #192]	; (8004eec <runFLTask+0x400>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	635a      	str	r2, [r3, #52]	; 0x34
 8004e30:	4b2a      	ldr	r3, [pc, #168]	; (8004edc <runFLTask+0x3f0>)
 8004e32:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 8004e36:	4b2d      	ldr	r3, [pc, #180]	; (8004eec <runFLTask+0x400>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8004e3c:	4829      	ldr	r0, [pc, #164]	; (8004ee4 <runFLTask+0x3f8>)
 8004e3e:	f7fe fa6b 	bl	8003318 <RobotTurn>
			  osDelay(10);
 8004e42:	200a      	movs	r0, #10
 8004e44:	f006 ff34 	bl	800bcb0 <osDelay>
			  targetDist = 5.75;
 8004e48:	4b29      	ldr	r3, [pc, #164]	; (8004ef0 <runFLTask+0x404>)
 8004e4a:	4a2a      	ldr	r2, [pc, #168]	; (8004ef4 <runFLTask+0x408>)
 8004e4c:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2100      	movs	r1, #0
 8004e52:	4827      	ldr	r0, [pc, #156]	; (8004ef0 <runFLTask+0x404>)
 8004e54:	f7fd fdfc 	bl	8002a50 <RobotMoveDist>
			  osDelay(10);
 8004e58:	200a      	movs	r0, #10
 8004e5a:	f006 ff29 	bl	800bcb0 <osDelay>
			  break;
 8004e5e:	bf00      	nop
		  }


		  clickOnce = 0;
 8004e60:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <runFLTask+0x40c>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8004e66:	4b25      	ldr	r3, [pc, #148]	; (8004efc <runFLTask+0x410>)
 8004e68:	781a      	ldrb	r2, [r3, #0]
 8004e6a:	4b25      	ldr	r3, [pc, #148]	; (8004f00 <runFLTask+0x414>)
 8004e6c:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8004e6e:	4b23      	ldr	r3, [pc, #140]	; (8004efc <runFLTask+0x410>)
 8004e70:	220b      	movs	r2, #11
 8004e72:	701a      	strb	r2, [r3, #0]

		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8004e74:	4b23      	ldr	r3, [pc, #140]	; (8004f04 <runFLTask+0x418>)
 8004e76:	781a      	ldrb	r2, [r3, #0]
 8004e78:	4b22      	ldr	r3, [pc, #136]	; (8004f04 <runFLTask+0x418>)
 8004e7a:	785b      	ldrb	r3, [r3, #1]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d112      	bne.n	8004ea6 <runFLTask+0x3ba>
				__CLEAR_CURCMD(curCmd);
 8004e80:	4b21      	ldr	r3, [pc, #132]	; (8004f08 <runFLTask+0x41c>)
 8004e82:	2264      	movs	r2, #100	; 0x64
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	4b20      	ldr	r3, [pc, #128]	; (8004f08 <runFLTask+0x41c>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8004e8c:	4a1f      	ldr	r2, [pc, #124]	; (8004f0c <runFLTask+0x420>)
 8004e8e:	210f      	movs	r1, #15
 8004e90:	481f      	ldr	r0, [pc, #124]	; (8004f10 <runFLTask+0x424>)
 8004e92:	f009 fe61 	bl	800eb58 <sniprintf>
 8004e96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e9a:	2206      	movs	r2, #6
 8004e9c:	491d      	ldr	r1, [pc, #116]	; (8004f14 <runFLTask+0x428>)
 8004e9e:	481e      	ldr	r0, [pc, #120]	; (8004f18 <runFLTask+0x42c>)
 8004ea0:	f005 fdcf 	bl	800aa42 <HAL_UART_Transmit>
 8004ea4:	e626      	b.n	8004af4 <runFLTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004ea6:	4b17      	ldr	r3, [pc, #92]	; (8004f04 <runFLTask+0x418>)
 8004ea8:	785b      	ldrb	r3, [r3, #1]
 8004eaa:	4a17      	ldr	r2, [pc, #92]	; (8004f08 <runFLTask+0x41c>)
 8004eac:	4915      	ldr	r1, [pc, #84]	; (8004f04 <runFLTask+0x418>)
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	4b13      	ldr	r3, [pc, #76]	; (8004f04 <runFLTask+0x418>)
 8004eb8:	785b      	ldrb	r3, [r3, #1]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	4a11      	ldr	r2, [pc, #68]	; (8004f04 <runFLTask+0x418>)
 8004ebe:	7892      	ldrb	r2, [r2, #2]
 8004ec0:	fb93 f1f2 	sdiv	r1, r3, r2
 8004ec4:	fb01 f202 	mul.w	r2, r1, r2
 8004ec8:	1a9b      	subs	r3, r3, r2
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <runFLTask+0x418>)
 8004ece:	705a      	strb	r2, [r3, #1]
 8004ed0:	4a12      	ldr	r2, [pc, #72]	; (8004f1c <runFLTask+0x430>)
 8004ed2:	210f      	movs	r1, #15
 8004ed4:	480e      	ldr	r0, [pc, #56]	; (8004f10 <runFLTask+0x424>)
 8004ed6:	f009 fe3f 	bl	800eb58 <sniprintf>
	  if (curTask != TASK_FL) osDelay(1000);
 8004eda:	e60b      	b.n	8004af4 <runFLTask+0x8>
 8004edc:	20000004 	.word	0x20000004
 8004ee0:	200002a0 	.word	0x200002a0
 8004ee4:	200004e8 	.word	0x200004e8
 8004ee8:	40020000 	.word	0x40020000
 8004eec:	200003c0 	.word	0x200003c0
 8004ef0:	200004fc 	.word	0x200004fc
 8004ef4:	40b80000 	.word	0x40b80000
 8004ef8:	20000578 	.word	0x20000578
 8004efc:	20000134 	.word	0x20000134
 8004f00:	20000135 	.word	0x20000135
 8004f04:	2000048c 	.word	0x2000048c
 8004f08:	200004c0 	.word	0x200004c0
 8004f0c:	08010218 	.word	0x08010218
 8004f10:	200004c4 	.word	0x200004c4
 8004f14:	08010220 	.word	0x08010220
 8004f18:	20000408 	.word	0x20000408
 8004f1c:	08010228 	.word	0x08010228

08004f20 <runFRTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFRTask */
void runFRTask(void *argument)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFRTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_FR) osDelay(1000);
 8004f28:	4b9d      	ldr	r3, [pc, #628]	; (80051a0 <runFRTask+0x280>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d004      	beq.n	8004f3a <runFRTask+0x1a>
 8004f30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f34:	f006 febc 	bl	800bcb0 <osDelay>
 8004f38:	e7f6      	b.n	8004f28 <runFRTask+0x8>
	  else {
//		  osDelay(3000); // video demo only
		  switch(curCmd.val) {
 8004f3a:	4b9a      	ldr	r3, [pc, #616]	; (80051a4 <runFRTask+0x284>)
 8004f3c:	885b      	ldrh	r3, [r3, #2]
 8004f3e:	2b14      	cmp	r3, #20
 8004f40:	f000 8081 	beq.w	8005046 <runFRTask+0x126>
 8004f44:	2b1e      	cmp	r3, #30
 8004f46:	f040 8107 	bne.w	8005158 <runFRTask+0x238>
		  case 30: // FR30 (4x2)
			  __SET_CMD_CONFIG(cfgs[CONFIG_FR30], &htim8, &htim1, targetAngle);
 8004f4a:	4b97      	ldr	r3, [pc, #604]	; (80051a8 <runFRTask+0x288>)
 8004f4c:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004f50:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80051ac <runFRTask+0x28c>
 8004f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5c:	dd01      	ble.n	8004f62 <runFRTask+0x42>
 8004f5e:	2373      	movs	r3, #115	; 0x73
 8004f60:	e012      	b.n	8004f88 <runFRTask+0x68>
 8004f62:	4b91      	ldr	r3, [pc, #580]	; (80051a8 <runFRTask+0x288>)
 8004f64:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004f68:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80051b0 <runFRTask+0x290>
 8004f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f74:	d501      	bpl.n	8004f7a <runFRTask+0x5a>
 8004f76:	2332      	movs	r3, #50	; 0x32
 8004f78:	e006      	b.n	8004f88 <runFRTask+0x68>
 8004f7a:	4b8b      	ldr	r3, [pc, #556]	; (80051a8 <runFRTask+0x288>)
 8004f7c:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f84:	ee17 3a90 	vmov	r3, s15
 8004f88:	4a8a      	ldr	r2, [pc, #552]	; (80051b4 <runFRTask+0x294>)
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f8e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004f92:	f001 fbb3 	bl	80066fc <HAL_Delay>
 8004f96:	4b84      	ldr	r3, [pc, #528]	; (80051a8 <runFRTask+0x288>)
 8004f98:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f9c:	4a86      	ldr	r2, [pc, #536]	; (80051b8 <runFRTask+0x298>)
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	4b81      	ldr	r3, [pc, #516]	; (80051a8 <runFRTask+0x288>)
 8004fa2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	bf0c      	ite	eq
 8004faa:	2301      	moveq	r3, #1
 8004fac:	2300      	movne	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	2104      	movs	r1, #4
 8004fb4:	4881      	ldr	r0, [pc, #516]	; (80051bc <runFRTask+0x29c>)
 8004fb6:	f002 fb05 	bl	80075c4 <HAL_GPIO_WritePin>
 8004fba:	4b7b      	ldr	r3, [pc, #492]	; (80051a8 <runFRTask+0x288>)
 8004fbc:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bf14      	ite	ne
 8004fc4:	2301      	movne	r3, #1
 8004fc6:	2300      	moveq	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2108      	movs	r1, #8
 8004fce:	487b      	ldr	r0, [pc, #492]	; (80051bc <runFRTask+0x29c>)
 8004fd0:	f002 faf8 	bl	80075c4 <HAL_GPIO_WritePin>
 8004fd4:	4b74      	ldr	r3, [pc, #464]	; (80051a8 <runFRTask+0x288>)
 8004fd6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	bf0c      	ite	eq
 8004fde:	2301      	moveq	r3, #1
 8004fe0:	2300      	movne	r3, #0
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	2120      	movs	r1, #32
 8004fe8:	4874      	ldr	r0, [pc, #464]	; (80051bc <runFRTask+0x29c>)
 8004fea:	f002 faeb 	bl	80075c4 <HAL_GPIO_WritePin>
 8004fee:	4b6e      	ldr	r3, [pc, #440]	; (80051a8 <runFRTask+0x288>)
 8004ff0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	bf14      	ite	ne
 8004ff8:	2301      	movne	r3, #1
 8004ffa:	2300      	moveq	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	461a      	mov	r2, r3
 8005000:	2110      	movs	r1, #16
 8005002:	486e      	ldr	r0, [pc, #440]	; (80051bc <runFRTask+0x29c>)
 8005004:	f002 fade 	bl	80075c4 <HAL_GPIO_WritePin>
 8005008:	4b67      	ldr	r3, [pc, #412]	; (80051a8 <runFRTask+0x288>)
 800500a:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 800500e:	4b6c      	ldr	r3, [pc, #432]	; (80051c0 <runFRTask+0x2a0>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	635a      	str	r2, [r3, #52]	; 0x34
 8005014:	4b64      	ldr	r3, [pc, #400]	; (80051a8 <runFRTask+0x288>)
 8005016:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 800501a:	4b69      	ldr	r3, [pc, #420]	; (80051c0 <runFRTask+0x2a0>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8005020:	4865      	ldr	r0, [pc, #404]	; (80051b8 <runFRTask+0x298>)
 8005022:	f7fe f979 	bl	8003318 <RobotTurn>
			  osDelay(10);
 8005026:	200a      	movs	r0, #10
 8005028:	f006 fe42 	bl	800bcb0 <osDelay>
			  targetDist = 4;
 800502c:	4b65      	ldr	r3, [pc, #404]	; (80051c4 <runFRTask+0x2a4>)
 800502e:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8005032:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005034:	2200      	movs	r2, #0
 8005036:	2100      	movs	r1, #0
 8005038:	4862      	ldr	r0, [pc, #392]	; (80051c4 <runFRTask+0x2a4>)
 800503a:	f7fd fd09 	bl	8002a50 <RobotMoveDist>
			  osDelay(10);
 800503e:	200a      	movs	r0, #10
 8005040:	f006 fe36 	bl	800bcb0 <osDelay>
			  break;
 8005044:	e129      	b.n	800529a <runFRTask+0x37a>
		  case 20: // FR20 (outdoor 3x1)
			  targetDist = 10.2;
 8005046:	4b5f      	ldr	r3, [pc, #380]	; (80051c4 <runFRTask+0x2a4>)
 8005048:	4a5f      	ldr	r2, [pc, #380]	; (80051c8 <runFRTask+0x2a8>)
 800504a:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800504c:	2200      	movs	r2, #0
 800504e:	2100      	movs	r1, #0
 8005050:	485c      	ldr	r0, [pc, #368]	; (80051c4 <runFRTask+0x2a4>)
 8005052:	f7fd fcfd 	bl	8002a50 <RobotMoveDist>
			  osDelay(10);
 8005056:	200a      	movs	r0, #10
 8005058:	f006 fe2a 	bl	800bcb0 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_FR20], &htim8, &htim1, targetAngle);
 800505c:	4b52      	ldr	r3, [pc, #328]	; (80051a8 <runFRTask+0x288>)
 800505e:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8005062:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80051ac <runFRTask+0x28c>
 8005066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800506a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506e:	dd01      	ble.n	8005074 <runFRTask+0x154>
 8005070:	2373      	movs	r3, #115	; 0x73
 8005072:	e012      	b.n	800509a <runFRTask+0x17a>
 8005074:	4b4c      	ldr	r3, [pc, #304]	; (80051a8 <runFRTask+0x288>)
 8005076:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 800507a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80051b0 <runFRTask+0x290>
 800507e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005086:	d501      	bpl.n	800508c <runFRTask+0x16c>
 8005088:	2332      	movs	r3, #50	; 0x32
 800508a:	e006      	b.n	800509a <runFRTask+0x17a>
 800508c:	4b46      	ldr	r3, [pc, #280]	; (80051a8 <runFRTask+0x288>)
 800508e:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8005092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005096:	ee17 3a90 	vmov	r3, s15
 800509a:	4a46      	ldr	r2, [pc, #280]	; (80051b4 <runFRTask+0x294>)
 800509c:	6812      	ldr	r2, [r2, #0]
 800509e:	6413      	str	r3, [r2, #64]	; 0x40
 80050a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80050a4:	f001 fb2a 	bl	80066fc <HAL_Delay>
 80050a8:	4b3f      	ldr	r3, [pc, #252]	; (80051a8 <runFRTask+0x288>)
 80050aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80050ae:	4a42      	ldr	r2, [pc, #264]	; (80051b8 <runFRTask+0x298>)
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	4b3d      	ldr	r3, [pc, #244]	; (80051a8 <runFRTask+0x288>)
 80050b4:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bf0c      	ite	eq
 80050bc:	2301      	moveq	r3, #1
 80050be:	2300      	movne	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	2104      	movs	r1, #4
 80050c6:	483d      	ldr	r0, [pc, #244]	; (80051bc <runFRTask+0x29c>)
 80050c8:	f002 fa7c 	bl	80075c4 <HAL_GPIO_WritePin>
 80050cc:	4b36      	ldr	r3, [pc, #216]	; (80051a8 <runFRTask+0x288>)
 80050ce:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	bf14      	ite	ne
 80050d6:	2301      	movne	r3, #1
 80050d8:	2300      	moveq	r3, #0
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	2108      	movs	r1, #8
 80050e0:	4836      	ldr	r0, [pc, #216]	; (80051bc <runFRTask+0x29c>)
 80050e2:	f002 fa6f 	bl	80075c4 <HAL_GPIO_WritePin>
 80050e6:	4b30      	ldr	r3, [pc, #192]	; (80051a8 <runFRTask+0x288>)
 80050e8:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bf0c      	ite	eq
 80050f0:	2301      	moveq	r3, #1
 80050f2:	2300      	movne	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	2120      	movs	r1, #32
 80050fa:	4830      	ldr	r0, [pc, #192]	; (80051bc <runFRTask+0x29c>)
 80050fc:	f002 fa62 	bl	80075c4 <HAL_GPIO_WritePin>
 8005100:	4b29      	ldr	r3, [pc, #164]	; (80051a8 <runFRTask+0x288>)
 8005102:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8005106:	2b00      	cmp	r3, #0
 8005108:	bf14      	ite	ne
 800510a:	2301      	movne	r3, #1
 800510c:	2300      	moveq	r3, #0
 800510e:	b2db      	uxtb	r3, r3
 8005110:	461a      	mov	r2, r3
 8005112:	2110      	movs	r1, #16
 8005114:	4829      	ldr	r0, [pc, #164]	; (80051bc <runFRTask+0x29c>)
 8005116:	f002 fa55 	bl	80075c4 <HAL_GPIO_WritePin>
 800511a:	4b23      	ldr	r3, [pc, #140]	; (80051a8 <runFRTask+0x288>)
 800511c:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8005120:	4b27      	ldr	r3, [pc, #156]	; (80051c0 <runFRTask+0x2a0>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	635a      	str	r2, [r3, #52]	; 0x34
 8005126:	4b20      	ldr	r3, [pc, #128]	; (80051a8 <runFRTask+0x288>)
 8005128:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 800512c:	4b24      	ldr	r3, [pc, #144]	; (80051c0 <runFRTask+0x2a0>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8005132:	4821      	ldr	r0, [pc, #132]	; (80051b8 <runFRTask+0x298>)
 8005134:	f7fe f8f0 	bl	8003318 <RobotTurn>
			  osDelay(10);
 8005138:	200a      	movs	r0, #10
 800513a:	f006 fdb9 	bl	800bcb0 <osDelay>
			  targetDist = 8;
 800513e:	4b21      	ldr	r3, [pc, #132]	; (80051c4 <runFRTask+0x2a4>)
 8005140:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8005144:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005146:	2200      	movs	r2, #0
 8005148:	2100      	movs	r1, #0
 800514a:	481e      	ldr	r0, [pc, #120]	; (80051c4 <runFRTask+0x2a4>)
 800514c:	f7fd fc80 	bl	8002a50 <RobotMoveDist>
			  osDelay(20);
 8005150:	2014      	movs	r0, #20
 8005152:	f006 fdad 	bl	800bcb0 <osDelay>
			  break;
 8005156:	e0a0      	b.n	800529a <runFRTask+0x37a>
		  default: // FR00 (indoor 3x1)
			  targetDist = 6.5;
 8005158:	4b1a      	ldr	r3, [pc, #104]	; (80051c4 <runFRTask+0x2a4>)
 800515a:	4a1c      	ldr	r2, [pc, #112]	; (80051cc <runFRTask+0x2ac>)
 800515c:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800515e:	2200      	movs	r2, #0
 8005160:	2100      	movs	r1, #0
 8005162:	4818      	ldr	r0, [pc, #96]	; (80051c4 <runFRTask+0x2a4>)
 8005164:	f7fd fc74 	bl	8002a50 <RobotMoveDist>
			  osDelay(10);
 8005168:	200a      	movs	r0, #10
 800516a:	f006 fda1 	bl	800bcb0 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_FR00], &htim8, &htim1, targetAngle);
 800516e:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <runFRTask+0x288>)
 8005170:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8005174:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80051ac <runFRTask+0x28c>
 8005178:	eef4 7ac7 	vcmpe.f32	s15, s14
 800517c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005180:	dd01      	ble.n	8005186 <runFRTask+0x266>
 8005182:	2373      	movs	r3, #115	; 0x73
 8005184:	e02b      	b.n	80051de <runFRTask+0x2be>
 8005186:	4b08      	ldr	r3, [pc, #32]	; (80051a8 <runFRTask+0x288>)
 8005188:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800518c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80051b0 <runFRTask+0x290>
 8005190:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005198:	d51a      	bpl.n	80051d0 <runFRTask+0x2b0>
 800519a:	2332      	movs	r3, #50	; 0x32
 800519c:	e01f      	b.n	80051de <runFRTask+0x2be>
 800519e:	bf00      	nop
 80051a0:	20000134 	.word	0x20000134
 80051a4:	200004c0 	.word	0x200004c0
 80051a8:	20000004 	.word	0x20000004
 80051ac:	42e60000 	.word	0x42e60000
 80051b0:	42480000 	.word	0x42480000
 80051b4:	200002a0 	.word	0x200002a0
 80051b8:	200004e8 	.word	0x200004e8
 80051bc:	40020000 	.word	0x40020000
 80051c0:	200003c0 	.word	0x200003c0
 80051c4:	200004fc 	.word	0x200004fc
 80051c8:	41233333 	.word	0x41233333
 80051cc:	40d00000 	.word	0x40d00000
 80051d0:	4b51      	ldr	r3, [pc, #324]	; (8005318 <runFRTask+0x3f8>)
 80051d2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80051d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051da:	ee17 3a90 	vmov	r3, s15
 80051de:	4a4f      	ldr	r2, [pc, #316]	; (800531c <runFRTask+0x3fc>)
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	6413      	str	r3, [r2, #64]	; 0x40
 80051e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80051e8:	f001 fa88 	bl	80066fc <HAL_Delay>
 80051ec:	4b4a      	ldr	r3, [pc, #296]	; (8005318 <runFRTask+0x3f8>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f2:	4a4b      	ldr	r2, [pc, #300]	; (8005320 <runFRTask+0x400>)
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	4b48      	ldr	r3, [pc, #288]	; (8005318 <runFRTask+0x3f8>)
 80051f8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	bf0c      	ite	eq
 8005200:	2301      	moveq	r3, #1
 8005202:	2300      	movne	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	2104      	movs	r1, #4
 800520a:	4846      	ldr	r0, [pc, #280]	; (8005324 <runFRTask+0x404>)
 800520c:	f002 f9da 	bl	80075c4 <HAL_GPIO_WritePin>
 8005210:	4b41      	ldr	r3, [pc, #260]	; (8005318 <runFRTask+0x3f8>)
 8005212:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005216:	2b00      	cmp	r3, #0
 8005218:	bf14      	ite	ne
 800521a:	2301      	movne	r3, #1
 800521c:	2300      	moveq	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	461a      	mov	r2, r3
 8005222:	2108      	movs	r1, #8
 8005224:	483f      	ldr	r0, [pc, #252]	; (8005324 <runFRTask+0x404>)
 8005226:	f002 f9cd 	bl	80075c4 <HAL_GPIO_WritePin>
 800522a:	4b3b      	ldr	r3, [pc, #236]	; (8005318 <runFRTask+0x3f8>)
 800522c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005230:	2b00      	cmp	r3, #0
 8005232:	bf0c      	ite	eq
 8005234:	2301      	moveq	r3, #1
 8005236:	2300      	movne	r3, #0
 8005238:	b2db      	uxtb	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	2120      	movs	r1, #32
 800523e:	4839      	ldr	r0, [pc, #228]	; (8005324 <runFRTask+0x404>)
 8005240:	f002 f9c0 	bl	80075c4 <HAL_GPIO_WritePin>
 8005244:	4b34      	ldr	r3, [pc, #208]	; (8005318 <runFRTask+0x3f8>)
 8005246:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800524a:	2b00      	cmp	r3, #0
 800524c:	bf14      	ite	ne
 800524e:	2301      	movne	r3, #1
 8005250:	2300      	moveq	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	2110      	movs	r1, #16
 8005258:	4832      	ldr	r0, [pc, #200]	; (8005324 <runFRTask+0x404>)
 800525a:	f002 f9b3 	bl	80075c4 <HAL_GPIO_WritePin>
 800525e:	4b2e      	ldr	r3, [pc, #184]	; (8005318 <runFRTask+0x3f8>)
 8005260:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8005264:	4b30      	ldr	r3, [pc, #192]	; (8005328 <runFRTask+0x408>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	635a      	str	r2, [r3, #52]	; 0x34
 800526a:	4b2b      	ldr	r3, [pc, #172]	; (8005318 <runFRTask+0x3f8>)
 800526c:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8005270:	4b2d      	ldr	r3, [pc, #180]	; (8005328 <runFRTask+0x408>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8005276:	482a      	ldr	r0, [pc, #168]	; (8005320 <runFRTask+0x400>)
 8005278:	f7fe f84e 	bl	8003318 <RobotTurn>
			  osDelay(10);
 800527c:	200a      	movs	r0, #10
 800527e:	f006 fd17 	bl	800bcb0 <osDelay>
			  targetDist = 6.5;
 8005282:	4b2a      	ldr	r3, [pc, #168]	; (800532c <runFRTask+0x40c>)
 8005284:	4a2a      	ldr	r2, [pc, #168]	; (8005330 <runFRTask+0x410>)
 8005286:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005288:	2200      	movs	r2, #0
 800528a:	2100      	movs	r1, #0
 800528c:	4827      	ldr	r0, [pc, #156]	; (800532c <runFRTask+0x40c>)
 800528e:	f7fd fbdf 	bl	8002a50 <RobotMoveDist>
			  osDelay(10);
 8005292:	200a      	movs	r0, #10
 8005294:	f006 fd0c 	bl	800bcb0 <osDelay>
			  break;
 8005298:	bf00      	nop
		  }


		  clickOnce = 0;
 800529a:	4b26      	ldr	r3, [pc, #152]	; (8005334 <runFRTask+0x414>)
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 80052a0:	4b25      	ldr	r3, [pc, #148]	; (8005338 <runFRTask+0x418>)
 80052a2:	781a      	ldrb	r2, [r3, #0]
 80052a4:	4b25      	ldr	r3, [pc, #148]	; (800533c <runFRTask+0x41c>)
 80052a6:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 80052a8:	4b23      	ldr	r3, [pc, #140]	; (8005338 <runFRTask+0x418>)
 80052aa:	220b      	movs	r2, #11
 80052ac:	701a      	strb	r2, [r3, #0]
		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 80052ae:	4b24      	ldr	r3, [pc, #144]	; (8005340 <runFRTask+0x420>)
 80052b0:	781a      	ldrb	r2, [r3, #0]
 80052b2:	4b23      	ldr	r3, [pc, #140]	; (8005340 <runFRTask+0x420>)
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d112      	bne.n	80052e0 <runFRTask+0x3c0>
				__CLEAR_CURCMD(curCmd);
 80052ba:	4b22      	ldr	r3, [pc, #136]	; (8005344 <runFRTask+0x424>)
 80052bc:	2264      	movs	r2, #100	; 0x64
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	4b20      	ldr	r3, [pc, #128]	; (8005344 <runFRTask+0x424>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 80052c6:	4a20      	ldr	r2, [pc, #128]	; (8005348 <runFRTask+0x428>)
 80052c8:	210f      	movs	r1, #15
 80052ca:	4820      	ldr	r0, [pc, #128]	; (800534c <runFRTask+0x42c>)
 80052cc:	f009 fc44 	bl	800eb58 <sniprintf>
 80052d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052d4:	2206      	movs	r2, #6
 80052d6:	491e      	ldr	r1, [pc, #120]	; (8005350 <runFRTask+0x430>)
 80052d8:	481e      	ldr	r0, [pc, #120]	; (8005354 <runFRTask+0x434>)
 80052da:	f005 fbb2 	bl	800aa42 <HAL_UART_Transmit>
 80052de:	e623      	b.n	8004f28 <runFRTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 80052e0:	4b17      	ldr	r3, [pc, #92]	; (8005340 <runFRTask+0x420>)
 80052e2:	785b      	ldrb	r3, [r3, #1]
 80052e4:	4a17      	ldr	r2, [pc, #92]	; (8005344 <runFRTask+0x424>)
 80052e6:	4916      	ldr	r1, [pc, #88]	; (8005340 <runFRTask+0x420>)
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	4b13      	ldr	r3, [pc, #76]	; (8005340 <runFRTask+0x420>)
 80052f2:	785b      	ldrb	r3, [r3, #1]
 80052f4:	3301      	adds	r3, #1
 80052f6:	4a12      	ldr	r2, [pc, #72]	; (8005340 <runFRTask+0x420>)
 80052f8:	7892      	ldrb	r2, [r2, #2]
 80052fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80052fe:	fb01 f202 	mul.w	r2, r1, r2
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	b2da      	uxtb	r2, r3
 8005306:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <runFRTask+0x420>)
 8005308:	705a      	strb	r2, [r3, #1]
 800530a:	4a13      	ldr	r2, [pc, #76]	; (8005358 <runFRTask+0x438>)
 800530c:	210f      	movs	r1, #15
 800530e:	480f      	ldr	r0, [pc, #60]	; (800534c <runFRTask+0x42c>)
 8005310:	f009 fc22 	bl	800eb58 <sniprintf>
	  if (curTask != TASK_FR) osDelay(1000);
 8005314:	e608      	b.n	8004f28 <runFRTask+0x8>
 8005316:	bf00      	nop
 8005318:	20000004 	.word	0x20000004
 800531c:	200002a0 	.word	0x200002a0
 8005320:	200004e8 	.word	0x200004e8
 8005324:	40020000 	.word	0x40020000
 8005328:	200003c0 	.word	0x200003c0
 800532c:	200004fc 	.word	0x200004fc
 8005330:	40d00000 	.word	0x40d00000
 8005334:	20000578 	.word	0x20000578
 8005338:	20000134 	.word	0x20000134
 800533c:	20000135 	.word	0x20000135
 8005340:	2000048c 	.word	0x2000048c
 8005344:	200004c0 	.word	0x200004c0
 8005348:	08010218 	.word	0x08010218
 800534c:	200004c4 	.word	0x200004c4
 8005350:	08010220 	.word	0x08010220
 8005354:	20000408 	.word	0x20000408
 8005358:	08010228 	.word	0x08010228

0800535c <runBLTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBLTask */
void runBLTask(void *argument)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBLTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_BL) osDelay(1000);
 8005364:	4b9b      	ldr	r3, [pc, #620]	; (80055d4 <runBLTask+0x278>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b04      	cmp	r3, #4
 800536a:	d004      	beq.n	8005376 <runBLTask+0x1a>
 800536c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005370:	f006 fc9e 	bl	800bcb0 <osDelay>
 8005374:	e7f6      	b.n	8005364 <runBLTask+0x8>
	  else {
//		  osDelay(3000); // video demo only
		  switch(curCmd.val) {
 8005376:	4b98      	ldr	r3, [pc, #608]	; (80055d8 <runBLTask+0x27c>)
 8005378:	885b      	ldrh	r3, [r3, #2]
 800537a:	2b14      	cmp	r3, #20
 800537c:	d07f      	beq.n	800547e <runBLTask+0x122>
 800537e:	2b1e      	cmp	r3, #30
 8005380:	f040 8105 	bne.w	800558e <runBLTask+0x232>
		  case 30: // BL30 (4x2)
			  __SET_CMD_CONFIG(cfgs[CONFIG_BL30], &htim8, &htim1, targetAngle);
 8005384:	4b95      	ldr	r3, [pc, #596]	; (80055dc <runBLTask+0x280>)
 8005386:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 800538a:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80055e0 <runBLTask+0x284>
 800538e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005396:	dd01      	ble.n	800539c <runBLTask+0x40>
 8005398:	2373      	movs	r3, #115	; 0x73
 800539a:	e012      	b.n	80053c2 <runBLTask+0x66>
 800539c:	4b8f      	ldr	r3, [pc, #572]	; (80055dc <runBLTask+0x280>)
 800539e:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 80053a2:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80055e4 <runBLTask+0x288>
 80053a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ae:	d501      	bpl.n	80053b4 <runBLTask+0x58>
 80053b0:	2332      	movs	r3, #50	; 0x32
 80053b2:	e006      	b.n	80053c2 <runBLTask+0x66>
 80053b4:	4b89      	ldr	r3, [pc, #548]	; (80055dc <runBLTask+0x280>)
 80053b6:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 80053ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053be:	ee17 3a90 	vmov	r3, s15
 80053c2:	4a89      	ldr	r2, [pc, #548]	; (80055e8 <runBLTask+0x28c>)
 80053c4:	6812      	ldr	r2, [r2, #0]
 80053c6:	6413      	str	r3, [r2, #64]	; 0x40
 80053c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80053cc:	f001 f996 	bl	80066fc <HAL_Delay>
 80053d0:	4b82      	ldr	r3, [pc, #520]	; (80055dc <runBLTask+0x280>)
 80053d2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80053d6:	4a85      	ldr	r2, [pc, #532]	; (80055ec <runBLTask+0x290>)
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	4b80      	ldr	r3, [pc, #512]	; (80055dc <runBLTask+0x280>)
 80053dc:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	bf0c      	ite	eq
 80053e4:	2301      	moveq	r3, #1
 80053e6:	2300      	movne	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	461a      	mov	r2, r3
 80053ec:	2104      	movs	r1, #4
 80053ee:	4880      	ldr	r0, [pc, #512]	; (80055f0 <runBLTask+0x294>)
 80053f0:	f002 f8e8 	bl	80075c4 <HAL_GPIO_WritePin>
 80053f4:	4b79      	ldr	r3, [pc, #484]	; (80055dc <runBLTask+0x280>)
 80053f6:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bf14      	ite	ne
 80053fe:	2301      	movne	r3, #1
 8005400:	2300      	moveq	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	461a      	mov	r2, r3
 8005406:	2108      	movs	r1, #8
 8005408:	4879      	ldr	r0, [pc, #484]	; (80055f0 <runBLTask+0x294>)
 800540a:	f002 f8db 	bl	80075c4 <HAL_GPIO_WritePin>
 800540e:	4b73      	ldr	r3, [pc, #460]	; (80055dc <runBLTask+0x280>)
 8005410:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8005414:	2b00      	cmp	r3, #0
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	461a      	mov	r2, r3
 8005420:	2120      	movs	r1, #32
 8005422:	4873      	ldr	r0, [pc, #460]	; (80055f0 <runBLTask+0x294>)
 8005424:	f002 f8ce 	bl	80075c4 <HAL_GPIO_WritePin>
 8005428:	4b6c      	ldr	r3, [pc, #432]	; (80055dc <runBLTask+0x280>)
 800542a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800542e:	2b00      	cmp	r3, #0
 8005430:	bf14      	ite	ne
 8005432:	2301      	movne	r3, #1
 8005434:	2300      	moveq	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	2110      	movs	r1, #16
 800543c:	486c      	ldr	r0, [pc, #432]	; (80055f0 <runBLTask+0x294>)
 800543e:	f002 f8c1 	bl	80075c4 <HAL_GPIO_WritePin>
 8005442:	4b66      	ldr	r3, [pc, #408]	; (80055dc <runBLTask+0x280>)
 8005444:	f8b3 2110 	ldrh.w	r2, [r3, #272]	; 0x110
 8005448:	4b6a      	ldr	r3, [pc, #424]	; (80055f4 <runBLTask+0x298>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	635a      	str	r2, [r3, #52]	; 0x34
 800544e:	4b63      	ldr	r3, [pc, #396]	; (80055dc <runBLTask+0x280>)
 8005450:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 8005454:	4b67      	ldr	r3, [pc, #412]	; (80055f4 <runBLTask+0x298>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 800545a:	4864      	ldr	r0, [pc, #400]	; (80055ec <runBLTask+0x290>)
 800545c:	f7fd ff5c 	bl	8003318 <RobotTurn>
			  osDelay(10);
 8005460:	200a      	movs	r0, #10
 8005462:	f006 fc25 	bl	800bcb0 <osDelay>
			  targetDist = 4.5;
 8005466:	4b64      	ldr	r3, [pc, #400]	; (80055f8 <runBLTask+0x29c>)
 8005468:	4a64      	ldr	r2, [pc, #400]	; (80055fc <runBLTask+0x2a0>)
 800546a:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800546c:	2200      	movs	r2, #0
 800546e:	2100      	movs	r1, #0
 8005470:	4861      	ldr	r0, [pc, #388]	; (80055f8 <runBLTask+0x29c>)
 8005472:	f7fd faed 	bl	8002a50 <RobotMoveDist>
			  osDelay(10);
 8005476:	200a      	movs	r0, #10
 8005478:	f006 fc1a 	bl	800bcb0 <osDelay>
			  break;
 800547c:	e12b      	b.n	80056d6 <runBLTask+0x37a>
		  case 20: // BL20 (outdoor 3x1)
			  targetDist = 1.75;
 800547e:	4b5e      	ldr	r3, [pc, #376]	; (80055f8 <runBLTask+0x29c>)
 8005480:	4a5f      	ldr	r2, [pc, #380]	; (8005600 <runBLTask+0x2a4>)
 8005482:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005484:	2200      	movs	r2, #0
 8005486:	2101      	movs	r1, #1
 8005488:	485b      	ldr	r0, [pc, #364]	; (80055f8 <runBLTask+0x29c>)
 800548a:	f7fd fae1 	bl	8002a50 <RobotMoveDist>
			  osDelay(10);
 800548e:	200a      	movs	r0, #10
 8005490:	f006 fc0e 	bl	800bcb0 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_BL20], &htim8, &htim1, targetAngle);
 8005494:	4b51      	ldr	r3, [pc, #324]	; (80055dc <runBLTask+0x280>)
 8005496:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 800549a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80055e0 <runBLTask+0x284>
 800549e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a6:	dd01      	ble.n	80054ac <runBLTask+0x150>
 80054a8:	2373      	movs	r3, #115	; 0x73
 80054aa:	e012      	b.n	80054d2 <runBLTask+0x176>
 80054ac:	4b4b      	ldr	r3, [pc, #300]	; (80055dc <runBLTask+0x280>)
 80054ae:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80054b2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80055e4 <runBLTask+0x288>
 80054b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054be:	d501      	bpl.n	80054c4 <runBLTask+0x168>
 80054c0:	2332      	movs	r3, #50	; 0x32
 80054c2:	e006      	b.n	80054d2 <runBLTask+0x176>
 80054c4:	4b45      	ldr	r3, [pc, #276]	; (80055dc <runBLTask+0x280>)
 80054c6:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80054ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ce:	ee17 3a90 	vmov	r3, s15
 80054d2:	4a45      	ldr	r2, [pc, #276]	; (80055e8 <runBLTask+0x28c>)
 80054d4:	6812      	ldr	r2, [r2, #0]
 80054d6:	6413      	str	r3, [r2, #64]	; 0x40
 80054d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80054dc:	f001 f90e 	bl	80066fc <HAL_Delay>
 80054e0:	4b3e      	ldr	r3, [pc, #248]	; (80055dc <runBLTask+0x280>)
 80054e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054e6:	4a41      	ldr	r2, [pc, #260]	; (80055ec <runBLTask+0x290>)
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	4b3c      	ldr	r3, [pc, #240]	; (80055dc <runBLTask+0x280>)
 80054ec:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	bf0c      	ite	eq
 80054f4:	2301      	moveq	r3, #1
 80054f6:	2300      	movne	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	2104      	movs	r1, #4
 80054fe:	483c      	ldr	r0, [pc, #240]	; (80055f0 <runBLTask+0x294>)
 8005500:	f002 f860 	bl	80075c4 <HAL_GPIO_WritePin>
 8005504:	4b35      	ldr	r3, [pc, #212]	; (80055dc <runBLTask+0x280>)
 8005506:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800550a:	2b00      	cmp	r3, #0
 800550c:	bf14      	ite	ne
 800550e:	2301      	movne	r3, #1
 8005510:	2300      	moveq	r3, #0
 8005512:	b2db      	uxtb	r3, r3
 8005514:	461a      	mov	r2, r3
 8005516:	2108      	movs	r1, #8
 8005518:	4835      	ldr	r0, [pc, #212]	; (80055f0 <runBLTask+0x294>)
 800551a:	f002 f853 	bl	80075c4 <HAL_GPIO_WritePin>
 800551e:	4b2f      	ldr	r3, [pc, #188]	; (80055dc <runBLTask+0x280>)
 8005520:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf0c      	ite	eq
 8005528:	2301      	moveq	r3, #1
 800552a:	2300      	movne	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	2120      	movs	r1, #32
 8005532:	482f      	ldr	r0, [pc, #188]	; (80055f0 <runBLTask+0x294>)
 8005534:	f002 f846 	bl	80075c4 <HAL_GPIO_WritePin>
 8005538:	4b28      	ldr	r3, [pc, #160]	; (80055dc <runBLTask+0x280>)
 800553a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800553e:	2b00      	cmp	r3, #0
 8005540:	bf14      	ite	ne
 8005542:	2301      	movne	r3, #1
 8005544:	2300      	moveq	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	2110      	movs	r1, #16
 800554c:	4828      	ldr	r0, [pc, #160]	; (80055f0 <runBLTask+0x294>)
 800554e:	f002 f839 	bl	80075c4 <HAL_GPIO_WritePin>
 8005552:	4b22      	ldr	r3, [pc, #136]	; (80055dc <runBLTask+0x280>)
 8005554:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8005558:	4b26      	ldr	r3, [pc, #152]	; (80055f4 <runBLTask+0x298>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	635a      	str	r2, [r3, #52]	; 0x34
 800555e:	4b1f      	ldr	r3, [pc, #124]	; (80055dc <runBLTask+0x280>)
 8005560:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8005564:	4b23      	ldr	r3, [pc, #140]	; (80055f4 <runBLTask+0x298>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 800556a:	4820      	ldr	r0, [pc, #128]	; (80055ec <runBLTask+0x290>)
 800556c:	f7fd fed4 	bl	8003318 <RobotTurn>
			  osDelay(10);
 8005570:	200a      	movs	r0, #10
 8005572:	f006 fb9d 	bl	800bcb0 <osDelay>
			  targetDist = 7;
 8005576:	4b20      	ldr	r3, [pc, #128]	; (80055f8 <runBLTask+0x29c>)
 8005578:	4a22      	ldr	r2, [pc, #136]	; (8005604 <runBLTask+0x2a8>)
 800557a:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 800557c:	2200      	movs	r2, #0
 800557e:	2101      	movs	r1, #1
 8005580:	481d      	ldr	r0, [pc, #116]	; (80055f8 <runBLTask+0x29c>)
 8005582:	f7fd fa65 	bl	8002a50 <RobotMoveDist>
			  osDelay(20);
 8005586:	2014      	movs	r0, #20
 8005588:	f006 fb92 	bl	800bcb0 <osDelay>
			  break;
 800558c:	e0a3      	b.n	80056d6 <runBLTask+0x37a>
		  default: // BL00 (indoor 3x1)
			  targetDist = 4.6;
 800558e:	4b1a      	ldr	r3, [pc, #104]	; (80055f8 <runBLTask+0x29c>)
 8005590:	4a1d      	ldr	r2, [pc, #116]	; (8005608 <runBLTask+0x2ac>)
 8005592:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005594:	2200      	movs	r2, #0
 8005596:	2101      	movs	r1, #1
 8005598:	4817      	ldr	r0, [pc, #92]	; (80055f8 <runBLTask+0x29c>)
 800559a:	f7fd fa59 	bl	8002a50 <RobotMoveDist>
			  osDelay(10);
 800559e:	200a      	movs	r0, #10
 80055a0:	f006 fb86 	bl	800bcb0 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_BL00], &htim8, &htim1, targetAngle);
 80055a4:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <runBLTask+0x280>)
 80055a6:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80055aa:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80055e0 <runBLTask+0x284>
 80055ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b6:	dd01      	ble.n	80055bc <runBLTask+0x260>
 80055b8:	2373      	movs	r3, #115	; 0x73
 80055ba:	e02e      	b.n	800561a <runBLTask+0x2be>
 80055bc:	4b07      	ldr	r3, [pc, #28]	; (80055dc <runBLTask+0x280>)
 80055be:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80055c2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80055e4 <runBLTask+0x288>
 80055c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ce:	d51d      	bpl.n	800560c <runBLTask+0x2b0>
 80055d0:	2332      	movs	r3, #50	; 0x32
 80055d2:	e022      	b.n	800561a <runBLTask+0x2be>
 80055d4:	20000134 	.word	0x20000134
 80055d8:	200004c0 	.word	0x200004c0
 80055dc:	20000004 	.word	0x20000004
 80055e0:	42e60000 	.word	0x42e60000
 80055e4:	42480000 	.word	0x42480000
 80055e8:	200002a0 	.word	0x200002a0
 80055ec:	200004e8 	.word	0x200004e8
 80055f0:	40020000 	.word	0x40020000
 80055f4:	200003c0 	.word	0x200003c0
 80055f8:	200004fc 	.word	0x200004fc
 80055fc:	40900000 	.word	0x40900000
 8005600:	3fe00000 	.word	0x3fe00000
 8005604:	40e00000 	.word	0x40e00000
 8005608:	40933333 	.word	0x40933333
 800560c:	4b51      	ldr	r3, [pc, #324]	; (8005754 <runBLTask+0x3f8>)
 800560e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005616:	ee17 3a90 	vmov	r3, s15
 800561a:	4a4f      	ldr	r2, [pc, #316]	; (8005758 <runBLTask+0x3fc>)
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	6413      	str	r3, [r2, #64]	; 0x40
 8005620:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005624:	f001 f86a 	bl	80066fc <HAL_Delay>
 8005628:	4b4a      	ldr	r3, [pc, #296]	; (8005754 <runBLTask+0x3f8>)
 800562a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800562e:	4a4b      	ldr	r2, [pc, #300]	; (800575c <runBLTask+0x400>)
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	4b48      	ldr	r3, [pc, #288]	; (8005754 <runBLTask+0x3f8>)
 8005634:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005638:	2b00      	cmp	r3, #0
 800563a:	bf0c      	ite	eq
 800563c:	2301      	moveq	r3, #1
 800563e:	2300      	movne	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	461a      	mov	r2, r3
 8005644:	2104      	movs	r1, #4
 8005646:	4846      	ldr	r0, [pc, #280]	; (8005760 <runBLTask+0x404>)
 8005648:	f001 ffbc 	bl	80075c4 <HAL_GPIO_WritePin>
 800564c:	4b41      	ldr	r3, [pc, #260]	; (8005754 <runBLTask+0x3f8>)
 800564e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005652:	2b00      	cmp	r3, #0
 8005654:	bf14      	ite	ne
 8005656:	2301      	movne	r3, #1
 8005658:	2300      	moveq	r3, #0
 800565a:	b2db      	uxtb	r3, r3
 800565c:	461a      	mov	r2, r3
 800565e:	2108      	movs	r1, #8
 8005660:	483f      	ldr	r0, [pc, #252]	; (8005760 <runBLTask+0x404>)
 8005662:	f001 ffaf 	bl	80075c4 <HAL_GPIO_WritePin>
 8005666:	4b3b      	ldr	r3, [pc, #236]	; (8005754 <runBLTask+0x3f8>)
 8005668:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800566c:	2b00      	cmp	r3, #0
 800566e:	bf0c      	ite	eq
 8005670:	2301      	moveq	r3, #1
 8005672:	2300      	movne	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	2120      	movs	r1, #32
 800567a:	4839      	ldr	r0, [pc, #228]	; (8005760 <runBLTask+0x404>)
 800567c:	f001 ffa2 	bl	80075c4 <HAL_GPIO_WritePin>
 8005680:	4b34      	ldr	r3, [pc, #208]	; (8005754 <runBLTask+0x3f8>)
 8005682:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005686:	2b00      	cmp	r3, #0
 8005688:	bf14      	ite	ne
 800568a:	2301      	movne	r3, #1
 800568c:	2300      	moveq	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	2110      	movs	r1, #16
 8005694:	4832      	ldr	r0, [pc, #200]	; (8005760 <runBLTask+0x404>)
 8005696:	f001 ff95 	bl	80075c4 <HAL_GPIO_WritePin>
 800569a:	4b2e      	ldr	r3, [pc, #184]	; (8005754 <runBLTask+0x3f8>)
 800569c:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 80056a0:	4b30      	ldr	r3, [pc, #192]	; (8005764 <runBLTask+0x408>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	635a      	str	r2, [r3, #52]	; 0x34
 80056a6:	4b2b      	ldr	r3, [pc, #172]	; (8005754 <runBLTask+0x3f8>)
 80056a8:	f8b3 2092 	ldrh.w	r2, [r3, #146]	; 0x92
 80056ac:	4b2d      	ldr	r3, [pc, #180]	; (8005764 <runBLTask+0x408>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 80056b2:	482a      	ldr	r0, [pc, #168]	; (800575c <runBLTask+0x400>)
 80056b4:	f7fd fe30 	bl	8003318 <RobotTurn>
			  osDelay(10);
 80056b8:	200a      	movs	r0, #10
 80056ba:	f006 faf9 	bl	800bcb0 <osDelay>
			  targetDist = 6.5;
 80056be:	4b2a      	ldr	r3, [pc, #168]	; (8005768 <runBLTask+0x40c>)
 80056c0:	4a2a      	ldr	r2, [pc, #168]	; (800576c <runBLTask+0x410>)
 80056c2:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80056c4:	2200      	movs	r2, #0
 80056c6:	2101      	movs	r1, #1
 80056c8:	4827      	ldr	r0, [pc, #156]	; (8005768 <runBLTask+0x40c>)
 80056ca:	f7fd f9c1 	bl	8002a50 <RobotMoveDist>
			  osDelay(10);
 80056ce:	200a      	movs	r0, #10
 80056d0:	f006 faee 	bl	800bcb0 <osDelay>
			  break;
 80056d4:	bf00      	nop
		  }


		  clickOnce = 0;
 80056d6:	4b26      	ldr	r3, [pc, #152]	; (8005770 <runBLTask+0x414>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 80056dc:	4b25      	ldr	r3, [pc, #148]	; (8005774 <runBLTask+0x418>)
 80056de:	781a      	ldrb	r2, [r3, #0]
 80056e0:	4b25      	ldr	r3, [pc, #148]	; (8005778 <runBLTask+0x41c>)
 80056e2:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 80056e4:	4b23      	ldr	r3, [pc, #140]	; (8005774 <runBLTask+0x418>)
 80056e6:	220b      	movs	r2, #11
 80056e8:	701a      	strb	r2, [r3, #0]
		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 80056ea:	4b24      	ldr	r3, [pc, #144]	; (800577c <runBLTask+0x420>)
 80056ec:	781a      	ldrb	r2, [r3, #0]
 80056ee:	4b23      	ldr	r3, [pc, #140]	; (800577c <runBLTask+0x420>)
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d112      	bne.n	800571c <runBLTask+0x3c0>
				__CLEAR_CURCMD(curCmd);
 80056f6:	4b22      	ldr	r3, [pc, #136]	; (8005780 <runBLTask+0x424>)
 80056f8:	2264      	movs	r2, #100	; 0x64
 80056fa:	701a      	strb	r2, [r3, #0]
 80056fc:	4b20      	ldr	r3, [pc, #128]	; (8005780 <runBLTask+0x424>)
 80056fe:	2200      	movs	r2, #0
 8005700:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8005702:	4a20      	ldr	r2, [pc, #128]	; (8005784 <runBLTask+0x428>)
 8005704:	210f      	movs	r1, #15
 8005706:	4820      	ldr	r0, [pc, #128]	; (8005788 <runBLTask+0x42c>)
 8005708:	f009 fa26 	bl	800eb58 <sniprintf>
 800570c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005710:	2206      	movs	r2, #6
 8005712:	491e      	ldr	r1, [pc, #120]	; (800578c <runBLTask+0x430>)
 8005714:	481e      	ldr	r0, [pc, #120]	; (8005790 <runBLTask+0x434>)
 8005716:	f005 f994 	bl	800aa42 <HAL_UART_Transmit>
 800571a:	e623      	b.n	8005364 <runBLTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 800571c:	4b17      	ldr	r3, [pc, #92]	; (800577c <runBLTask+0x420>)
 800571e:	785b      	ldrb	r3, [r3, #1]
 8005720:	4a17      	ldr	r2, [pc, #92]	; (8005780 <runBLTask+0x424>)
 8005722:	4916      	ldr	r1, [pc, #88]	; (800577c <runBLTask+0x420>)
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	440b      	add	r3, r1
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	4b13      	ldr	r3, [pc, #76]	; (800577c <runBLTask+0x420>)
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	3301      	adds	r3, #1
 8005732:	4a12      	ldr	r2, [pc, #72]	; (800577c <runBLTask+0x420>)
 8005734:	7892      	ldrb	r2, [r2, #2]
 8005736:	fb93 f1f2 	sdiv	r1, r3, r2
 800573a:	fb01 f202 	mul.w	r2, r1, r2
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	b2da      	uxtb	r2, r3
 8005742:	4b0e      	ldr	r3, [pc, #56]	; (800577c <runBLTask+0x420>)
 8005744:	705a      	strb	r2, [r3, #1]
 8005746:	4a13      	ldr	r2, [pc, #76]	; (8005794 <runBLTask+0x438>)
 8005748:	210f      	movs	r1, #15
 800574a:	480f      	ldr	r0, [pc, #60]	; (8005788 <runBLTask+0x42c>)
 800574c:	f009 fa04 	bl	800eb58 <sniprintf>
	  if (curTask != TASK_BL) osDelay(1000);
 8005750:	e608      	b.n	8005364 <runBLTask+0x8>
 8005752:	bf00      	nop
 8005754:	20000004 	.word	0x20000004
 8005758:	200002a0 	.word	0x200002a0
 800575c:	200004e8 	.word	0x200004e8
 8005760:	40020000 	.word	0x40020000
 8005764:	200003c0 	.word	0x200003c0
 8005768:	200004fc 	.word	0x200004fc
 800576c:	40d00000 	.word	0x40d00000
 8005770:	20000578 	.word	0x20000578
 8005774:	20000134 	.word	0x20000134
 8005778:	20000135 	.word	0x20000135
 800577c:	2000048c 	.word	0x2000048c
 8005780:	200004c0 	.word	0x200004c0
 8005784:	08010218 	.word	0x08010218
 8005788:	200004c4 	.word	0x200004c4
 800578c:	08010220 	.word	0x08010220
 8005790:	20000408 	.word	0x20000408
 8005794:	08010228 	.word	0x08010228

08005798 <runBRTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBRTask */
void runBRTask(void *argument)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBRTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_BR) osDelay(1000);
 80057a0:	4b9c      	ldr	r3, [pc, #624]	; (8005a14 <runBRTask+0x27c>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b05      	cmp	r3, #5
 80057a6:	d004      	beq.n	80057b2 <runBRTask+0x1a>
 80057a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80057ac:	f006 fa80 	bl	800bcb0 <osDelay>
 80057b0:	e7f6      	b.n	80057a0 <runBRTask+0x8>
	  else {
//		  osDelay(3000); // video demo only
		  switch(curCmd.val) {
 80057b2:	4b99      	ldr	r3, [pc, #612]	; (8005a18 <runBRTask+0x280>)
 80057b4:	885b      	ldrh	r3, [r3, #2]
 80057b6:	2b14      	cmp	r3, #20
 80057b8:	d07f      	beq.n	80058ba <runBRTask+0x122>
 80057ba:	2b1e      	cmp	r3, #30
 80057bc:	f040 8106 	bne.w	80059cc <runBRTask+0x234>
		  case 30: // BR30 (4x2)
			  __SET_CMD_CONFIG(cfgs[CONFIG_BR30], &htim8, &htim1, targetAngle);
 80057c0:	4b96      	ldr	r3, [pc, #600]	; (8005a1c <runBRTask+0x284>)
 80057c2:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 80057c6:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8005a20 <runBRTask+0x288>
 80057ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d2:	dd01      	ble.n	80057d8 <runBRTask+0x40>
 80057d4:	2373      	movs	r3, #115	; 0x73
 80057d6:	e012      	b.n	80057fe <runBRTask+0x66>
 80057d8:	4b90      	ldr	r3, [pc, #576]	; (8005a1c <runBRTask+0x284>)
 80057da:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 80057de:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8005a24 <runBRTask+0x28c>
 80057e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ea:	d501      	bpl.n	80057f0 <runBRTask+0x58>
 80057ec:	2332      	movs	r3, #50	; 0x32
 80057ee:	e006      	b.n	80057fe <runBRTask+0x66>
 80057f0:	4b8a      	ldr	r3, [pc, #552]	; (8005a1c <runBRTask+0x284>)
 80057f2:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 80057f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057fa:	ee17 3a90 	vmov	r3, s15
 80057fe:	4a8a      	ldr	r2, [pc, #552]	; (8005a28 <runBRTask+0x290>)
 8005800:	6812      	ldr	r2, [r2, #0]
 8005802:	6413      	str	r3, [r2, #64]	; 0x40
 8005804:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005808:	f000 ff78 	bl	80066fc <HAL_Delay>
 800580c:	4b83      	ldr	r3, [pc, #524]	; (8005a1c <runBRTask+0x284>)
 800580e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8005812:	4a86      	ldr	r2, [pc, #536]	; (8005a2c <runBRTask+0x294>)
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	4b81      	ldr	r3, [pc, #516]	; (8005a1c <runBRTask+0x284>)
 8005818:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800581c:	2b00      	cmp	r3, #0
 800581e:	bf0c      	ite	eq
 8005820:	2301      	moveq	r3, #1
 8005822:	2300      	movne	r3, #0
 8005824:	b2db      	uxtb	r3, r3
 8005826:	461a      	mov	r2, r3
 8005828:	2104      	movs	r1, #4
 800582a:	4881      	ldr	r0, [pc, #516]	; (8005a30 <runBRTask+0x298>)
 800582c:	f001 feca 	bl	80075c4 <HAL_GPIO_WritePin>
 8005830:	4b7a      	ldr	r3, [pc, #488]	; (8005a1c <runBRTask+0x284>)
 8005832:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8005836:	2b00      	cmp	r3, #0
 8005838:	bf14      	ite	ne
 800583a:	2301      	movne	r3, #1
 800583c:	2300      	moveq	r3, #0
 800583e:	b2db      	uxtb	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	2108      	movs	r1, #8
 8005844:	487a      	ldr	r0, [pc, #488]	; (8005a30 <runBRTask+0x298>)
 8005846:	f001 febd 	bl	80075c4 <HAL_GPIO_WritePin>
 800584a:	4b74      	ldr	r3, [pc, #464]	; (8005a1c <runBRTask+0x284>)
 800584c:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8005850:	2b00      	cmp	r3, #0
 8005852:	bf0c      	ite	eq
 8005854:	2301      	moveq	r3, #1
 8005856:	2300      	movne	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	461a      	mov	r2, r3
 800585c:	2120      	movs	r1, #32
 800585e:	4874      	ldr	r0, [pc, #464]	; (8005a30 <runBRTask+0x298>)
 8005860:	f001 feb0 	bl	80075c4 <HAL_GPIO_WritePin>
 8005864:	4b6d      	ldr	r3, [pc, #436]	; (8005a1c <runBRTask+0x284>)
 8005866:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800586a:	2b00      	cmp	r3, #0
 800586c:	bf14      	ite	ne
 800586e:	2301      	movne	r3, #1
 8005870:	2300      	moveq	r3, #0
 8005872:	b2db      	uxtb	r3, r3
 8005874:	461a      	mov	r2, r3
 8005876:	2110      	movs	r1, #16
 8005878:	486d      	ldr	r0, [pc, #436]	; (8005a30 <runBRTask+0x298>)
 800587a:	f001 fea3 	bl	80075c4 <HAL_GPIO_WritePin>
 800587e:	4b67      	ldr	r3, [pc, #412]	; (8005a1c <runBRTask+0x284>)
 8005880:	f8b3 2120 	ldrh.w	r2, [r3, #288]	; 0x120
 8005884:	4b6b      	ldr	r3, [pc, #428]	; (8005a34 <runBRTask+0x29c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	635a      	str	r2, [r3, #52]	; 0x34
 800588a:	4b64      	ldr	r3, [pc, #400]	; (8005a1c <runBRTask+0x284>)
 800588c:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
 8005890:	4b68      	ldr	r3, [pc, #416]	; (8005a34 <runBRTask+0x29c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8005896:	4865      	ldr	r0, [pc, #404]	; (8005a2c <runBRTask+0x294>)
 8005898:	f7fd fd3e 	bl	8003318 <RobotTurn>
			  osDelay(10);
 800589c:	200a      	movs	r0, #10
 800589e:	f006 fa07 	bl	800bcb0 <osDelay>
			  targetDist = 5;
 80058a2:	4b65      	ldr	r3, [pc, #404]	; (8005a38 <runBRTask+0x2a0>)
 80058a4:	4a65      	ldr	r2, [pc, #404]	; (8005a3c <runBRTask+0x2a4>)
 80058a6:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80058a8:	2200      	movs	r2, #0
 80058aa:	2100      	movs	r1, #0
 80058ac:	4862      	ldr	r0, [pc, #392]	; (8005a38 <runBRTask+0x2a0>)
 80058ae:	f7fd f8cf 	bl	8002a50 <RobotMoveDist>
			  osDelay(10);
 80058b2:	200a      	movs	r0, #10
 80058b4:	f006 f9fc 	bl	800bcb0 <osDelay>
			  break;
 80058b8:	e12b      	b.n	8005b12 <runBRTask+0x37a>
		  case 20: // BR20 (outdoor 3x1)
			  targetDist = 8;
 80058ba:	4b5f      	ldr	r3, [pc, #380]	; (8005a38 <runBRTask+0x2a0>)
 80058bc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80058c0:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80058c2:	2200      	movs	r2, #0
 80058c4:	2101      	movs	r1, #1
 80058c6:	485c      	ldr	r0, [pc, #368]	; (8005a38 <runBRTask+0x2a0>)
 80058c8:	f7fd f8c2 	bl	8002a50 <RobotMoveDist>
			  osDelay(10);
 80058cc:	200a      	movs	r0, #10
 80058ce:	f006 f9ef 	bl	800bcb0 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_BR20], &htim8, &htim1, targetAngle);
 80058d2:	4b52      	ldr	r3, [pc, #328]	; (8005a1c <runBRTask+0x284>)
 80058d4:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 80058d8:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8005a20 <runBRTask+0x288>
 80058dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e4:	dd01      	ble.n	80058ea <runBRTask+0x152>
 80058e6:	2373      	movs	r3, #115	; 0x73
 80058e8:	e012      	b.n	8005910 <runBRTask+0x178>
 80058ea:	4b4c      	ldr	r3, [pc, #304]	; (8005a1c <runBRTask+0x284>)
 80058ec:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 80058f0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8005a24 <runBRTask+0x28c>
 80058f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058fc:	d501      	bpl.n	8005902 <runBRTask+0x16a>
 80058fe:	2332      	movs	r3, #50	; 0x32
 8005900:	e006      	b.n	8005910 <runBRTask+0x178>
 8005902:	4b46      	ldr	r3, [pc, #280]	; (8005a1c <runBRTask+0x284>)
 8005904:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8005908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800590c:	ee17 3a90 	vmov	r3, s15
 8005910:	4a45      	ldr	r2, [pc, #276]	; (8005a28 <runBRTask+0x290>)
 8005912:	6812      	ldr	r2, [r2, #0]
 8005914:	6413      	str	r3, [r2, #64]	; 0x40
 8005916:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800591a:	f000 feef 	bl	80066fc <HAL_Delay>
 800591e:	4b3f      	ldr	r3, [pc, #252]	; (8005a1c <runBRTask+0x284>)
 8005920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005924:	4a41      	ldr	r2, [pc, #260]	; (8005a2c <runBRTask+0x294>)
 8005926:	6013      	str	r3, [r2, #0]
 8005928:	4b3c      	ldr	r3, [pc, #240]	; (8005a1c <runBRTask+0x284>)
 800592a:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 800592e:	2b00      	cmp	r3, #0
 8005930:	bf0c      	ite	eq
 8005932:	2301      	moveq	r3, #1
 8005934:	2300      	movne	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	461a      	mov	r2, r3
 800593a:	2104      	movs	r1, #4
 800593c:	483c      	ldr	r0, [pc, #240]	; (8005a30 <runBRTask+0x298>)
 800593e:	f001 fe41 	bl	80075c4 <HAL_GPIO_WritePin>
 8005942:	4b36      	ldr	r3, [pc, #216]	; (8005a1c <runBRTask+0x284>)
 8005944:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8005948:	2b00      	cmp	r3, #0
 800594a:	bf14      	ite	ne
 800594c:	2301      	movne	r3, #1
 800594e:	2300      	moveq	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	461a      	mov	r2, r3
 8005954:	2108      	movs	r1, #8
 8005956:	4836      	ldr	r0, [pc, #216]	; (8005a30 <runBRTask+0x298>)
 8005958:	f001 fe34 	bl	80075c4 <HAL_GPIO_WritePin>
 800595c:	4b2f      	ldr	r3, [pc, #188]	; (8005a1c <runBRTask+0x284>)
 800595e:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8005962:	2b00      	cmp	r3, #0
 8005964:	bf0c      	ite	eq
 8005966:	2301      	moveq	r3, #1
 8005968:	2300      	movne	r3, #0
 800596a:	b2db      	uxtb	r3, r3
 800596c:	461a      	mov	r2, r3
 800596e:	2120      	movs	r1, #32
 8005970:	482f      	ldr	r0, [pc, #188]	; (8005a30 <runBRTask+0x298>)
 8005972:	f001 fe27 	bl	80075c4 <HAL_GPIO_WritePin>
 8005976:	4b29      	ldr	r3, [pc, #164]	; (8005a1c <runBRTask+0x284>)
 8005978:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 800597c:	2b00      	cmp	r3, #0
 800597e:	bf14      	ite	ne
 8005980:	2301      	movne	r3, #1
 8005982:	2300      	moveq	r3, #0
 8005984:	b2db      	uxtb	r3, r3
 8005986:	461a      	mov	r2, r3
 8005988:	2110      	movs	r1, #16
 800598a:	4829      	ldr	r0, [pc, #164]	; (8005a30 <runBRTask+0x298>)
 800598c:	f001 fe1a 	bl	80075c4 <HAL_GPIO_WritePin>
 8005990:	4b22      	ldr	r3, [pc, #136]	; (8005a1c <runBRTask+0x284>)
 8005992:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 8005996:	4b27      	ldr	r3, [pc, #156]	; (8005a34 <runBRTask+0x29c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	635a      	str	r2, [r3, #52]	; 0x34
 800599c:	4b1f      	ldr	r3, [pc, #124]	; (8005a1c <runBRTask+0x284>)
 800599e:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 80059a2:	4b24      	ldr	r3, [pc, #144]	; (8005a34 <runBRTask+0x29c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 80059a8:	4820      	ldr	r0, [pc, #128]	; (8005a2c <runBRTask+0x294>)
 80059aa:	f7fd fcb5 	bl	8003318 <RobotTurn>
			  osDelay(10);
 80059ae:	200a      	movs	r0, #10
 80059b0:	f006 f97e 	bl	800bcb0 <osDelay>
			  targetDist = 11;
 80059b4:	4b20      	ldr	r3, [pc, #128]	; (8005a38 <runBRTask+0x2a0>)
 80059b6:	4a22      	ldr	r2, [pc, #136]	; (8005a40 <runBRTask+0x2a8>)
 80059b8:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80059ba:	2200      	movs	r2, #0
 80059bc:	2101      	movs	r1, #1
 80059be:	481e      	ldr	r0, [pc, #120]	; (8005a38 <runBRTask+0x2a0>)
 80059c0:	f7fd f846 	bl	8002a50 <RobotMoveDist>
			  osDelay(20);
 80059c4:	2014      	movs	r0, #20
 80059c6:	f006 f973 	bl	800bcb0 <osDelay>
			  break;
 80059ca:	e0a2      	b.n	8005b12 <runBRTask+0x37a>
		  default: // BR00 (indoor 3x1)
			  targetDist = 6.5;
 80059cc:	4b1a      	ldr	r3, [pc, #104]	; (8005a38 <runBRTask+0x2a0>)
 80059ce:	4a1d      	ldr	r2, [pc, #116]	; (8005a44 <runBRTask+0x2ac>)
 80059d0:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80059d2:	2200      	movs	r2, #0
 80059d4:	2101      	movs	r1, #1
 80059d6:	4818      	ldr	r0, [pc, #96]	; (8005a38 <runBRTask+0x2a0>)
 80059d8:	f7fd f83a 	bl	8002a50 <RobotMoveDist>
			  osDelay(10);
 80059dc:	200a      	movs	r0, #10
 80059de:	f006 f967 	bl	800bcb0 <osDelay>
			  __SET_CMD_CONFIG(cfgs[CONFIG_BR00], &htim8, &htim1, targetAngle);
 80059e2:	4b0e      	ldr	r3, [pc, #56]	; (8005a1c <runBRTask+0x284>)
 80059e4:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 80059e8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005a20 <runBRTask+0x288>
 80059ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f4:	dd01      	ble.n	80059fa <runBRTask+0x262>
 80059f6:	2373      	movs	r3, #115	; 0x73
 80059f8:	e02d      	b.n	8005a56 <runBRTask+0x2be>
 80059fa:	4b08      	ldr	r3, [pc, #32]	; (8005a1c <runBRTask+0x284>)
 80059fc:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005a00:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005a24 <runBRTask+0x28c>
 8005a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a0c:	d51c      	bpl.n	8005a48 <runBRTask+0x2b0>
 8005a0e:	2332      	movs	r3, #50	; 0x32
 8005a10:	e021      	b.n	8005a56 <runBRTask+0x2be>
 8005a12:	bf00      	nop
 8005a14:	20000134 	.word	0x20000134
 8005a18:	200004c0 	.word	0x200004c0
 8005a1c:	20000004 	.word	0x20000004
 8005a20:	42e60000 	.word	0x42e60000
 8005a24:	42480000 	.word	0x42480000
 8005a28:	200002a0 	.word	0x200002a0
 8005a2c:	200004e8 	.word	0x200004e8
 8005a30:	40020000 	.word	0x40020000
 8005a34:	200003c0 	.word	0x200003c0
 8005a38:	200004fc 	.word	0x200004fc
 8005a3c:	40a00000 	.word	0x40a00000
 8005a40:	41300000 	.word	0x41300000
 8005a44:	40d00000 	.word	0x40d00000
 8005a48:	4b51      	ldr	r3, [pc, #324]	; (8005b90 <runBRTask+0x3f8>)
 8005a4a:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a52:	ee17 3a90 	vmov	r3, s15
 8005a56:	4a4f      	ldr	r2, [pc, #316]	; (8005b94 <runBRTask+0x3fc>)
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8005a5c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005a60:	f000 fe4c 	bl	80066fc <HAL_Delay>
 8005a64:	4b4a      	ldr	r3, [pc, #296]	; (8005b90 <runBRTask+0x3f8>)
 8005a66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a6a:	4a4b      	ldr	r2, [pc, #300]	; (8005b98 <runBRTask+0x400>)
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	4b48      	ldr	r3, [pc, #288]	; (8005b90 <runBRTask+0x3f8>)
 8005a70:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	bf0c      	ite	eq
 8005a78:	2301      	moveq	r3, #1
 8005a7a:	2300      	movne	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	2104      	movs	r1, #4
 8005a82:	4846      	ldr	r0, [pc, #280]	; (8005b9c <runBRTask+0x404>)
 8005a84:	f001 fd9e 	bl	80075c4 <HAL_GPIO_WritePin>
 8005a88:	4b41      	ldr	r3, [pc, #260]	; (8005b90 <runBRTask+0x3f8>)
 8005a8a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	bf14      	ite	ne
 8005a92:	2301      	movne	r3, #1
 8005a94:	2300      	moveq	r3, #0
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	461a      	mov	r2, r3
 8005a9a:	2108      	movs	r1, #8
 8005a9c:	483f      	ldr	r0, [pc, #252]	; (8005b9c <runBRTask+0x404>)
 8005a9e:	f001 fd91 	bl	80075c4 <HAL_GPIO_WritePin>
 8005aa2:	4b3b      	ldr	r3, [pc, #236]	; (8005b90 <runBRTask+0x3f8>)
 8005aa4:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	bf0c      	ite	eq
 8005aac:	2301      	moveq	r3, #1
 8005aae:	2300      	movne	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	2120      	movs	r1, #32
 8005ab6:	4839      	ldr	r0, [pc, #228]	; (8005b9c <runBRTask+0x404>)
 8005ab8:	f001 fd84 	bl	80075c4 <HAL_GPIO_WritePin>
 8005abc:	4b34      	ldr	r3, [pc, #208]	; (8005b90 <runBRTask+0x3f8>)
 8005abe:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	bf14      	ite	ne
 8005ac6:	2301      	movne	r3, #1
 8005ac8:	2300      	moveq	r3, #0
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	461a      	mov	r2, r3
 8005ace:	2110      	movs	r1, #16
 8005ad0:	4832      	ldr	r0, [pc, #200]	; (8005b9c <runBRTask+0x404>)
 8005ad2:	f001 fd77 	bl	80075c4 <HAL_GPIO_WritePin>
 8005ad6:	4b2e      	ldr	r3, [pc, #184]	; (8005b90 <runBRTask+0x3f8>)
 8005ad8:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8005adc:	4b30      	ldr	r3, [pc, #192]	; (8005ba0 <runBRTask+0x408>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	635a      	str	r2, [r3, #52]	; 0x34
 8005ae2:	4b2b      	ldr	r3, [pc, #172]	; (8005b90 <runBRTask+0x3f8>)
 8005ae4:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	; 0xa2
 8005ae8:	4b2d      	ldr	r3, [pc, #180]	; (8005ba0 <runBRTask+0x408>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
			  RobotTurn(&targetAngle);
 8005aee:	482a      	ldr	r0, [pc, #168]	; (8005b98 <runBRTask+0x400>)
 8005af0:	f7fd fc12 	bl	8003318 <RobotTurn>
			  osDelay(10);
 8005af4:	200a      	movs	r0, #10
 8005af6:	f006 f8db 	bl	800bcb0 <osDelay>
			  targetDist = 11.25;
 8005afa:	4b2a      	ldr	r3, [pc, #168]	; (8005ba4 <runBRTask+0x40c>)
 8005afc:	4a2a      	ldr	r2, [pc, #168]	; (8005ba8 <runBRTask+0x410>)
 8005afe:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005b00:	2200      	movs	r2, #0
 8005b02:	2101      	movs	r1, #1
 8005b04:	4827      	ldr	r0, [pc, #156]	; (8005ba4 <runBRTask+0x40c>)
 8005b06:	f7fc ffa3 	bl	8002a50 <RobotMoveDist>
			  osDelay(10);
 8005b0a:	200a      	movs	r0, #10
 8005b0c:	f006 f8d0 	bl	800bcb0 <osDelay>
			  break;
 8005b10:	bf00      	nop
		  }


		  clickOnce = 0;
 8005b12:	4b26      	ldr	r3, [pc, #152]	; (8005bac <runBRTask+0x414>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]
		  prevTask = curTask;
 8005b18:	4b25      	ldr	r3, [pc, #148]	; (8005bb0 <runBRTask+0x418>)
 8005b1a:	781a      	ldrb	r2, [r3, #0]
 8005b1c:	4b25      	ldr	r3, [pc, #148]	; (8005bb4 <runBRTask+0x41c>)
 8005b1e:	701a      	strb	r2, [r3, #0]
		  curTask = TASK_NONE;
 8005b20:	4b23      	ldr	r3, [pc, #140]	; (8005bb0 <runBRTask+0x418>)
 8005b22:	220b      	movs	r2, #11
 8005b24:	701a      	strb	r2, [r3, #0]
		  if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8005b26:	4b24      	ldr	r3, [pc, #144]	; (8005bb8 <runBRTask+0x420>)
 8005b28:	781a      	ldrb	r2, [r3, #0]
 8005b2a:	4b23      	ldr	r3, [pc, #140]	; (8005bb8 <runBRTask+0x420>)
 8005b2c:	785b      	ldrb	r3, [r3, #1]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d112      	bne.n	8005b58 <runBRTask+0x3c0>
				__CLEAR_CURCMD(curCmd);
 8005b32:	4b22      	ldr	r3, [pc, #136]	; (8005bbc <runBRTask+0x424>)
 8005b34:	2264      	movs	r2, #100	; 0x64
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	4b20      	ldr	r3, [pc, #128]	; (8005bbc <runBRTask+0x424>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	805a      	strh	r2, [r3, #2]
				__ACK_TASK_DONE(&huart3, rxMsg);
 8005b3e:	4a20      	ldr	r2, [pc, #128]	; (8005bc0 <runBRTask+0x428>)
 8005b40:	210f      	movs	r1, #15
 8005b42:	4820      	ldr	r0, [pc, #128]	; (8005bc4 <runBRTask+0x42c>)
 8005b44:	f009 f808 	bl	800eb58 <sniprintf>
 8005b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b4c:	2206      	movs	r2, #6
 8005b4e:	491e      	ldr	r1, [pc, #120]	; (8005bc8 <runBRTask+0x430>)
 8005b50:	481e      	ldr	r0, [pc, #120]	; (8005bcc <runBRTask+0x434>)
 8005b52:	f004 ff76 	bl	800aa42 <HAL_UART_Transmit>
 8005b56:	e623      	b.n	80057a0 <runBRTask+0x8>
		  } else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005b58:	4b17      	ldr	r3, [pc, #92]	; (8005bb8 <runBRTask+0x420>)
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	4a17      	ldr	r2, [pc, #92]	; (8005bbc <runBRTask+0x424>)
 8005b5e:	4916      	ldr	r1, [pc, #88]	; (8005bb8 <runBRTask+0x420>)
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	4b13      	ldr	r3, [pc, #76]	; (8005bb8 <runBRTask+0x420>)
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	4a12      	ldr	r2, [pc, #72]	; (8005bb8 <runBRTask+0x420>)
 8005b70:	7892      	ldrb	r2, [r2, #2]
 8005b72:	fb93 f1f2 	sdiv	r1, r3, r2
 8005b76:	fb01 f202 	mul.w	r2, r1, r2
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	4b0e      	ldr	r3, [pc, #56]	; (8005bb8 <runBRTask+0x420>)
 8005b80:	705a      	strb	r2, [r3, #1]
 8005b82:	4a13      	ldr	r2, [pc, #76]	; (8005bd0 <runBRTask+0x438>)
 8005b84:	210f      	movs	r1, #15
 8005b86:	480f      	ldr	r0, [pc, #60]	; (8005bc4 <runBRTask+0x42c>)
 8005b88:	f008 ffe6 	bl	800eb58 <sniprintf>
	  if (curTask != TASK_BR) osDelay(1000);
 8005b8c:	e608      	b.n	80057a0 <runBRTask+0x8>
 8005b8e:	bf00      	nop
 8005b90:	20000004 	.word	0x20000004
 8005b94:	200002a0 	.word	0x200002a0
 8005b98:	200004e8 	.word	0x200004e8
 8005b9c:	40020000 	.word	0x40020000
 8005ba0:	200003c0 	.word	0x200003c0
 8005ba4:	200004fc 	.word	0x200004fc
 8005ba8:	41340000 	.word	0x41340000
 8005bac:	20000578 	.word	0x20000578
 8005bb0:	20000134 	.word	0x20000134
 8005bb4:	20000135 	.word	0x20000135
 8005bb8:	2000048c 	.word	0x2000048c
 8005bbc:	200004c0 	.word	0x200004c0
 8005bc0:	08010218 	.word	0x08010218
 8005bc4:	200004c4 	.word	0x200004c4
 8005bc8:	08010220 	.word	0x08010220
 8005bcc:	20000408 	.word	0x20000408
 8005bd0:	08010228 	.word	0x08010228

08005bd4 <runFastestPathTask_V2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFastestPathTask_V2 */
void runFastestPathTask_V2(void *argument)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFastestPathTask_V2 */
	const float FL_Offset_Y = 1.5;
 8005bdc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005be0:	60fb      	str	r3, [r7, #12]
	uint8_t turnSize = 2;
 8005be2:	2302      	movs	r3, #2
 8005be4:	72bb      	strb	r3, [r7, #10]
	uint8_t speedModeFP = SPEED_MODE_2;
 8005be6:	2302      	movs	r3, #2
 8005be8:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_FASTESTPATH_V2) osDelay(1000);
 8005bea:	4b56      	ldr	r3, [pc, #344]	; (8005d44 <runFastestPathTask_V2+0x170>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b09      	cmp	r3, #9
 8005bf0:	d004      	beq.n	8005bfc <runFastestPathTask_V2+0x28>
 8005bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bf6:	f006 f85b 	bl	800bcb0 <osDelay>
 8005bfa:	e09f      	b.n	8005d3c <runFastestPathTask_V2+0x168>
	  else {
		  turnSize = curCmd.val;
 8005bfc:	4b52      	ldr	r3, [pc, #328]	; (8005d48 <runFastestPathTask_V2+0x174>)
 8005bfe:	885b      	ldrh	r3, [r3, #2]
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	72bb      	strb	r3, [r7, #10]
		  speedModeFP = (turnSize == 1 || turnSize == 2) ? SPEED_MODE_2 : SPEED_MODE_1;
 8005c04:	7abb      	ldrb	r3, [r7, #10]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d002      	beq.n	8005c10 <runFastestPathTask_V2+0x3c>
 8005c0a:	7abb      	ldrb	r3, [r7, #10]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d101      	bne.n	8005c14 <runFastestPathTask_V2+0x40>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e000      	b.n	8005c16 <runFastestPathTask_V2+0x42>
 8005c14:	2301      	movs	r3, #1
 8005c16:	72fb      	strb	r3, [r7, #11]
//		  if (turnSize == 3 || turnSize == 4) speedModeFP = SPEED_MODE_1;
//		   STEP 1: move forward until x cm behind the obstacle
//		  if (step == 0) {
			 targetDist = 70;
 8005c18:	4b4c      	ldr	r3, [pc, #304]	; (8005d4c <runFastestPathTask_V2+0x178>)
 8005c1a:	4a4d      	ldr	r2, [pc, #308]	; (8005d50 <runFastestPathTask_V2+0x17c>)
 8005c1c:	601a      	str	r2, [r3, #0]
			 RobotMoveDist(&targetDist, DIR_FORWARD, speedModeFP);
 8005c1e:	7afb      	ldrb	r3, [r7, #11]
 8005c20:	461a      	mov	r2, r3
 8005c22:	2101      	movs	r1, #1
 8005c24:	4849      	ldr	r0, [pc, #292]	; (8005d4c <runFastestPathTask_V2+0x178>)
 8005c26:	f7fc ff13 	bl	8002a50 <RobotMoveDist>
		  switch (turnSize) {
 8005c2a:	7abb      	ldrb	r3, [r7, #10]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d81e      	bhi.n	8005c70 <runFastestPathTask_V2+0x9c>
 8005c32:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <runFastestPathTask_V2+0x64>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005c49 	.word	0x08005c49
 8005c3c:	08005c5d 	.word	0x08005c5d
 8005c40:	08005c49 	.word	0x08005c49
 8005c44:	08005c5d 	.word	0x08005c5d
		  case 1:
		  case 3:
			  targetDist = 20 + 7 + FL_Offset_Y;
 8005c48:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c4c:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 8005c50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c54:	4b3d      	ldr	r3, [pc, #244]	; (8005d4c <runFastestPathTask_V2+0x178>)
 8005c56:	edc3 7a00 	vstr	s15, [r3]
			  break;
 8005c5a:	e00a      	b.n	8005c72 <runFastestPathTask_V2+0x9e>
		  case 2:
		  case 4:
			  targetDist = 40 + 7 + FL_Offset_Y;
 8005c5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c60:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8005d54 <runFastestPathTask_V2+0x180>
 8005c64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c68:	4b38      	ldr	r3, [pc, #224]	; (8005d4c <runFastestPathTask_V2+0x178>)
 8005c6a:	edc3 7a00 	vstr	s15, [r3]
			  break;
 8005c6e:	e000      	b.n	8005c72 <runFastestPathTask_V2+0x9e>
		  default:
			  break;
 8005c70:	bf00      	nop
		  }

			  RobotMoveDistObstacle(&targetDist, speedModeFP);
 8005c72:	7afb      	ldrb	r3, [r7, #11]
 8005c74:	4619      	mov	r1, r3
 8005c76:	4835      	ldr	r0, [pc, #212]	; (8005d4c <runFastestPathTask_V2+0x178>)
 8005c78:	f7fd f86e 	bl	8002d58 <RobotMoveDistObstacle>
//		  } else if (step == 1) {
			  // STEP 2: turn left
			  FASTESTPATH_TURN_LEFT_90X(&turnSize);
 8005c7c:	f107 030a 	add.w	r3, r7, #10
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fd fd0f 	bl	80036a4 <FASTESTPATH_TURN_LEFT_90X>
//		  } else if (step == 2) {
			  // STEP 3: turn right 180
			  FASTESTPATH_TURN_RIGHT_180X(&turnSize);
 8005c86:	f107 030a 	add.w	r3, r7, #10
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fd fddc 	bl	8003848 <FASTESTPATH_TURN_RIGHT_180X>
//		  } else if (step == 3) {
			  // STEP 4: move right by 94cm
			  switch (turnSize) {
 8005c90:	7abb      	ldrb	r3, [r7, #10]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d813      	bhi.n	8005cc0 <runFastestPathTask_V2+0xec>
 8005c98:	a201      	add	r2, pc, #4	; (adr r2, 8005ca0 <runFastestPathTask_V2+0xcc>)
 8005c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9e:	bf00      	nop
 8005ca0:	08005cb1 	.word	0x08005cb1
 8005ca4:	08005cb9 	.word	0x08005cb9
 8005ca8:	08005cb1 	.word	0x08005cb1
 8005cac:	08005cb9 	.word	0x08005cb9
			  case 1:
			  case 3:
				  targetDist = 52;
 8005cb0:	4b26      	ldr	r3, [pc, #152]	; (8005d4c <runFastestPathTask_V2+0x178>)
 8005cb2:	4a29      	ldr	r2, [pc, #164]	; (8005d58 <runFastestPathTask_V2+0x184>)
 8005cb4:	601a      	str	r2, [r3, #0]
				  break;
 8005cb6:	e004      	b.n	8005cc2 <runFastestPathTask_V2+0xee>
			  case 2:
			  case 4:
				  targetDist = 70;
 8005cb8:	4b24      	ldr	r3, [pc, #144]	; (8005d4c <runFastestPathTask_V2+0x178>)
 8005cba:	4a25      	ldr	r2, [pc, #148]	; (8005d50 <runFastestPathTask_V2+0x17c>)
 8005cbc:	601a      	str	r2, [r3, #0]
//				  targetDist = 60;
				  break;
 8005cbe:	e000      	b.n	8005cc2 <runFastestPathTask_V2+0xee>
			  default:
				  break;
 8005cc0:	bf00      	nop
			  }
			  RobotMoveDist(&targetDist, DIR_FORWARD, speedModeFP);
 8005cc2:	7afb      	ldrb	r3, [r7, #11]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	4820      	ldr	r0, [pc, #128]	; (8005d4c <runFastestPathTask_V2+0x178>)
 8005cca:	f7fc fec1 	bl	8002a50 <RobotMoveDist>
//		  } else if (step == 4) {
			  // STEP 5: turn right 180
			  FASTESTPATH_TURN_RIGHT_180X(&turnSize);
 8005cce:	f107 030a 	add.w	r3, r7, #10
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fd fdb8 	bl	8003848 <FASTESTPATH_TURN_RIGHT_180X>
//		  } else if (step == 5) {
			  // STEP 6: turn left (back to initial path)
//			  FASTESTPATH_TURN_LEFT_90X(&turnSize);
			  FASTESTPATH_TURN_LEFT_90X_RETURN(&turnSize);
 8005cd8:	f107 030a 	add.w	r3, r7, #10
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fd fd3d 	bl	800375c <FASTESTPATH_TURN_LEFT_90X_RETURN>
//		  } else if (step == 6) {
			  // STEP 7: move back to carpack
			  targetDist = 60;
 8005ce2:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <runFastestPathTask_V2+0x178>)
 8005ce4:	4a1d      	ldr	r2, [pc, #116]	; (8005d5c <runFastestPathTask_V2+0x188>)
 8005ce6:	601a      	str	r2, [r3, #0]
			  RobotMoveDist(&targetDist, DIR_FORWARD, speedModeFP);
 8005ce8:	7afb      	ldrb	r3, [r7, #11]
 8005cea:	461a      	mov	r2, r3
 8005cec:	2101      	movs	r1, #1
 8005cee:	4817      	ldr	r0, [pc, #92]	; (8005d4c <runFastestPathTask_V2+0x178>)
 8005cf0:	f7fc feae 	bl	8002a50 <RobotMoveDist>
			  targetDist = 15;
 8005cf4:	4b15      	ldr	r3, [pc, #84]	; (8005d4c <runFastestPathTask_V2+0x178>)
 8005cf6:	4a1a      	ldr	r2, [pc, #104]	; (8005d60 <runFastestPathTask_V2+0x18c>)
 8005cf8:	601a      	str	r2, [r3, #0]
			  RobotMoveDistObstacle(&targetDist, speedModeFP);
 8005cfa:	7afb      	ldrb	r3, [r7, #11]
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4813      	ldr	r0, [pc, #76]	; (8005d4c <runFastestPathTask_V2+0x178>)
 8005d00:	f7fd f82a 	bl	8002d58 <RobotMoveDistObstacle>
//		  }

//		  step = (step + 1) % 7;

			// DONE.
			prevTask = curTask;
 8005d04:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <runFastestPathTask_V2+0x170>)
 8005d06:	781a      	ldrb	r2, [r3, #0]
 8005d08:	4b16      	ldr	r3, [pc, #88]	; (8005d64 <runFastestPathTask_V2+0x190>)
 8005d0a:	701a      	strb	r2, [r3, #0]
			curTask = TASK_NONE;
 8005d0c:	4b0d      	ldr	r3, [pc, #52]	; (8005d44 <runFastestPathTask_V2+0x170>)
 8005d0e:	220b      	movs	r2, #11
 8005d10:	701a      	strb	r2, [r3, #0]
//			__ACK_TASK_DONE(&huart3, rxMsg);
			snprintf((char *)rxMsg, sizeof(rxMsg) - 1, "done!"); \
 8005d12:	4a15      	ldr	r2, [pc, #84]	; (8005d68 <runFastestPathTask_V2+0x194>)
 8005d14:	210f      	movs	r1, #15
 8005d16:	4815      	ldr	r0, [pc, #84]	; (8005d6c <runFastestPathTask_V2+0x198>)
 8005d18:	f008 ff1e 	bl	800eb58 <sniprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) "ACK|X\r\n", 7, 0xFFFF); \
 8005d1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d20:	2207      	movs	r2, #7
 8005d22:	4913      	ldr	r1, [pc, #76]	; (8005d70 <runFastestPathTask_V2+0x19c>)
 8005d24:	4813      	ldr	r0, [pc, #76]	; (8005d74 <runFastestPathTask_V2+0x1a0>)
 8005d26:	f004 fe8c 	bl	800aa42 <HAL_UART_Transmit>
			__CLEAR_CURCMD(curCmd);
 8005d2a:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <runFastestPathTask_V2+0x174>)
 8005d2c:	2264      	movs	r2, #100	; 0x64
 8005d2e:	701a      	strb	r2, [r3, #0]
 8005d30:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <runFastestPathTask_V2+0x174>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	805a      	strh	r2, [r3, #2]
			clickOnce = 0;
 8005d36:	4b10      	ldr	r3, [pc, #64]	; (8005d78 <runFastestPathTask_V2+0x1a4>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
	  }
    osDelay(1);
 8005d3c:	2001      	movs	r0, #1
 8005d3e:	f005 ffb7 	bl	800bcb0 <osDelay>
	  if (curTask != TASK_FASTESTPATH_V2) osDelay(1000);
 8005d42:	e752      	b.n	8005bea <runFastestPathTask_V2+0x16>
 8005d44:	20000134 	.word	0x20000134
 8005d48:	200004c0 	.word	0x200004c0
 8005d4c:	200004fc 	.word	0x200004fc
 8005d50:	428c0000 	.word	0x428c0000
 8005d54:	423c0000 	.word	0x423c0000
 8005d58:	42500000 	.word	0x42500000
 8005d5c:	42700000 	.word	0x42700000
 8005d60:	41700000 	.word	0x41700000
 8005d64:	20000135 	.word	0x20000135
 8005d68:	08010218 	.word	0x08010218
 8005d6c:	200004c4 	.word	0x200004c4
 8005d70:	08010238 	.word	0x08010238
 8005d74:	20000408 	.word	0x20000408
 8005d78:	20000578 	.word	0x20000578
 8005d7c:	00000000 	.word	0x00000000

08005d80 <runBatteryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runBatteryTask */
void runBatteryTask(void *argument)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBatteryTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc2);
 8005d88:	4819      	ldr	r0, [pc, #100]	; (8005df0 <runBatteryTask+0x70>)
 8005d8a:	f000 fd1f 	bl	80067cc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2,20);
 8005d8e:	2114      	movs	r1, #20
 8005d90:	4817      	ldr	r0, [pc, #92]	; (8005df0 <runBatteryTask+0x70>)
 8005d92:	f000 fe20 	bl	80069d6 <HAL_ADC_PollForConversion>
	batteryVal = HAL_ADC_GetValue(&hadc2) / 1421.752066 * 100;
 8005d96:	4816      	ldr	r0, [pc, #88]	; (8005df0 <runBatteryTask+0x70>)
 8005d98:	f000 fea8 	bl	8006aec <HAL_ADC_GetValue>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fa fba8 	bl	80004f4 <__aeabi_ui2d>
 8005da4:	a310      	add	r3, pc, #64	; (adr r3, 8005de8 <runBatteryTask+0x68>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	f7fa fd47 	bl	800083c <__aeabi_ddiv>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4610      	mov	r0, r2
 8005db4:	4619      	mov	r1, r3
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	4b0e      	ldr	r3, [pc, #56]	; (8005df4 <runBatteryTask+0x74>)
 8005dbc:	f7fa fc14 	bl	80005e8 <__aeabi_dmul>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	f7fa fec8 	bl	8000b5c <__aeabi_d2f>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <runBatteryTask+0x78>)
 8005dd0:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc2);
 8005dd2:	4807      	ldr	r0, [pc, #28]	; (8005df0 <runBatteryTask+0x70>)
 8005dd4:	f000 fdcc 	bl	8006970 <HAL_ADC_Stop>
    osDelay(30000); // check battery level every 30 seconds
 8005dd8:	f247 5030 	movw	r0, #30000	; 0x7530
 8005ddc:	f005 ff68 	bl	800bcb0 <osDelay>
	HAL_ADC_Start(&hadc2);
 8005de0:	e7d2      	b.n	8005d88 <runBatteryTask+0x8>
 8005de2:	bf00      	nop
 8005de4:	f3af 8000 	nop.w
 8005de8:	1d96e9bc 	.word	0x1d96e9bc
 8005dec:	40963702 	.word	0x40963702
 8005df0:	20000204 	.word	0x20000204
 8005df4:	40590000 	.word	0x40590000
 8005df8:	20000558 	.word	0x20000558

08005dfc <runMoveDistObsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runMoveDistObsTask */
void runMoveDistObsTask(void *argument)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistObsTask */
  /* Infinite loop */
  for(;;)
  {
	  if (curTask != TASK_MOVE_OBS) osDelay(1000);
 8005e04:	4b2d      	ldr	r3, [pc, #180]	; (8005ebc <runMoveDistObsTask+0xc0>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b07      	cmp	r3, #7
 8005e0a:	d004      	beq.n	8005e16 <runMoveDistObsTask+0x1a>
 8005e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e10:	f005 ff4e 	bl	800bcb0 <osDelay>
 8005e14:	e7f6      	b.n	8005e04 <runMoveDistObsTask+0x8>
	  else {
		  targetDist = (float) curCmd.val;
 8005e16:	4b2a      	ldr	r3, [pc, #168]	; (8005ec0 <runMoveDistObsTask+0xc4>)
 8005e18:	885b      	ldrh	r3, [r3, #2]
 8005e1a:	ee07 3a90 	vmov	s15, r3
 8005e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e22:	4b28      	ldr	r3, [pc, #160]	; (8005ec4 <runMoveDistObsTask+0xc8>)
 8005e24:	edc3 7a00 	vstr	s15, [r3]
		  RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8005e28:	2102      	movs	r1, #2
 8005e2a:	4826      	ldr	r0, [pc, #152]	; (8005ec4 <runMoveDistObsTask+0xc8>)
 8005e2c:	f7fc ff94 	bl	8002d58 <RobotMoveDistObstacle>

		  __ON_TASK_END(&htim8, prevTask, curTask);
 8005e30:	4b25      	ldr	r3, [pc, #148]	; (8005ec8 <runMoveDistObsTask+0xcc>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2200      	movs	r2, #0
 8005e36:	635a      	str	r2, [r3, #52]	; 0x34
 8005e38:	4b23      	ldr	r3, [pc, #140]	; (8005ec8 <runMoveDistObsTask+0xcc>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	639a      	str	r2, [r3, #56]	; 0x38
 8005e40:	4b1e      	ldr	r3, [pc, #120]	; (8005ebc <runMoveDistObsTask+0xc0>)
 8005e42:	781a      	ldrb	r2, [r3, #0]
 8005e44:	4b21      	ldr	r3, [pc, #132]	; (8005ecc <runMoveDistObsTask+0xd0>)
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	4b1c      	ldr	r3, [pc, #112]	; (8005ebc <runMoveDistObsTask+0xc0>)
 8005e4a:	220b      	movs	r2, #11
 8005e4c:	701a      	strb	r2, [r3, #0]
		  clickOnce = 0;
 8005e4e:	4b20      	ldr	r3, [pc, #128]	; (8005ed0 <runMoveDistObsTask+0xd4>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	601a      	str	r2, [r3, #0]

		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8005e54:	4b1f      	ldr	r3, [pc, #124]	; (8005ed4 <runMoveDistObsTask+0xd8>)
 8005e56:	781a      	ldrb	r2, [r3, #0]
 8005e58:	4b1e      	ldr	r3, [pc, #120]	; (8005ed4 <runMoveDistObsTask+0xd8>)
 8005e5a:	785b      	ldrb	r3, [r3, #1]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d112      	bne.n	8005e86 <runMoveDistObsTask+0x8a>
			__CLEAR_CURCMD(curCmd);
 8005e60:	4b17      	ldr	r3, [pc, #92]	; (8005ec0 <runMoveDistObsTask+0xc4>)
 8005e62:	2264      	movs	r2, #100	; 0x64
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	4b16      	ldr	r3, [pc, #88]	; (8005ec0 <runMoveDistObsTask+0xc4>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 8005e6c:	4a1a      	ldr	r2, [pc, #104]	; (8005ed8 <runMoveDistObsTask+0xdc>)
 8005e6e:	210f      	movs	r1, #15
 8005e70:	481a      	ldr	r0, [pc, #104]	; (8005edc <runMoveDistObsTask+0xe0>)
 8005e72:	f008 fe71 	bl	800eb58 <sniprintf>
 8005e76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e7a:	2206      	movs	r2, #6
 8005e7c:	4918      	ldr	r1, [pc, #96]	; (8005ee0 <runMoveDistObsTask+0xe4>)
 8005e7e:	4819      	ldr	r0, [pc, #100]	; (8005ee4 <runMoveDistObsTask+0xe8>)
 8005e80:	f004 fddf 	bl	800aa42 <HAL_UART_Transmit>
 8005e84:	e7be      	b.n	8005e04 <runMoveDistObsTask+0x8>
		} else __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005e86:	4b13      	ldr	r3, [pc, #76]	; (8005ed4 <runMoveDistObsTask+0xd8>)
 8005e88:	785b      	ldrb	r3, [r3, #1]
 8005e8a:	4a0d      	ldr	r2, [pc, #52]	; (8005ec0 <runMoveDistObsTask+0xc4>)
 8005e8c:	4911      	ldr	r1, [pc, #68]	; (8005ed4 <runMoveDistObsTask+0xd8>)
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <runMoveDistObsTask+0xd8>)
 8005e98:	785b      	ldrb	r3, [r3, #1]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	4a0d      	ldr	r2, [pc, #52]	; (8005ed4 <runMoveDistObsTask+0xd8>)
 8005e9e:	7892      	ldrb	r2, [r2, #2]
 8005ea0:	fb93 f1f2 	sdiv	r1, r3, r2
 8005ea4:	fb01 f202 	mul.w	r2, r1, r2
 8005ea8:	1a9b      	subs	r3, r3, r2
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <runMoveDistObsTask+0xd8>)
 8005eae:	705a      	strb	r2, [r3, #1]
 8005eb0:	4a0d      	ldr	r2, [pc, #52]	; (8005ee8 <runMoveDistObsTask+0xec>)
 8005eb2:	210f      	movs	r1, #15
 8005eb4:	4809      	ldr	r0, [pc, #36]	; (8005edc <runMoveDistObsTask+0xe0>)
 8005eb6:	f008 fe4f 	bl	800eb58 <sniprintf>
	  if (curTask != TASK_MOVE_OBS) osDelay(1000);
 8005eba:	e7a3      	b.n	8005e04 <runMoveDistObsTask+0x8>
 8005ebc:	20000134 	.word	0x20000134
 8005ec0:	200004c0 	.word	0x200004c0
 8005ec4:	200004fc 	.word	0x200004fc
 8005ec8:	200003c0 	.word	0x200003c0
 8005ecc:	20000135 	.word	0x20000135
 8005ed0:	20000578 	.word	0x20000578
 8005ed4:	2000048c 	.word	0x2000048c
 8005ed8:	08010218 	.word	0x08010218
 8005edc:	200004c4 	.word	0x200004c4
 8005ee0:	08010220 	.word	0x08010220
 8005ee4:	20000408 	.word	0x20000408
 8005ee8:	08010228 	.word	0x08010228

08005eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005ef0:	b672      	cpsid	i
}
 8005ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005ef4:	e7fe      	b.n	8005ef4 <Error_Handler+0x8>
	...

08005ef8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005efe:	2300      	movs	r3, #0
 8005f00:	607b      	str	r3, [r7, #4]
 8005f02:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <HAL_MspInit+0x54>)
 8005f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f06:	4a11      	ldr	r2, [pc, #68]	; (8005f4c <HAL_MspInit+0x54>)
 8005f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8005f0e:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <HAL_MspInit+0x54>)
 8005f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f16:	607b      	str	r3, [r7, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	603b      	str	r3, [r7, #0]
 8005f1e:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <HAL_MspInit+0x54>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <HAL_MspInit+0x54>)
 8005f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f28:	6413      	str	r3, [r2, #64]	; 0x40
 8005f2a:	4b08      	ldr	r3, [pc, #32]	; (8005f4c <HAL_MspInit+0x54>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005f36:	2200      	movs	r2, #0
 8005f38:	210f      	movs	r1, #15
 8005f3a:	f06f 0001 	mvn.w	r0, #1
 8005f3e:	f001 f8dc 	bl	80070fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f42:	bf00      	nop
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	40023800 	.word	0x40023800

08005f50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08c      	sub	sp, #48	; 0x30
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f58:	f107 031c 	add.w	r3, r7, #28
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	605a      	str	r2, [r3, #4]
 8005f62:	609a      	str	r2, [r3, #8]
 8005f64:	60da      	str	r2, [r3, #12]
 8005f66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a2e      	ldr	r2, [pc, #184]	; (8006028 <HAL_ADC_MspInit+0xd8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d128      	bne.n	8005fc4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005f72:	2300      	movs	r3, #0
 8005f74:	61bb      	str	r3, [r7, #24]
 8005f76:	4b2d      	ldr	r3, [pc, #180]	; (800602c <HAL_ADC_MspInit+0xdc>)
 8005f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7a:	4a2c      	ldr	r2, [pc, #176]	; (800602c <HAL_ADC_MspInit+0xdc>)
 8005f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f80:	6453      	str	r3, [r2, #68]	; 0x44
 8005f82:	4b2a      	ldr	r3, [pc, #168]	; (800602c <HAL_ADC_MspInit+0xdc>)
 8005f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8a:	61bb      	str	r3, [r7, #24]
 8005f8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f8e:	2300      	movs	r3, #0
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	4b26      	ldr	r3, [pc, #152]	; (800602c <HAL_ADC_MspInit+0xdc>)
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	4a25      	ldr	r2, [pc, #148]	; (800602c <HAL_ADC_MspInit+0xdc>)
 8005f98:	f043 0304 	orr.w	r3, r3, #4
 8005f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f9e:	4b23      	ldr	r3, [pc, #140]	; (800602c <HAL_ADC_MspInit+0xdc>)
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	f003 0304 	and.w	r3, r3, #4
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005faa:	2302      	movs	r3, #2
 8005fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fb6:	f107 031c 	add.w	r3, r7, #28
 8005fba:	4619      	mov	r1, r3
 8005fbc:	481c      	ldr	r0, [pc, #112]	; (8006030 <HAL_ADC_MspInit+0xe0>)
 8005fbe:	f001 f965 	bl	800728c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005fc2:	e02c      	b.n	800601e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1a      	ldr	r2, [pc, #104]	; (8006034 <HAL_ADC_MspInit+0xe4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d127      	bne.n	800601e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005fce:	2300      	movs	r3, #0
 8005fd0:	613b      	str	r3, [r7, #16]
 8005fd2:	4b16      	ldr	r3, [pc, #88]	; (800602c <HAL_ADC_MspInit+0xdc>)
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd6:	4a15      	ldr	r2, [pc, #84]	; (800602c <HAL_ADC_MspInit+0xdc>)
 8005fd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8005fde:	4b13      	ldr	r3, [pc, #76]	; (800602c <HAL_ADC_MspInit+0xdc>)
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fe6:	613b      	str	r3, [r7, #16]
 8005fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	4b0f      	ldr	r3, [pc, #60]	; (800602c <HAL_ADC_MspInit+0xdc>)
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	4a0e      	ldr	r2, [pc, #56]	; (800602c <HAL_ADC_MspInit+0xdc>)
 8005ff4:	f043 0304 	orr.w	r3, r3, #4
 8005ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8005ffa:	4b0c      	ldr	r3, [pc, #48]	; (800602c <HAL_ADC_MspInit+0xdc>)
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	f003 0304 	and.w	r3, r3, #4
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006006:	2310      	movs	r3, #16
 8006008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800600a:	2303      	movs	r3, #3
 800600c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800600e:	2300      	movs	r3, #0
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006012:	f107 031c 	add.w	r3, r7, #28
 8006016:	4619      	mov	r1, r3
 8006018:	4805      	ldr	r0, [pc, #20]	; (8006030 <HAL_ADC_MspInit+0xe0>)
 800601a:	f001 f937 	bl	800728c <HAL_GPIO_Init>
}
 800601e:	bf00      	nop
 8006020:	3730      	adds	r7, #48	; 0x30
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	40012000 	.word	0x40012000
 800602c:	40023800 	.word	0x40023800
 8006030:	40020800 	.word	0x40020800
 8006034:	40012100 	.word	0x40012100

08006038 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08a      	sub	sp, #40	; 0x28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006040:	f107 0314 	add.w	r3, r7, #20
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	609a      	str	r2, [r3, #8]
 800604c:	60da      	str	r2, [r3, #12]
 800604e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a19      	ldr	r2, [pc, #100]	; (80060bc <HAL_I2C_MspInit+0x84>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d12c      	bne.n	80060b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800605a:	2300      	movs	r3, #0
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	4b18      	ldr	r3, [pc, #96]	; (80060c0 <HAL_I2C_MspInit+0x88>)
 8006060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006062:	4a17      	ldr	r2, [pc, #92]	; (80060c0 <HAL_I2C_MspInit+0x88>)
 8006064:	f043 0302 	orr.w	r3, r3, #2
 8006068:	6313      	str	r3, [r2, #48]	; 0x30
 800606a:	4b15      	ldr	r3, [pc, #84]	; (80060c0 <HAL_I2C_MspInit+0x88>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006076:	f44f 7340 	mov.w	r3, #768	; 0x300
 800607a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800607c:	2312      	movs	r3, #18
 800607e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006080:	2301      	movs	r3, #1
 8006082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006084:	2302      	movs	r3, #2
 8006086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006088:	2304      	movs	r3, #4
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800608c:	f107 0314 	add.w	r3, r7, #20
 8006090:	4619      	mov	r1, r3
 8006092:	480c      	ldr	r0, [pc, #48]	; (80060c4 <HAL_I2C_MspInit+0x8c>)
 8006094:	f001 f8fa 	bl	800728c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006098:	2300      	movs	r3, #0
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	4b08      	ldr	r3, [pc, #32]	; (80060c0 <HAL_I2C_MspInit+0x88>)
 800609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a0:	4a07      	ldr	r2, [pc, #28]	; (80060c0 <HAL_I2C_MspInit+0x88>)
 80060a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060a6:	6413      	str	r3, [r2, #64]	; 0x40
 80060a8:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <HAL_I2C_MspInit+0x88>)
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80060b4:	bf00      	nop
 80060b6:	3728      	adds	r7, #40	; 0x28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40005400 	.word	0x40005400
 80060c0:	40023800 	.word	0x40023800
 80060c4:	40020400 	.word	0x40020400

080060c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08a      	sub	sp, #40	; 0x28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060d0:	f107 0314 	add.w	r3, r7, #20
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	605a      	str	r2, [r3, #4]
 80060da:	609a      	str	r2, [r3, #8]
 80060dc:	60da      	str	r2, [r3, #12]
 80060de:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a27      	ldr	r2, [pc, #156]	; (8006184 <HAL_TIM_Base_MspInit+0xbc>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d116      	bne.n	8006118 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80060ea:	2300      	movs	r3, #0
 80060ec:	613b      	str	r3, [r7, #16]
 80060ee:	4b26      	ldr	r3, [pc, #152]	; (8006188 <HAL_TIM_Base_MspInit+0xc0>)
 80060f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f2:	4a25      	ldr	r2, [pc, #148]	; (8006188 <HAL_TIM_Base_MspInit+0xc0>)
 80060f4:	f043 0301 	orr.w	r3, r3, #1
 80060f8:	6453      	str	r3, [r2, #68]	; 0x44
 80060fa:	4b23      	ldr	r3, [pc, #140]	; (8006188 <HAL_TIM_Base_MspInit+0xc0>)
 80060fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8006106:	2200      	movs	r2, #0
 8006108:	2105      	movs	r1, #5
 800610a:	2019      	movs	r0, #25
 800610c:	f000 fff5 	bl	80070fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006110:	2019      	movs	r0, #25
 8006112:	f001 f80e 	bl	8007132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006116:	e030      	b.n	800617a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM8)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a1b      	ldr	r2, [pc, #108]	; (800618c <HAL_TIM_Base_MspInit+0xc4>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d12b      	bne.n	800617a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	4b18      	ldr	r3, [pc, #96]	; (8006188 <HAL_TIM_Base_MspInit+0xc0>)
 8006128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612a:	4a17      	ldr	r2, [pc, #92]	; (8006188 <HAL_TIM_Base_MspInit+0xc0>)
 800612c:	f043 0302 	orr.w	r3, r3, #2
 8006130:	6453      	str	r3, [r2, #68]	; 0x44
 8006132:	4b15      	ldr	r3, [pc, #84]	; (8006188 <HAL_TIM_Base_MspInit+0xc0>)
 8006134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800613e:	2300      	movs	r3, #0
 8006140:	60bb      	str	r3, [r7, #8]
 8006142:	4b11      	ldr	r3, [pc, #68]	; (8006188 <HAL_TIM_Base_MspInit+0xc0>)
 8006144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006146:	4a10      	ldr	r2, [pc, #64]	; (8006188 <HAL_TIM_Base_MspInit+0xc0>)
 8006148:	f043 0304 	orr.w	r3, r3, #4
 800614c:	6313      	str	r3, [r2, #48]	; 0x30
 800614e:	4b0e      	ldr	r3, [pc, #56]	; (8006188 <HAL_TIM_Base_MspInit+0xc0>)
 8006150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	60bb      	str	r3, [r7, #8]
 8006158:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 800615a:	23c0      	movs	r3, #192	; 0xc0
 800615c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800615e:	2302      	movs	r3, #2
 8006160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006162:	2300      	movs	r3, #0
 8006164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006166:	2300      	movs	r3, #0
 8006168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800616a:	2303      	movs	r3, #3
 800616c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800616e:	f107 0314 	add.w	r3, r7, #20
 8006172:	4619      	mov	r1, r3
 8006174:	4806      	ldr	r0, [pc, #24]	; (8006190 <HAL_TIM_Base_MspInit+0xc8>)
 8006176:	f001 f889 	bl	800728c <HAL_GPIO_Init>
}
 800617a:	bf00      	nop
 800617c:	3728      	adds	r7, #40	; 0x28
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	40010000 	.word	0x40010000
 8006188:	40023800 	.word	0x40023800
 800618c:	40010400 	.word	0x40010400
 8006190:	40020800 	.word	0x40020800

08006194 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08c      	sub	sp, #48	; 0x30
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800619c:	f107 031c 	add.w	r3, r7, #28
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	605a      	str	r2, [r3, #4]
 80061a6:	609a      	str	r2, [r3, #8]
 80061a8:	60da      	str	r2, [r3, #12]
 80061aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b4:	d14b      	bne.n	800624e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80061b6:	2300      	movs	r3, #0
 80061b8:	61bb      	str	r3, [r7, #24]
 80061ba:	4b3f      	ldr	r3, [pc, #252]	; (80062b8 <HAL_TIM_Encoder_MspInit+0x124>)
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	4a3e      	ldr	r2, [pc, #248]	; (80062b8 <HAL_TIM_Encoder_MspInit+0x124>)
 80061c0:	f043 0301 	orr.w	r3, r3, #1
 80061c4:	6413      	str	r3, [r2, #64]	; 0x40
 80061c6:	4b3c      	ldr	r3, [pc, #240]	; (80062b8 <HAL_TIM_Encoder_MspInit+0x124>)
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]
 80061d6:	4b38      	ldr	r3, [pc, #224]	; (80062b8 <HAL_TIM_Encoder_MspInit+0x124>)
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	4a37      	ldr	r2, [pc, #220]	; (80062b8 <HAL_TIM_Encoder_MspInit+0x124>)
 80061dc:	f043 0301 	orr.w	r3, r3, #1
 80061e0:	6313      	str	r3, [r2, #48]	; 0x30
 80061e2:	4b35      	ldr	r3, [pc, #212]	; (80062b8 <HAL_TIM_Encoder_MspInit+0x124>)
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061ee:	2300      	movs	r3, #0
 80061f0:	613b      	str	r3, [r7, #16]
 80061f2:	4b31      	ldr	r3, [pc, #196]	; (80062b8 <HAL_TIM_Encoder_MspInit+0x124>)
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	4a30      	ldr	r2, [pc, #192]	; (80062b8 <HAL_TIM_Encoder_MspInit+0x124>)
 80061f8:	f043 0302 	orr.w	r3, r3, #2
 80061fc:	6313      	str	r3, [r2, #48]	; 0x30
 80061fe:	4b2e      	ldr	r3, [pc, #184]	; (80062b8 <HAL_TIM_Encoder_MspInit+0x124>)
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	613b      	str	r3, [r7, #16]
 8006208:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800620a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800620e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006210:	2302      	movs	r3, #2
 8006212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006214:	2300      	movs	r3, #0
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006218:	2300      	movs	r3, #0
 800621a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800621c:	2301      	movs	r3, #1
 800621e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006220:	f107 031c 	add.w	r3, r7, #28
 8006224:	4619      	mov	r1, r3
 8006226:	4825      	ldr	r0, [pc, #148]	; (80062bc <HAL_TIM_Encoder_MspInit+0x128>)
 8006228:	f001 f830 	bl	800728c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800622c:	2308      	movs	r3, #8
 800622e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006230:	2302      	movs	r3, #2
 8006232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006234:	2300      	movs	r3, #0
 8006236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006238:	2300      	movs	r3, #0
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800623c:	2301      	movs	r3, #1
 800623e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006240:	f107 031c 	add.w	r3, r7, #28
 8006244:	4619      	mov	r1, r3
 8006246:	481e      	ldr	r0, [pc, #120]	; (80062c0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006248:	f001 f820 	bl	800728c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800624c:	e030      	b.n	80062b0 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1c      	ldr	r2, [pc, #112]	; (80062c4 <HAL_TIM_Encoder_MspInit+0x130>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d12b      	bne.n	80062b0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	4b16      	ldr	r3, [pc, #88]	; (80062b8 <HAL_TIM_Encoder_MspInit+0x124>)
 800625e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006260:	4a15      	ldr	r2, [pc, #84]	; (80062b8 <HAL_TIM_Encoder_MspInit+0x124>)
 8006262:	f043 0302 	orr.w	r3, r3, #2
 8006266:	6413      	str	r3, [r2, #64]	; 0x40
 8006268:	4b13      	ldr	r3, [pc, #76]	; (80062b8 <HAL_TIM_Encoder_MspInit+0x124>)
 800626a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006274:	2300      	movs	r3, #0
 8006276:	60bb      	str	r3, [r7, #8]
 8006278:	4b0f      	ldr	r3, [pc, #60]	; (80062b8 <HAL_TIM_Encoder_MspInit+0x124>)
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	4a0e      	ldr	r2, [pc, #56]	; (80062b8 <HAL_TIM_Encoder_MspInit+0x124>)
 800627e:	f043 0301 	orr.w	r3, r3, #1
 8006282:	6313      	str	r3, [r2, #48]	; 0x30
 8006284:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <HAL_TIM_Encoder_MspInit+0x124>)
 8006286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	60bb      	str	r3, [r7, #8]
 800628e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006290:	23c0      	movs	r3, #192	; 0xc0
 8006292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006294:	2302      	movs	r3, #2
 8006296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006298:	2300      	movs	r3, #0
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800629c:	2300      	movs	r3, #0
 800629e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80062a0:	2302      	movs	r3, #2
 80062a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062a4:	f107 031c 	add.w	r3, r7, #28
 80062a8:	4619      	mov	r1, r3
 80062aa:	4804      	ldr	r0, [pc, #16]	; (80062bc <HAL_TIM_Encoder_MspInit+0x128>)
 80062ac:	f000 ffee 	bl	800728c <HAL_GPIO_Init>
}
 80062b0:	bf00      	nop
 80062b2:	3730      	adds	r7, #48	; 0x30
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40023800 	.word	0x40023800
 80062bc:	40020000 	.word	0x40020000
 80062c0:	40020400 	.word	0x40020400
 80062c4:	40000400 	.word	0x40000400

080062c8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	; 0x28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062d0:	f107 0314 	add.w	r3, r7, #20
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	605a      	str	r2, [r3, #4]
 80062da:	609a      	str	r2, [r3, #8]
 80062dc:	60da      	str	r2, [r3, #12]
 80062de:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1d      	ldr	r2, [pc, #116]	; (800635c <HAL_TIM_IC_MspInit+0x94>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d134      	bne.n	8006354 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]
 80062ee:	4b1c      	ldr	r3, [pc, #112]	; (8006360 <HAL_TIM_IC_MspInit+0x98>)
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	4a1b      	ldr	r2, [pc, #108]	; (8006360 <HAL_TIM_IC_MspInit+0x98>)
 80062f4:	f043 0304 	orr.w	r3, r3, #4
 80062f8:	6413      	str	r3, [r2, #64]	; 0x40
 80062fa:	4b19      	ldr	r3, [pc, #100]	; (8006360 <HAL_TIM_IC_MspInit+0x98>)
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	f003 0304 	and.w	r3, r3, #4
 8006302:	613b      	str	r3, [r7, #16]
 8006304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	4b15      	ldr	r3, [pc, #84]	; (8006360 <HAL_TIM_IC_MspInit+0x98>)
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	4a14      	ldr	r2, [pc, #80]	; (8006360 <HAL_TIM_IC_MspInit+0x98>)
 8006310:	f043 0308 	orr.w	r3, r3, #8
 8006314:	6313      	str	r3, [r2, #48]	; 0x30
 8006316:	4b12      	ldr	r3, [pc, #72]	; (8006360 <HAL_TIM_IC_MspInit+0x98>)
 8006318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631a:	f003 0308 	and.w	r3, r3, #8
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006328:	2302      	movs	r3, #2
 800632a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800632c:	2300      	movs	r3, #0
 800632e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006330:	2300      	movs	r3, #0
 8006332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006334:	2302      	movs	r3, #2
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006338:	f107 0314 	add.w	r3, r7, #20
 800633c:	4619      	mov	r1, r3
 800633e:	4809      	ldr	r0, [pc, #36]	; (8006364 <HAL_TIM_IC_MspInit+0x9c>)
 8006340:	f000 ffa4 	bl	800728c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8006344:	2200      	movs	r2, #0
 8006346:	2105      	movs	r1, #5
 8006348:	201e      	movs	r0, #30
 800634a:	f000 fed6 	bl	80070fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800634e:	201e      	movs	r0, #30
 8006350:	f000 feef 	bl	8007132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006354:	bf00      	nop
 8006356:	3728      	adds	r7, #40	; 0x28
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40000800 	.word	0x40000800
 8006360:	40023800 	.word	0x40023800
 8006364:	40020c00 	.word	0x40020c00

08006368 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006370:	f107 030c 	add.w	r3, r7, #12
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	605a      	str	r2, [r3, #4]
 800637a:	609a      	str	r2, [r3, #8]
 800637c:	60da      	str	r2, [r3, #12]
 800637e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a12      	ldr	r2, [pc, #72]	; (80063d0 <HAL_TIM_MspPostInit+0x68>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d11e      	bne.n	80063c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800638a:	2300      	movs	r3, #0
 800638c:	60bb      	str	r3, [r7, #8]
 800638e:	4b11      	ldr	r3, [pc, #68]	; (80063d4 <HAL_TIM_MspPostInit+0x6c>)
 8006390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006392:	4a10      	ldr	r2, [pc, #64]	; (80063d4 <HAL_TIM_MspPostInit+0x6c>)
 8006394:	f043 0310 	orr.w	r3, r3, #16
 8006398:	6313      	str	r3, [r2, #48]	; 0x30
 800639a:	4b0e      	ldr	r3, [pc, #56]	; (80063d4 <HAL_TIM_MspPostInit+0x6c>)
 800639c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639e:	f003 0310 	and.w	r3, r3, #16
 80063a2:	60bb      	str	r3, [r7, #8]
 80063a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80063a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ac:	2302      	movs	r3, #2
 80063ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063b4:	2300      	movs	r3, #0
 80063b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80063b8:	2301      	movs	r3, #1
 80063ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80063bc:	f107 030c 	add.w	r3, r7, #12
 80063c0:	4619      	mov	r1, r3
 80063c2:	4805      	ldr	r0, [pc, #20]	; (80063d8 <HAL_TIM_MspPostInit+0x70>)
 80063c4:	f000 ff62 	bl	800728c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80063c8:	bf00      	nop
 80063ca:	3720      	adds	r7, #32
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	40010000 	.word	0x40010000
 80063d4:	40023800 	.word	0x40023800
 80063d8:	40021000 	.word	0x40021000

080063dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	; 0x28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063e4:	f107 0314 	add.w	r3, r7, #20
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	605a      	str	r2, [r3, #4]
 80063ee:	609a      	str	r2, [r3, #8]
 80063f0:	60da      	str	r2, [r3, #12]
 80063f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a26      	ldr	r2, [pc, #152]	; (8006494 <HAL_UART_MspInit+0xb8>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d145      	bne.n	800648a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80063fe:	2300      	movs	r3, #0
 8006400:	613b      	str	r3, [r7, #16]
 8006402:	4b25      	ldr	r3, [pc, #148]	; (8006498 <HAL_UART_MspInit+0xbc>)
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	4a24      	ldr	r2, [pc, #144]	; (8006498 <HAL_UART_MspInit+0xbc>)
 8006408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800640c:	6413      	str	r3, [r2, #64]	; 0x40
 800640e:	4b22      	ldr	r3, [pc, #136]	; (8006498 <HAL_UART_MspInit+0xbc>)
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800641a:	2300      	movs	r3, #0
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	4b1e      	ldr	r3, [pc, #120]	; (8006498 <HAL_UART_MspInit+0xbc>)
 8006420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006422:	4a1d      	ldr	r2, [pc, #116]	; (8006498 <HAL_UART_MspInit+0xbc>)
 8006424:	f043 0304 	orr.w	r3, r3, #4
 8006428:	6313      	str	r3, [r2, #48]	; 0x30
 800642a:	4b1b      	ldr	r3, [pc, #108]	; (8006498 <HAL_UART_MspInit+0xbc>)
 800642c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642e:	f003 0304 	and.w	r3, r3, #4
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800643a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800643c:	2302      	movs	r3, #2
 800643e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006440:	2300      	movs	r3, #0
 8006442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006444:	2302      	movs	r3, #2
 8006446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006448:	2307      	movs	r3, #7
 800644a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800644c:	f107 0314 	add.w	r3, r7, #20
 8006450:	4619      	mov	r1, r3
 8006452:	4812      	ldr	r0, [pc, #72]	; (800649c <HAL_UART_MspInit+0xc0>)
 8006454:	f000 ff1a 	bl	800728c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006458:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800645c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800645e:	2302      	movs	r3, #2
 8006460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006462:	2302      	movs	r3, #2
 8006464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006466:	2302      	movs	r3, #2
 8006468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800646a:	2307      	movs	r3, #7
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800646e:	f107 0314 	add.w	r3, r7, #20
 8006472:	4619      	mov	r1, r3
 8006474:	4809      	ldr	r0, [pc, #36]	; (800649c <HAL_UART_MspInit+0xc0>)
 8006476:	f000 ff09 	bl	800728c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800647a:	2200      	movs	r2, #0
 800647c:	2105      	movs	r1, #5
 800647e:	2027      	movs	r0, #39	; 0x27
 8006480:	f000 fe3b 	bl	80070fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006484:	2027      	movs	r0, #39	; 0x27
 8006486:	f000 fe54 	bl	8007132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800648a:	bf00      	nop
 800648c:	3728      	adds	r7, #40	; 0x28
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	40004800 	.word	0x40004800
 8006498:	40023800 	.word	0x40023800
 800649c:	40020800 	.word	0x40020800

080064a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80064a4:	e7fe      	b.n	80064a4 <NMI_Handler+0x4>

080064a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80064a6:	b480      	push	{r7}
 80064a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064aa:	e7fe      	b.n	80064aa <HardFault_Handler+0x4>

080064ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064b0:	e7fe      	b.n	80064b0 <MemManage_Handler+0x4>

080064b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064b2:	b480      	push	{r7}
 80064b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064b6:	e7fe      	b.n	80064b6 <BusFault_Handler+0x4>

080064b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064bc:	e7fe      	b.n	80064bc <UsageFault_Handler+0x4>

080064be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80064be:	b480      	push	{r7}
 80064c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80064c2:	bf00      	nop
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064d0:	f000 f8f4 	bl	80066bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80064d4:	f006 fffa 	bl	800d4cc <xTaskGetSchedulerState>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d001      	beq.n	80064e2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80064de:	f007 fde3 	bl	800e0a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80064e2:	bf00      	nop
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OLED_DC_Pin);
 80064ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80064ee:	f001 f883 	bl	80075f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80064f2:	bf00      	nop
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80064fc:	4802      	ldr	r0, [pc, #8]	; (8006508 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80064fe:	f003 f99d 	bl	800983c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006502:	bf00      	nop
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	200002a0 	.word	0x200002a0

0800650c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006510:	4802      	ldr	r0, [pc, #8]	; (800651c <TIM4_IRQHandler+0x10>)
 8006512:	f003 f993 	bl	800983c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006516:	bf00      	nop
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000378 	.word	0x20000378

08006520 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006524:	4802      	ldr	r0, [pc, #8]	; (8006530 <USART3_IRQHandler+0x10>)
 8006526:	f004 fb4f 	bl	800abc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800652a:	bf00      	nop
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000408 	.word	0x20000408

08006534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800653c:	4a14      	ldr	r2, [pc, #80]	; (8006590 <_sbrk+0x5c>)
 800653e:	4b15      	ldr	r3, [pc, #84]	; (8006594 <_sbrk+0x60>)
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006548:	4b13      	ldr	r3, [pc, #76]	; (8006598 <_sbrk+0x64>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006550:	4b11      	ldr	r3, [pc, #68]	; (8006598 <_sbrk+0x64>)
 8006552:	4a12      	ldr	r2, [pc, #72]	; (800659c <_sbrk+0x68>)
 8006554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006556:	4b10      	ldr	r3, [pc, #64]	; (8006598 <_sbrk+0x64>)
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4413      	add	r3, r2
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	429a      	cmp	r2, r3
 8006562:	d207      	bcs.n	8006574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006564:	f008 fb34 	bl	800ebd0 <__errno>
 8006568:	4603      	mov	r3, r0
 800656a:	220c      	movs	r2, #12
 800656c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800656e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006572:	e009      	b.n	8006588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006574:	4b08      	ldr	r3, [pc, #32]	; (8006598 <_sbrk+0x64>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800657a:	4b07      	ldr	r3, [pc, #28]	; (8006598 <_sbrk+0x64>)
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4413      	add	r3, r2
 8006582:	4a05      	ldr	r2, [pc, #20]	; (8006598 <_sbrk+0x64>)
 8006584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006586:	68fb      	ldr	r3, [r7, #12]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20020000 	.word	0x20020000
 8006594:	00000400 	.word	0x00000400
 8006598:	20000584 	.word	0x20000584
 800659c:	20005428 	.word	0x20005428

080065a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80065a0:	b480      	push	{r7}
 80065a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065a4:	4b06      	ldr	r3, [pc, #24]	; (80065c0 <SystemInit+0x20>)
 80065a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065aa:	4a05      	ldr	r2, [pc, #20]	; (80065c0 <SystemInit+0x20>)
 80065ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80065b4:	bf00      	nop
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	e000ed00 	.word	0xe000ed00

080065c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80065c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80065fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80065c8:	480d      	ldr	r0, [pc, #52]	; (8006600 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80065ca:	490e      	ldr	r1, [pc, #56]	; (8006604 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80065cc:	4a0e      	ldr	r2, [pc, #56]	; (8006608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80065ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80065d0:	e002      	b.n	80065d8 <LoopCopyDataInit>

080065d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80065d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80065d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80065d6:	3304      	adds	r3, #4

080065d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80065d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80065da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80065dc:	d3f9      	bcc.n	80065d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80065de:	4a0b      	ldr	r2, [pc, #44]	; (800660c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80065e0:	4c0b      	ldr	r4, [pc, #44]	; (8006610 <LoopFillZerobss+0x26>)
  movs r3, #0
 80065e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80065e4:	e001      	b.n	80065ea <LoopFillZerobss>

080065e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80065e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80065e8:	3204      	adds	r2, #4

080065ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80065ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80065ec:	d3fb      	bcc.n	80065e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80065ee:	f7ff ffd7 	bl	80065a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80065f2:	f008 faf3 	bl	800ebdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80065f6:	f7fa fd15 	bl	8001024 <main>
  bx  lr    
 80065fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80065fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006604:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8006608:	08010cec 	.word	0x08010cec
  ldr r2, =_sbss
 800660c:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8006610:	20005424 	.word	0x20005424

08006614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006614:	e7fe      	b.n	8006614 <ADC_IRQHandler>
	...

08006618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800661c:	4b0e      	ldr	r3, [pc, #56]	; (8006658 <HAL_Init+0x40>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a0d      	ldr	r2, [pc, #52]	; (8006658 <HAL_Init+0x40>)
 8006622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006628:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <HAL_Init+0x40>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a0a      	ldr	r2, [pc, #40]	; (8006658 <HAL_Init+0x40>)
 800662e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006634:	4b08      	ldr	r3, [pc, #32]	; (8006658 <HAL_Init+0x40>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a07      	ldr	r2, [pc, #28]	; (8006658 <HAL_Init+0x40>)
 800663a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800663e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006640:	2003      	movs	r0, #3
 8006642:	f000 fd4f 	bl	80070e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006646:	200f      	movs	r0, #15
 8006648:	f000 f808 	bl	800665c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800664c:	f7ff fc54 	bl	8005ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	40023c00 	.word	0x40023c00

0800665c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006664:	4b12      	ldr	r3, [pc, #72]	; (80066b0 <HAL_InitTick+0x54>)
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	4b12      	ldr	r3, [pc, #72]	; (80066b4 <HAL_InitTick+0x58>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	4619      	mov	r1, r3
 800666e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006672:	fbb3 f3f1 	udiv	r3, r3, r1
 8006676:	fbb2 f3f3 	udiv	r3, r2, r3
 800667a:	4618      	mov	r0, r3
 800667c:	f000 fd67 	bl	800714e <HAL_SYSTICK_Config>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e00e      	b.n	80066a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b0f      	cmp	r3, #15
 800668e:	d80a      	bhi.n	80066a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006690:	2200      	movs	r2, #0
 8006692:	6879      	ldr	r1, [r7, #4]
 8006694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006698:	f000 fd2f 	bl	80070fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800669c:	4a06      	ldr	r2, [pc, #24]	; (80066b8 <HAL_InitTick+0x5c>)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e000      	b.n	80066a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20000140 	.word	0x20000140
 80066b4:	20000148 	.word	0x20000148
 80066b8:	20000144 	.word	0x20000144

080066bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80066bc:	b480      	push	{r7}
 80066be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80066c0:	4b06      	ldr	r3, [pc, #24]	; (80066dc <HAL_IncTick+0x20>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	461a      	mov	r2, r3
 80066c6:	4b06      	ldr	r3, [pc, #24]	; (80066e0 <HAL_IncTick+0x24>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4413      	add	r3, r2
 80066cc:	4a04      	ldr	r2, [pc, #16]	; (80066e0 <HAL_IncTick+0x24>)
 80066ce:	6013      	str	r3, [r2, #0]
}
 80066d0:	bf00      	nop
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20000148 	.word	0x20000148
 80066e0:	20000588 	.word	0x20000588

080066e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
  return uwTick;
 80066e8:	4b03      	ldr	r3, [pc, #12]	; (80066f8 <HAL_GetTick+0x14>)
 80066ea:	681b      	ldr	r3, [r3, #0]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	20000588 	.word	0x20000588

080066fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006704:	f7ff ffee 	bl	80066e4 <HAL_GetTick>
 8006708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006714:	d005      	beq.n	8006722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006716:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <HAL_Delay+0x44>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006722:	bf00      	nop
 8006724:	f7ff ffde 	bl	80066e4 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	429a      	cmp	r2, r3
 8006732:	d8f7      	bhi.n	8006724 <HAL_Delay+0x28>
  {
  }
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20000148 	.word	0x20000148

08006744 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e033      	b.n	80067c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	d109      	bne.n	8006776 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7ff fbf4 	bl	8005f50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f003 0310 	and.w	r3, r3, #16
 800677e:	2b00      	cmp	r3, #0
 8006780:	d118      	bne.n	80067b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800678a:	f023 0302 	bic.w	r3, r3, #2
 800678e:	f043 0202 	orr.w	r2, r3, #2
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fad8 	bl	8006d4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	f023 0303 	bic.w	r3, r3, #3
 80067aa:	f043 0201 	orr.w	r2, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	641a      	str	r2, [r3, #64]	; 0x40
 80067b2:	e001      	b.n	80067b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <HAL_ADC_Start+0x1a>
 80067e2:	2302      	movs	r3, #2
 80067e4:	e0b2      	b.n	800694c <HAL_ADC_Start+0x180>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d018      	beq.n	800682e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0201 	orr.w	r2, r2, #1
 800680a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800680c:	4b52      	ldr	r3, [pc, #328]	; (8006958 <HAL_ADC_Start+0x18c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a52      	ldr	r2, [pc, #328]	; (800695c <HAL_ADC_Start+0x190>)
 8006812:	fba2 2303 	umull	r2, r3, r2, r3
 8006816:	0c9a      	lsrs	r2, r3, #18
 8006818:	4613      	mov	r3, r2
 800681a:	005b      	lsls	r3, r3, #1
 800681c:	4413      	add	r3, r2
 800681e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006820:	e002      	b.n	8006828 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	3b01      	subs	r3, #1
 8006826:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1f9      	bne.n	8006822 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b01      	cmp	r3, #1
 800683a:	d17a      	bne.n	8006932 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006840:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006844:	f023 0301 	bic.w	r3, r3, #1
 8006848:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800685a:	2b00      	cmp	r3, #0
 800685c:	d007      	beq.n	800686e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006866:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800687a:	d106      	bne.n	800688a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006880:	f023 0206 	bic.w	r2, r3, #6
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	645a      	str	r2, [r3, #68]	; 0x44
 8006888:	e002      	b.n	8006890 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006898:	4b31      	ldr	r3, [pc, #196]	; (8006960 <HAL_ADC_Start+0x194>)
 800689a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80068a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f003 031f 	and.w	r3, r3, #31
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d12a      	bne.n	8006908 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a2b      	ldr	r2, [pc, #172]	; (8006964 <HAL_ADC_Start+0x198>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d015      	beq.n	80068e8 <HAL_ADC_Start+0x11c>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a29      	ldr	r2, [pc, #164]	; (8006968 <HAL_ADC_Start+0x19c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d105      	bne.n	80068d2 <HAL_ADC_Start+0x106>
 80068c6:	4b26      	ldr	r3, [pc, #152]	; (8006960 <HAL_ADC_Start+0x194>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a25      	ldr	r2, [pc, #148]	; (800696c <HAL_ADC_Start+0x1a0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d136      	bne.n	800694a <HAL_ADC_Start+0x17e>
 80068dc:	4b20      	ldr	r3, [pc, #128]	; (8006960 <HAL_ADC_Start+0x194>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f003 0310 	and.w	r3, r3, #16
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d130      	bne.n	800694a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d129      	bne.n	800694a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006904:	609a      	str	r2, [r3, #8]
 8006906:	e020      	b.n	800694a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a15      	ldr	r2, [pc, #84]	; (8006964 <HAL_ADC_Start+0x198>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d11b      	bne.n	800694a <HAL_ADC_Start+0x17e>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d114      	bne.n	800694a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689a      	ldr	r2, [r3, #8]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800692e:	609a      	str	r2, [r3, #8]
 8006930:	e00b      	b.n	800694a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	f043 0210 	orr.w	r2, r3, #16
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006942:	f043 0201 	orr.w	r2, r3, #1
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	20000140 	.word	0x20000140
 800695c:	431bde83 	.word	0x431bde83
 8006960:	40012300 	.word	0x40012300
 8006964:	40012000 	.word	0x40012000
 8006968:	40012100 	.word	0x40012100
 800696c:	40012200 	.word	0x40012200

08006970 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <HAL_ADC_Stop+0x16>
 8006982:	2302      	movs	r3, #2
 8006984:	e021      	b.n	80069ca <HAL_ADC_Stop+0x5a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0201 	bic.w	r2, r2, #1
 800699c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d109      	bne.n	80069c0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80069b4:	f023 0301 	bic.w	r3, r3, #1
 80069b8:	f043 0201 	orr.w	r2, r3, #1
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b084      	sub	sp, #16
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f2:	d113      	bne.n	8006a1c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80069fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a02:	d10b      	bne.n	8006a1c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	f043 0220 	orr.w	r2, r3, #32
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e063      	b.n	8006ae4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006a1c:	f7ff fe62 	bl	80066e4 <HAL_GetTick>
 8006a20:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006a22:	e021      	b.n	8006a68 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a2a:	d01d      	beq.n	8006a68 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d007      	beq.n	8006a42 <HAL_ADC_PollForConversion+0x6c>
 8006a32:	f7ff fe57 	bl	80066e4 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d212      	bcs.n	8006a68 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d00b      	beq.n	8006a68 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a54:	f043 0204 	orr.w	r2, r3, #4
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e03d      	b.n	8006ae4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d1d6      	bne.n	8006a24 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f06f 0212 	mvn.w	r2, #18
 8006a7e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d123      	bne.n	8006ae2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d11f      	bne.n	8006ae2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d006      	beq.n	8006abe <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d111      	bne.n	8006ae2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d105      	bne.n	8006ae2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	f043 0201 	orr.w	r2, r3, #1
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
	...

08006b08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_ADC_ConfigChannel+0x1c>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e105      	b.n	8006d30 <HAL_ADC_ConfigChannel+0x228>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b09      	cmp	r3, #9
 8006b32:	d925      	bls.n	8006b80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68d9      	ldr	r1, [r3, #12]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	461a      	mov	r2, r3
 8006b42:	4613      	mov	r3, r2
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	4413      	add	r3, r2
 8006b48:	3b1e      	subs	r3, #30
 8006b4a:	2207      	movs	r2, #7
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	43da      	mvns	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	400a      	ands	r2, r1
 8006b58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68d9      	ldr	r1, [r3, #12]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	4403      	add	r3, r0
 8006b72:	3b1e      	subs	r3, #30
 8006b74:	409a      	lsls	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	60da      	str	r2, [r3, #12]
 8006b7e:	e022      	b.n	8006bc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6919      	ldr	r1, [r3, #16]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	4613      	mov	r3, r2
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	4413      	add	r3, r2
 8006b94:	2207      	movs	r2, #7
 8006b96:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9a:	43da      	mvns	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	400a      	ands	r2, r1
 8006ba2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6919      	ldr	r1, [r3, #16]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	005b      	lsls	r3, r3, #1
 8006bba:	4403      	add	r3, r0
 8006bbc:	409a      	lsls	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2b06      	cmp	r3, #6
 8006bcc:	d824      	bhi.n	8006c18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	3b05      	subs	r3, #5
 8006be0:	221f      	movs	r2, #31
 8006be2:	fa02 f303 	lsl.w	r3, r2, r3
 8006be6:	43da      	mvns	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	400a      	ands	r2, r1
 8006bee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	4613      	mov	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	3b05      	subs	r3, #5
 8006c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	635a      	str	r2, [r3, #52]	; 0x34
 8006c16:	e04c      	b.n	8006cb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	2b0c      	cmp	r3, #12
 8006c1e:	d824      	bhi.n	8006c6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	3b23      	subs	r3, #35	; 0x23
 8006c32:	221f      	movs	r2, #31
 8006c34:	fa02 f303 	lsl.w	r3, r2, r3
 8006c38:	43da      	mvns	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	400a      	ands	r2, r1
 8006c40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	4618      	mov	r0, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	3b23      	subs	r3, #35	; 0x23
 8006c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	631a      	str	r2, [r3, #48]	; 0x30
 8006c68:	e023      	b.n	8006cb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	4613      	mov	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	3b41      	subs	r3, #65	; 0x41
 8006c7c:	221f      	movs	r2, #31
 8006c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c82:	43da      	mvns	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	400a      	ands	r2, r1
 8006c8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	4618      	mov	r0, r3
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	3b41      	subs	r3, #65	; 0x41
 8006ca6:	fa00 f203 	lsl.w	r2, r0, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006cb2:	4b22      	ldr	r3, [pc, #136]	; (8006d3c <HAL_ADC_ConfigChannel+0x234>)
 8006cb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a21      	ldr	r2, [pc, #132]	; (8006d40 <HAL_ADC_ConfigChannel+0x238>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d109      	bne.n	8006cd4 <HAL_ADC_ConfigChannel+0x1cc>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b12      	cmp	r3, #18
 8006cc6:	d105      	bne.n	8006cd4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a19      	ldr	r2, [pc, #100]	; (8006d40 <HAL_ADC_ConfigChannel+0x238>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d123      	bne.n	8006d26 <HAL_ADC_ConfigChannel+0x21e>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b10      	cmp	r3, #16
 8006ce4:	d003      	beq.n	8006cee <HAL_ADC_ConfigChannel+0x1e6>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b11      	cmp	r3, #17
 8006cec:	d11b      	bne.n	8006d26 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b10      	cmp	r3, #16
 8006d00:	d111      	bne.n	8006d26 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006d02:	4b10      	ldr	r3, [pc, #64]	; (8006d44 <HAL_ADC_ConfigChannel+0x23c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a10      	ldr	r2, [pc, #64]	; (8006d48 <HAL_ADC_ConfigChannel+0x240>)
 8006d08:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0c:	0c9a      	lsrs	r2, r3, #18
 8006d0e:	4613      	mov	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006d18:	e002      	b.n	8006d20 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1f9      	bne.n	8006d1a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	40012300 	.word	0x40012300
 8006d40:	40012000 	.word	0x40012000
 8006d44:	20000140 	.word	0x20000140
 8006d48:	431bde83 	.word	0x431bde83

08006d4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d54:	4b79      	ldr	r3, [pc, #484]	; (8006f3c <ADC_Init+0x1f0>)
 8006d56:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6859      	ldr	r1, [r3, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	021a      	lsls	r2, r3, #8
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006da4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6859      	ldr	r1, [r3, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689a      	ldr	r2, [r3, #8]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6899      	ldr	r1, [r3, #8]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68da      	ldr	r2, [r3, #12]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dde:	4a58      	ldr	r2, [pc, #352]	; (8006f40 <ADC_Init+0x1f4>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d022      	beq.n	8006e2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689a      	ldr	r2, [r3, #8]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006df2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6899      	ldr	r1, [r3, #8]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689a      	ldr	r2, [r3, #8]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006e14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6899      	ldr	r1, [r3, #8]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	609a      	str	r2, [r3, #8]
 8006e28:	e00f      	b.n	8006e4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006e48:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 0202 	bic.w	r2, r2, #2
 8006e58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6899      	ldr	r1, [r3, #8]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	7e1b      	ldrb	r3, [r3, #24]
 8006e64:	005a      	lsls	r2, r3, #1
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d01b      	beq.n	8006eb0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e86:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006e96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6859      	ldr	r1, [r3, #4]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	035a      	lsls	r2, r3, #13
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	605a      	str	r2, [r3, #4]
 8006eae:	e007      	b.n	8006ec0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ebe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	051a      	lsls	r2, r3, #20
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006ef4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6899      	ldr	r1, [r3, #8]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f02:	025a      	lsls	r2, r3, #9
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6899      	ldr	r1, [r3, #8]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	029a      	lsls	r2, r3, #10
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	609a      	str	r2, [r3, #8]
}
 8006f30:	bf00      	nop
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	40012300 	.word	0x40012300
 8006f40:	0f000001 	.word	0x0f000001

08006f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f54:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <__NVIC_SetPriorityGrouping+0x44>)
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f60:	4013      	ands	r3, r2
 8006f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f76:	4a04      	ldr	r2, [pc, #16]	; (8006f88 <__NVIC_SetPriorityGrouping+0x44>)
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	60d3      	str	r3, [r2, #12]
}
 8006f7c:	bf00      	nop
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	e000ed00 	.word	0xe000ed00

08006f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f90:	4b04      	ldr	r3, [pc, #16]	; (8006fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	0a1b      	lsrs	r3, r3, #8
 8006f96:	f003 0307 	and.w	r3, r3, #7
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	e000ed00 	.word	0xe000ed00

08006fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	db0b      	blt.n	8006fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	f003 021f 	and.w	r2, r3, #31
 8006fc0:	4907      	ldr	r1, [pc, #28]	; (8006fe0 <__NVIC_EnableIRQ+0x38>)
 8006fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc6:	095b      	lsrs	r3, r3, #5
 8006fc8:	2001      	movs	r0, #1
 8006fca:	fa00 f202 	lsl.w	r2, r0, r2
 8006fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006fd2:	bf00      	nop
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	e000e100 	.word	0xe000e100

08006fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	6039      	str	r1, [r7, #0]
 8006fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	db0a      	blt.n	800700e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	490c      	ldr	r1, [pc, #48]	; (8007030 <__NVIC_SetPriority+0x4c>)
 8006ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007002:	0112      	lsls	r2, r2, #4
 8007004:	b2d2      	uxtb	r2, r2
 8007006:	440b      	add	r3, r1
 8007008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800700c:	e00a      	b.n	8007024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	b2da      	uxtb	r2, r3
 8007012:	4908      	ldr	r1, [pc, #32]	; (8007034 <__NVIC_SetPriority+0x50>)
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	f003 030f 	and.w	r3, r3, #15
 800701a:	3b04      	subs	r3, #4
 800701c:	0112      	lsls	r2, r2, #4
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	440b      	add	r3, r1
 8007022:	761a      	strb	r2, [r3, #24]
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	e000e100 	.word	0xe000e100
 8007034:	e000ed00 	.word	0xe000ed00

08007038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007038:	b480      	push	{r7}
 800703a:	b089      	sub	sp, #36	; 0x24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	f1c3 0307 	rsb	r3, r3, #7
 8007052:	2b04      	cmp	r3, #4
 8007054:	bf28      	it	cs
 8007056:	2304      	movcs	r3, #4
 8007058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	3304      	adds	r3, #4
 800705e:	2b06      	cmp	r3, #6
 8007060:	d902      	bls.n	8007068 <NVIC_EncodePriority+0x30>
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	3b03      	subs	r3, #3
 8007066:	e000      	b.n	800706a <NVIC_EncodePriority+0x32>
 8007068:	2300      	movs	r3, #0
 800706a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800706c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	fa02 f303 	lsl.w	r3, r2, r3
 8007076:	43da      	mvns	r2, r3
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	401a      	ands	r2, r3
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	fa01 f303 	lsl.w	r3, r1, r3
 800708a:	43d9      	mvns	r1, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007090:	4313      	orrs	r3, r2
         );
}
 8007092:	4618      	mov	r0, r3
 8007094:	3724      	adds	r7, #36	; 0x24
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
	...

080070a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070b0:	d301      	bcc.n	80070b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80070b2:	2301      	movs	r3, #1
 80070b4:	e00f      	b.n	80070d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070b6:	4a0a      	ldr	r2, [pc, #40]	; (80070e0 <SysTick_Config+0x40>)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070be:	210f      	movs	r1, #15
 80070c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070c4:	f7ff ff8e 	bl	8006fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070c8:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <SysTick_Config+0x40>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070ce:	4b04      	ldr	r3, [pc, #16]	; (80070e0 <SysTick_Config+0x40>)
 80070d0:	2207      	movs	r2, #7
 80070d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	e000e010 	.word	0xe000e010

080070e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff ff29 	bl	8006f44 <__NVIC_SetPriorityGrouping>
}
 80070f2:	bf00      	nop
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b086      	sub	sp, #24
 80070fe:	af00      	add	r7, sp, #0
 8007100:	4603      	mov	r3, r0
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	607a      	str	r2, [r7, #4]
 8007106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007108:	2300      	movs	r3, #0
 800710a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800710c:	f7ff ff3e 	bl	8006f8c <__NVIC_GetPriorityGrouping>
 8007110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	68b9      	ldr	r1, [r7, #8]
 8007116:	6978      	ldr	r0, [r7, #20]
 8007118:	f7ff ff8e 	bl	8007038 <NVIC_EncodePriority>
 800711c:	4602      	mov	r2, r0
 800711e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007122:	4611      	mov	r1, r2
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff ff5d 	bl	8006fe4 <__NVIC_SetPriority>
}
 800712a:	bf00      	nop
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	4603      	mov	r3, r0
 800713a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800713c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007140:	4618      	mov	r0, r3
 8007142:	f7ff ff31 	bl	8006fa8 <__NVIC_EnableIRQ>
}
 8007146:	bf00      	nop
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff ffa2 	bl	80070a0 <SysTick_Config>
 800715c:	4603      	mov	r3, r0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007172:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007174:	f7ff fab6 	bl	80066e4 <HAL_GetTick>
 8007178:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d008      	beq.n	8007198 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2280      	movs	r2, #128	; 0x80
 800718a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e052      	b.n	800723e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0216 	bic.w	r2, r2, #22
 80071a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	695a      	ldr	r2, [r3, #20]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d103      	bne.n	80071c8 <HAL_DMA_Abort+0x62>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d007      	beq.n	80071d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0208 	bic.w	r2, r2, #8
 80071d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0201 	bic.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071e8:	e013      	b.n	8007212 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071ea:	f7ff fa7b 	bl	80066e4 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b05      	cmp	r3, #5
 80071f6:	d90c      	bls.n	8007212 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2220      	movs	r2, #32
 80071fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2203      	movs	r2, #3
 8007202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e015      	b.n	800723e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e4      	bne.n	80071ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007224:	223f      	movs	r2, #63	; 0x3f
 8007226:	409a      	lsls	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b02      	cmp	r3, #2
 8007258:	d004      	beq.n	8007264 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2280      	movs	r2, #128	; 0x80
 800725e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e00c      	b.n	800727e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2205      	movs	r2, #5
 8007268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0201 	bic.w	r2, r2, #1
 800727a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
	...

0800728c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800728c:	b480      	push	{r7}
 800728e:	b089      	sub	sp, #36	; 0x24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800729a:	2300      	movs	r3, #0
 800729c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800729e:	2300      	movs	r3, #0
 80072a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072a2:	2300      	movs	r3, #0
 80072a4:	61fb      	str	r3, [r7, #28]
 80072a6:	e16b      	b.n	8007580 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80072a8:	2201      	movs	r2, #1
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	fa02 f303 	lsl.w	r3, r2, r3
 80072b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4013      	ands	r3, r2
 80072ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	f040 815a 	bne.w	800757a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d005      	beq.n	80072de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d130      	bne.n	8007340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	2203      	movs	r2, #3
 80072ea:	fa02 f303 	lsl.w	r3, r2, r3
 80072ee:	43db      	mvns	r3, r3
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	4013      	ands	r3, r2
 80072f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	4313      	orrs	r3, r2
 8007306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007314:	2201      	movs	r2, #1
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	fa02 f303 	lsl.w	r3, r2, r3
 800731c:	43db      	mvns	r3, r3
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	4013      	ands	r3, r2
 8007322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	091b      	lsrs	r3, r3, #4
 800732a:	f003 0201 	and.w	r2, r3, #1
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	fa02 f303 	lsl.w	r3, r2, r3
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	4313      	orrs	r3, r2
 8007338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69ba      	ldr	r2, [r7, #24]
 800733e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f003 0303 	and.w	r3, r3, #3
 8007348:	2b03      	cmp	r3, #3
 800734a:	d017      	beq.n	800737c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	2203      	movs	r2, #3
 8007358:	fa02 f303 	lsl.w	r3, r2, r3
 800735c:	43db      	mvns	r3, r3
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	4013      	ands	r3, r2
 8007362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	fa02 f303 	lsl.w	r3, r2, r3
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	4313      	orrs	r3, r2
 8007374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f003 0303 	and.w	r3, r3, #3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d123      	bne.n	80073d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	08da      	lsrs	r2, r3, #3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3208      	adds	r2, #8
 8007390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	f003 0307 	and.w	r3, r3, #7
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	220f      	movs	r2, #15
 80073a0:	fa02 f303 	lsl.w	r3, r2, r3
 80073a4:	43db      	mvns	r3, r3
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	4013      	ands	r3, r2
 80073aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	691a      	ldr	r2, [r3, #16]
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	4313      	orrs	r3, r2
 80073c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	08da      	lsrs	r2, r3, #3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3208      	adds	r2, #8
 80073ca:	69b9      	ldr	r1, [r7, #24]
 80073cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	005b      	lsls	r3, r3, #1
 80073da:	2203      	movs	r2, #3
 80073dc:	fa02 f303 	lsl.w	r3, r2, r3
 80073e0:	43db      	mvns	r3, r3
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	4013      	ands	r3, r2
 80073e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f003 0203 	and.w	r2, r3, #3
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	fa02 f303 	lsl.w	r3, r2, r3
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 80b4 	beq.w	800757a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007412:	2300      	movs	r3, #0
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	4b60      	ldr	r3, [pc, #384]	; (8007598 <HAL_GPIO_Init+0x30c>)
 8007418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741a:	4a5f      	ldr	r2, [pc, #380]	; (8007598 <HAL_GPIO_Init+0x30c>)
 800741c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007420:	6453      	str	r3, [r2, #68]	; 0x44
 8007422:	4b5d      	ldr	r3, [pc, #372]	; (8007598 <HAL_GPIO_Init+0x30c>)
 8007424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800742e:	4a5b      	ldr	r2, [pc, #364]	; (800759c <HAL_GPIO_Init+0x310>)
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	089b      	lsrs	r3, r3, #2
 8007434:	3302      	adds	r3, #2
 8007436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800743a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	f003 0303 	and.w	r3, r3, #3
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	220f      	movs	r2, #15
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	43db      	mvns	r3, r3
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	4013      	ands	r3, r2
 8007450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a52      	ldr	r2, [pc, #328]	; (80075a0 <HAL_GPIO_Init+0x314>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d02b      	beq.n	80074b2 <HAL_GPIO_Init+0x226>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a51      	ldr	r2, [pc, #324]	; (80075a4 <HAL_GPIO_Init+0x318>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d025      	beq.n	80074ae <HAL_GPIO_Init+0x222>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a50      	ldr	r2, [pc, #320]	; (80075a8 <HAL_GPIO_Init+0x31c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d01f      	beq.n	80074aa <HAL_GPIO_Init+0x21e>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a4f      	ldr	r2, [pc, #316]	; (80075ac <HAL_GPIO_Init+0x320>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d019      	beq.n	80074a6 <HAL_GPIO_Init+0x21a>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a4e      	ldr	r2, [pc, #312]	; (80075b0 <HAL_GPIO_Init+0x324>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d013      	beq.n	80074a2 <HAL_GPIO_Init+0x216>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a4d      	ldr	r2, [pc, #308]	; (80075b4 <HAL_GPIO_Init+0x328>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00d      	beq.n	800749e <HAL_GPIO_Init+0x212>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a4c      	ldr	r2, [pc, #304]	; (80075b8 <HAL_GPIO_Init+0x32c>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d007      	beq.n	800749a <HAL_GPIO_Init+0x20e>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a4b      	ldr	r2, [pc, #300]	; (80075bc <HAL_GPIO_Init+0x330>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d101      	bne.n	8007496 <HAL_GPIO_Init+0x20a>
 8007492:	2307      	movs	r3, #7
 8007494:	e00e      	b.n	80074b4 <HAL_GPIO_Init+0x228>
 8007496:	2308      	movs	r3, #8
 8007498:	e00c      	b.n	80074b4 <HAL_GPIO_Init+0x228>
 800749a:	2306      	movs	r3, #6
 800749c:	e00a      	b.n	80074b4 <HAL_GPIO_Init+0x228>
 800749e:	2305      	movs	r3, #5
 80074a0:	e008      	b.n	80074b4 <HAL_GPIO_Init+0x228>
 80074a2:	2304      	movs	r3, #4
 80074a4:	e006      	b.n	80074b4 <HAL_GPIO_Init+0x228>
 80074a6:	2303      	movs	r3, #3
 80074a8:	e004      	b.n	80074b4 <HAL_GPIO_Init+0x228>
 80074aa:	2302      	movs	r3, #2
 80074ac:	e002      	b.n	80074b4 <HAL_GPIO_Init+0x228>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e000      	b.n	80074b4 <HAL_GPIO_Init+0x228>
 80074b2:	2300      	movs	r3, #0
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	f002 0203 	and.w	r2, r2, #3
 80074ba:	0092      	lsls	r2, r2, #2
 80074bc:	4093      	lsls	r3, r2
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80074c4:	4935      	ldr	r1, [pc, #212]	; (800759c <HAL_GPIO_Init+0x310>)
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	089b      	lsrs	r3, r3, #2
 80074ca:	3302      	adds	r3, #2
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80074d2:	4b3b      	ldr	r3, [pc, #236]	; (80075c0 <HAL_GPIO_Init+0x334>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	43db      	mvns	r3, r3
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	4013      	ands	r3, r2
 80074e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80074f6:	4a32      	ldr	r2, [pc, #200]	; (80075c0 <HAL_GPIO_Init+0x334>)
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80074fc:	4b30      	ldr	r3, [pc, #192]	; (80075c0 <HAL_GPIO_Init+0x334>)
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	43db      	mvns	r3, r3
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	4013      	ands	r3, r2
 800750a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	4313      	orrs	r3, r2
 800751e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007520:	4a27      	ldr	r2, [pc, #156]	; (80075c0 <HAL_GPIO_Init+0x334>)
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007526:	4b26      	ldr	r3, [pc, #152]	; (80075c0 <HAL_GPIO_Init+0x334>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	43db      	mvns	r3, r3
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	4013      	ands	r3, r2
 8007534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	4313      	orrs	r3, r2
 8007548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800754a:	4a1d      	ldr	r2, [pc, #116]	; (80075c0 <HAL_GPIO_Init+0x334>)
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007550:	4b1b      	ldr	r3, [pc, #108]	; (80075c0 <HAL_GPIO_Init+0x334>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	43db      	mvns	r3, r3
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	4013      	ands	r3, r2
 800755e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	4313      	orrs	r3, r2
 8007572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007574:	4a12      	ldr	r2, [pc, #72]	; (80075c0 <HAL_GPIO_Init+0x334>)
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	3301      	adds	r3, #1
 800757e:	61fb      	str	r3, [r7, #28]
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	2b0f      	cmp	r3, #15
 8007584:	f67f ae90 	bls.w	80072a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	3724      	adds	r7, #36	; 0x24
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40023800 	.word	0x40023800
 800759c:	40013800 	.word	0x40013800
 80075a0:	40020000 	.word	0x40020000
 80075a4:	40020400 	.word	0x40020400
 80075a8:	40020800 	.word	0x40020800
 80075ac:	40020c00 	.word	0x40020c00
 80075b0:	40021000 	.word	0x40021000
 80075b4:	40021400 	.word	0x40021400
 80075b8:	40021800 	.word	0x40021800
 80075bc:	40021c00 	.word	0x40021c00
 80075c0:	40013c00 	.word	0x40013c00

080075c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	807b      	strh	r3, [r7, #2]
 80075d0:	4613      	mov	r3, r2
 80075d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075d4:	787b      	ldrb	r3, [r7, #1]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075da:	887a      	ldrh	r2, [r7, #2]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80075e0:	e003      	b.n	80075ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80075e2:	887b      	ldrh	r3, [r7, #2]
 80075e4:	041a      	lsls	r2, r3, #16
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	619a      	str	r2, [r3, #24]
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	4603      	mov	r3, r0
 8007600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007602:	4b08      	ldr	r3, [pc, #32]	; (8007624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007604:	695a      	ldr	r2, [r3, #20]
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	4013      	ands	r3, r2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d006      	beq.n	800761c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800760e:	4a05      	ldr	r2, [pc, #20]	; (8007624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007610:	88fb      	ldrh	r3, [r7, #6]
 8007612:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007614:	88fb      	ldrh	r3, [r7, #6]
 8007616:	4618      	mov	r0, r3
 8007618:	f7fa fe62 	bl	80022e0 <HAL_GPIO_EXTI_Callback>
  }
}
 800761c:	bf00      	nop
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40013c00 	.word	0x40013c00

08007628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e12b      	b.n	8007892 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d106      	bne.n	8007654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7fe fcf2 	bl	8006038 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2224      	movs	r2, #36	; 0x24
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0201 	bic.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800767a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800768a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800768c:	f001 fbe4 	bl	8008e58 <HAL_RCC_GetPCLK1Freq>
 8007690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	4a81      	ldr	r2, [pc, #516]	; (800789c <HAL_I2C_Init+0x274>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d807      	bhi.n	80076ac <HAL_I2C_Init+0x84>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4a80      	ldr	r2, [pc, #512]	; (80078a0 <HAL_I2C_Init+0x278>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	bf94      	ite	ls
 80076a4:	2301      	movls	r3, #1
 80076a6:	2300      	movhi	r3, #0
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	e006      	b.n	80076ba <HAL_I2C_Init+0x92>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4a7d      	ldr	r2, [pc, #500]	; (80078a4 <HAL_I2C_Init+0x27c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	bf94      	ite	ls
 80076b4:	2301      	movls	r3, #1
 80076b6:	2300      	movhi	r3, #0
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e0e7      	b.n	8007892 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4a78      	ldr	r2, [pc, #480]	; (80078a8 <HAL_I2C_Init+0x280>)
 80076c6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ca:	0c9b      	lsrs	r3, r3, #18
 80076cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	430a      	orrs	r2, r1
 80076e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	4a6a      	ldr	r2, [pc, #424]	; (800789c <HAL_I2C_Init+0x274>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d802      	bhi.n	80076fc <HAL_I2C_Init+0xd4>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	3301      	adds	r3, #1
 80076fa:	e009      	b.n	8007710 <HAL_I2C_Init+0xe8>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007702:	fb02 f303 	mul.w	r3, r2, r3
 8007706:	4a69      	ldr	r2, [pc, #420]	; (80078ac <HAL_I2C_Init+0x284>)
 8007708:	fba2 2303 	umull	r2, r3, r2, r3
 800770c:	099b      	lsrs	r3, r3, #6
 800770e:	3301      	adds	r3, #1
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	6812      	ldr	r2, [r2, #0]
 8007714:	430b      	orrs	r3, r1
 8007716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007722:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	495c      	ldr	r1, [pc, #368]	; (800789c <HAL_I2C_Init+0x274>)
 800772c:	428b      	cmp	r3, r1
 800772e:	d819      	bhi.n	8007764 <HAL_I2C_Init+0x13c>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	1e59      	subs	r1, r3, #1
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	005b      	lsls	r3, r3, #1
 800773a:	fbb1 f3f3 	udiv	r3, r1, r3
 800773e:	1c59      	adds	r1, r3, #1
 8007740:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007744:	400b      	ands	r3, r1
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00a      	beq.n	8007760 <HAL_I2C_Init+0x138>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	1e59      	subs	r1, r3, #1
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	fbb1 f3f3 	udiv	r3, r1, r3
 8007758:	3301      	adds	r3, #1
 800775a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800775e:	e051      	b.n	8007804 <HAL_I2C_Init+0x1dc>
 8007760:	2304      	movs	r3, #4
 8007762:	e04f      	b.n	8007804 <HAL_I2C_Init+0x1dc>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d111      	bne.n	8007790 <HAL_I2C_Init+0x168>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	1e58      	subs	r0, r3, #1
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6859      	ldr	r1, [r3, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	440b      	add	r3, r1
 800777a:	fbb0 f3f3 	udiv	r3, r0, r3
 800777e:	3301      	adds	r3, #1
 8007780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007784:	2b00      	cmp	r3, #0
 8007786:	bf0c      	ite	eq
 8007788:	2301      	moveq	r3, #1
 800778a:	2300      	movne	r3, #0
 800778c:	b2db      	uxtb	r3, r3
 800778e:	e012      	b.n	80077b6 <HAL_I2C_Init+0x18e>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	1e58      	subs	r0, r3, #1
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6859      	ldr	r1, [r3, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	440b      	add	r3, r1
 800779e:	0099      	lsls	r1, r3, #2
 80077a0:	440b      	add	r3, r1
 80077a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80077a6:	3301      	adds	r3, #1
 80077a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	bf0c      	ite	eq
 80077b0:	2301      	moveq	r3, #1
 80077b2:	2300      	movne	r3, #0
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <HAL_I2C_Init+0x196>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e022      	b.n	8007804 <HAL_I2C_Init+0x1dc>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10e      	bne.n	80077e4 <HAL_I2C_Init+0x1bc>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	1e58      	subs	r0, r3, #1
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6859      	ldr	r1, [r3, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	005b      	lsls	r3, r3, #1
 80077d2:	440b      	add	r3, r1
 80077d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80077d8:	3301      	adds	r3, #1
 80077da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e2:	e00f      	b.n	8007804 <HAL_I2C_Init+0x1dc>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	1e58      	subs	r0, r3, #1
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6859      	ldr	r1, [r3, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	440b      	add	r3, r1
 80077f2:	0099      	lsls	r1, r3, #2
 80077f4:	440b      	add	r3, r1
 80077f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80077fa:	3301      	adds	r3, #1
 80077fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	6809      	ldr	r1, [r1, #0]
 8007808:	4313      	orrs	r3, r2
 800780a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	69da      	ldr	r2, [r3, #28]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	431a      	orrs	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	430a      	orrs	r2, r1
 8007826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	6911      	ldr	r1, [r2, #16]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	68d2      	ldr	r2, [r2, #12]
 800783e:	4311      	orrs	r1, r2
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	6812      	ldr	r2, [r2, #0]
 8007844:	430b      	orrs	r3, r1
 8007846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	695a      	ldr	r2, [r3, #20]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	431a      	orrs	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f042 0201 	orr.w	r2, r2, #1
 8007872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2220      	movs	r2, #32
 800787e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	000186a0 	.word	0x000186a0
 80078a0:	001e847f 	.word	0x001e847f
 80078a4:	003d08ff 	.word	0x003d08ff
 80078a8:	431bde83 	.word	0x431bde83
 80078ac:	10624dd3 	.word	0x10624dd3

080078b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	4608      	mov	r0, r1
 80078ba:	4611      	mov	r1, r2
 80078bc:	461a      	mov	r2, r3
 80078be:	4603      	mov	r3, r0
 80078c0:	817b      	strh	r3, [r7, #10]
 80078c2:	460b      	mov	r3, r1
 80078c4:	813b      	strh	r3, [r7, #8]
 80078c6:	4613      	mov	r3, r2
 80078c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078ca:	f7fe ff0b 	bl	80066e4 <HAL_GetTick>
 80078ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b20      	cmp	r3, #32
 80078da:	f040 80d9 	bne.w	8007a90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	2319      	movs	r3, #25
 80078e4:	2201      	movs	r2, #1
 80078e6:	496d      	ldr	r1, [pc, #436]	; (8007a9c <HAL_I2C_Mem_Write+0x1ec>)
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 fc7f 	bl	80081ec <I2C_WaitOnFlagUntilTimeout>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80078f4:	2302      	movs	r3, #2
 80078f6:	e0cc      	b.n	8007a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d101      	bne.n	8007906 <HAL_I2C_Mem_Write+0x56>
 8007902:	2302      	movs	r3, #2
 8007904:	e0c5      	b.n	8007a92 <HAL_I2C_Mem_Write+0x1e2>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b01      	cmp	r3, #1
 800791a:	d007      	beq.n	800792c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f042 0201 	orr.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800793a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2221      	movs	r2, #33	; 0x21
 8007940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2240      	movs	r2, #64	; 0x40
 8007948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6a3a      	ldr	r2, [r7, #32]
 8007956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800795c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007962:	b29a      	uxth	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4a4d      	ldr	r2, [pc, #308]	; (8007aa0 <HAL_I2C_Mem_Write+0x1f0>)
 800796c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800796e:	88f8      	ldrh	r0, [r7, #6]
 8007970:	893a      	ldrh	r2, [r7, #8]
 8007972:	8979      	ldrh	r1, [r7, #10]
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	9301      	str	r3, [sp, #4]
 8007978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	4603      	mov	r3, r0
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f000 fab6 	bl	8007ef0 <I2C_RequestMemoryWrite>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d052      	beq.n	8007a30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e081      	b.n	8007a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 fd00 	bl	8008398 <I2C_WaitOnTXEFlagUntilTimeout>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00d      	beq.n	80079ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d107      	bne.n	80079b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e06b      	b.n	8007a92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	781a      	ldrb	r2, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	d11b      	bne.n	8007a30 <HAL_I2C_Mem_Write+0x180>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d017      	beq.n	8007a30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a04:	781a      	ldrb	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1aa      	bne.n	800798e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 fcec 	bl	800841a <I2C_WaitOnBTFFlagUntilTimeout>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00d      	beq.n	8007a64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	d107      	bne.n	8007a60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e016      	b.n	8007a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2220      	movs	r2, #32
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	e000      	b.n	8007a92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007a90:	2302      	movs	r3, #2
  }
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3718      	adds	r7, #24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	00100002 	.word	0x00100002
 8007aa0:	ffff0000 	.word	0xffff0000

08007aa4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b08c      	sub	sp, #48	; 0x30
 8007aa8:	af02      	add	r7, sp, #8
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	4608      	mov	r0, r1
 8007aae:	4611      	mov	r1, r2
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	817b      	strh	r3, [r7, #10]
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	813b      	strh	r3, [r7, #8]
 8007aba:	4613      	mov	r3, r2
 8007abc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007abe:	f7fe fe11 	bl	80066e4 <HAL_GetTick>
 8007ac2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b20      	cmp	r3, #32
 8007ace:	f040 8208 	bne.w	8007ee2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	2319      	movs	r3, #25
 8007ad8:	2201      	movs	r2, #1
 8007ada:	497b      	ldr	r1, [pc, #492]	; (8007cc8 <HAL_I2C_Mem_Read+0x224>)
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 fb85 	bl	80081ec <I2C_WaitOnFlagUntilTimeout>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e1fb      	b.n	8007ee4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d101      	bne.n	8007afa <HAL_I2C_Mem_Read+0x56>
 8007af6:	2302      	movs	r3, #2
 8007af8:	e1f4      	b.n	8007ee4 <HAL_I2C_Mem_Read+0x440>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d007      	beq.n	8007b20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f042 0201 	orr.w	r2, r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2222      	movs	r2, #34	; 0x22
 8007b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2240      	movs	r2, #64	; 0x40
 8007b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007b50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4a5b      	ldr	r2, [pc, #364]	; (8007ccc <HAL_I2C_Mem_Read+0x228>)
 8007b60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b62:	88f8      	ldrh	r0, [r7, #6]
 8007b64:	893a      	ldrh	r2, [r7, #8]
 8007b66:	8979      	ldrh	r1, [r7, #10]
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	9301      	str	r3, [sp, #4]
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	4603      	mov	r3, r0
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 fa52 	bl	800801c <I2C_RequestMemoryRead>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e1b0      	b.n	8007ee4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d113      	bne.n	8007bb2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	623b      	str	r3, [r7, #32]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	623b      	str	r3, [r7, #32]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	623b      	str	r3, [r7, #32]
 8007b9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bae:	601a      	str	r2, [r3, #0]
 8007bb0:	e184      	b.n	8007ebc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d11b      	bne.n	8007bf2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bca:	2300      	movs	r3, #0
 8007bcc:	61fb      	str	r3, [r7, #28]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	61fb      	str	r3, [r7, #28]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	61fb      	str	r3, [r7, #28]
 8007bde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	e164      	b.n	8007ebc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d11b      	bne.n	8007c32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61bb      	str	r3, [r7, #24]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	61bb      	str	r3, [r7, #24]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	61bb      	str	r3, [r7, #24]
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	e144      	b.n	8007ebc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c32:	2300      	movs	r3, #0
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	617b      	str	r3, [r7, #20]
 8007c46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007c48:	e138      	b.n	8007ebc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	f200 80f1 	bhi.w	8007e36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d123      	bne.n	8007ca4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fc1b 	bl	800849c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e139      	b.n	8007ee4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	691a      	ldr	r2, [r3, #16]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7a:	b2d2      	uxtb	r2, r2
 8007c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ca2:	e10b      	b.n	8007ebc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d14e      	bne.n	8007d4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	4906      	ldr	r1, [pc, #24]	; (8007cd0 <HAL_I2C_Mem_Read+0x22c>)
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 fa98 	bl	80081ec <I2C_WaitOnFlagUntilTimeout>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d008      	beq.n	8007cd4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e10e      	b.n	8007ee4 <HAL_I2C_Mem_Read+0x440>
 8007cc6:	bf00      	nop
 8007cc8:	00100002 	.word	0x00100002
 8007ccc:	ffff0000 	.word	0xffff0000
 8007cd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	691a      	ldr	r2, [r3, #16]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cee:	b2d2      	uxtb	r2, r2
 8007cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	1c5a      	adds	r2, r3, #1
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d00:	3b01      	subs	r3, #1
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	691a      	ldr	r2, [r3, #16]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	b2d2      	uxtb	r2, r2
 8007d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d32:	3b01      	subs	r3, #1
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	3b01      	subs	r3, #1
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d48:	e0b8      	b.n	8007ebc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d50:	2200      	movs	r2, #0
 8007d52:	4966      	ldr	r1, [pc, #408]	; (8007eec <HAL_I2C_Mem_Read+0x448>)
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 fa49 	bl	80081ec <I2C_WaitOnFlagUntilTimeout>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e0bf      	b.n	8007ee4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	691a      	ldr	r2, [r3, #16]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	b2d2      	uxtb	r2, r2
 8007d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d90:	3b01      	subs	r3, #1
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dac:	2200      	movs	r2, #0
 8007dae:	494f      	ldr	r1, [pc, #316]	; (8007eec <HAL_I2C_Mem_Read+0x448>)
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 fa1b 	bl	80081ec <I2C_WaitOnFlagUntilTimeout>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e091      	b.n	8007ee4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	691a      	ldr	r2, [r3, #16]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dda:	b2d2      	uxtb	r2, r2
 8007ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	691a      	ldr	r2, [r3, #16]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	b2d2      	uxtb	r2, r2
 8007e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e34:	e042      	b.n	8007ebc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 fb2e 	bl	800849c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e04c      	b.n	8007ee4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	691a      	ldr	r2, [r3, #16]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e54:	b2d2      	uxtb	r2, r2
 8007e56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e66:	3b01      	subs	r3, #1
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	3b01      	subs	r3, #1
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	f003 0304 	and.w	r3, r3, #4
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d118      	bne.n	8007ebc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	691a      	ldr	r2, [r3, #16]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e94:	b2d2      	uxtb	r2, r2
 8007e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f47f aec2 	bne.w	8007c4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2220      	movs	r2, #32
 8007eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e000      	b.n	8007ee4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007ee2:	2302      	movs	r3, #2
  }
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3728      	adds	r7, #40	; 0x28
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	00010004 	.word	0x00010004

08007ef0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af02      	add	r7, sp, #8
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	4608      	mov	r0, r1
 8007efa:	4611      	mov	r1, r2
 8007efc:	461a      	mov	r2, r3
 8007efe:	4603      	mov	r3, r0
 8007f00:	817b      	strh	r3, [r7, #10]
 8007f02:	460b      	mov	r3, r1
 8007f04:	813b      	strh	r3, [r7, #8]
 8007f06:	4613      	mov	r3, r2
 8007f08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	6a3b      	ldr	r3, [r7, #32]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f000 f960 	bl	80081ec <I2C_WaitOnFlagUntilTimeout>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00d      	beq.n	8007f4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f40:	d103      	bne.n	8007f4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e05f      	b.n	800800e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f4e:	897b      	ldrh	r3, [r7, #10]
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	461a      	mov	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	6a3a      	ldr	r2, [r7, #32]
 8007f62:	492d      	ldr	r1, [pc, #180]	; (8008018 <I2C_RequestMemoryWrite+0x128>)
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 f998 	bl	800829a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e04c      	b.n	800800e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f74:	2300      	movs	r3, #0
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	617b      	str	r3, [r7, #20]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	617b      	str	r3, [r7, #20]
 8007f88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f8c:	6a39      	ldr	r1, [r7, #32]
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 fa02 	bl	8008398 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00d      	beq.n	8007fb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	d107      	bne.n	8007fb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e02b      	b.n	800800e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007fb6:	88fb      	ldrh	r3, [r7, #6]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d105      	bne.n	8007fc8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fbc:	893b      	ldrh	r3, [r7, #8]
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	611a      	str	r2, [r3, #16]
 8007fc6:	e021      	b.n	800800c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007fc8:	893b      	ldrh	r3, [r7, #8]
 8007fca:	0a1b      	lsrs	r3, r3, #8
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fd8:	6a39      	ldr	r1, [r7, #32]
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 f9dc 	bl	8008398 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00d      	beq.n	8008002 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d107      	bne.n	8007ffe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ffc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e005      	b.n	800800e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008002:	893b      	ldrh	r3, [r7, #8]
 8008004:	b2da      	uxtb	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3718      	adds	r7, #24
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	00010002 	.word	0x00010002

0800801c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af02      	add	r7, sp, #8
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	4608      	mov	r0, r1
 8008026:	4611      	mov	r1, r2
 8008028:	461a      	mov	r2, r3
 800802a:	4603      	mov	r3, r0
 800802c:	817b      	strh	r3, [r7, #10]
 800802e:	460b      	mov	r3, r1
 8008030:	813b      	strh	r3, [r7, #8]
 8008032:	4613      	mov	r3, r2
 8008034:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008044:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008054:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	2200      	movs	r2, #0
 800805e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 f8c2 	bl	80081ec <I2C_WaitOnFlagUntilTimeout>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00d      	beq.n	800808a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800807c:	d103      	bne.n	8008086 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008084:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e0aa      	b.n	80081e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800808a:	897b      	ldrh	r3, [r7, #10]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	461a      	mov	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008098:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	6a3a      	ldr	r2, [r7, #32]
 800809e:	4952      	ldr	r1, [pc, #328]	; (80081e8 <I2C_RequestMemoryRead+0x1cc>)
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 f8fa 	bl	800829a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e097      	b.n	80081e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080b0:	2300      	movs	r3, #0
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	617b      	str	r3, [r7, #20]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c8:	6a39      	ldr	r1, [r7, #32]
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 f964 	bl	8008398 <I2C_WaitOnTXEFlagUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00d      	beq.n	80080f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d107      	bne.n	80080ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e076      	b.n	80081e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080f2:	88fb      	ldrh	r3, [r7, #6]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d105      	bne.n	8008104 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080f8:	893b      	ldrh	r3, [r7, #8]
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	611a      	str	r2, [r3, #16]
 8008102:	e021      	b.n	8008148 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008104:	893b      	ldrh	r3, [r7, #8]
 8008106:	0a1b      	lsrs	r3, r3, #8
 8008108:	b29b      	uxth	r3, r3
 800810a:	b2da      	uxtb	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008114:	6a39      	ldr	r1, [r7, #32]
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 f93e 	bl	8008398 <I2C_WaitOnTXEFlagUntilTimeout>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00d      	beq.n	800813e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008126:	2b04      	cmp	r3, #4
 8008128:	d107      	bne.n	800813a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008138:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e050      	b.n	80081e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800813e:	893b      	ldrh	r3, [r7, #8]
 8008140:	b2da      	uxtb	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800814a:	6a39      	ldr	r1, [r7, #32]
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 f923 	bl	8008398 <I2C_WaitOnTXEFlagUntilTimeout>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00d      	beq.n	8008174 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815c:	2b04      	cmp	r3, #4
 800815e:	d107      	bne.n	8008170 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800816e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e035      	b.n	80081e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008182:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	6a3b      	ldr	r3, [r7, #32]
 800818a:	2200      	movs	r2, #0
 800818c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 f82b 	bl	80081ec <I2C_WaitOnFlagUntilTimeout>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00d      	beq.n	80081b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081aa:	d103      	bne.n	80081b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e013      	b.n	80081e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80081b8:	897b      	ldrh	r3, [r7, #10]
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	f043 0301 	orr.w	r3, r3, #1
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	6a3a      	ldr	r2, [r7, #32]
 80081cc:	4906      	ldr	r1, [pc, #24]	; (80081e8 <I2C_RequestMemoryRead+0x1cc>)
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 f863 	bl	800829a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e000      	b.n	80081e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	00010002 	.word	0x00010002

080081ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	603b      	str	r3, [r7, #0]
 80081f8:	4613      	mov	r3, r2
 80081fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081fc:	e025      	b.n	800824a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008204:	d021      	beq.n	800824a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008206:	f7fe fa6d 	bl	80066e4 <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	429a      	cmp	r2, r3
 8008214:	d302      	bcc.n	800821c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d116      	bne.n	800824a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2220      	movs	r2, #32
 8008226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008236:	f043 0220 	orr.w	r2, r3, #32
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e023      	b.n	8008292 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	0c1b      	lsrs	r3, r3, #16
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b01      	cmp	r3, #1
 8008252:	d10d      	bne.n	8008270 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	43da      	mvns	r2, r3
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	4013      	ands	r3, r2
 8008260:	b29b      	uxth	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	bf0c      	ite	eq
 8008266:	2301      	moveq	r3, #1
 8008268:	2300      	movne	r3, #0
 800826a:	b2db      	uxtb	r3, r3
 800826c:	461a      	mov	r2, r3
 800826e:	e00c      	b.n	800828a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	43da      	mvns	r2, r3
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	4013      	ands	r3, r2
 800827c:	b29b      	uxth	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	bf0c      	ite	eq
 8008282:	2301      	moveq	r3, #1
 8008284:	2300      	movne	r3, #0
 8008286:	b2db      	uxtb	r3, r3
 8008288:	461a      	mov	r2, r3
 800828a:	79fb      	ldrb	r3, [r7, #7]
 800828c:	429a      	cmp	r2, r3
 800828e:	d0b6      	beq.n	80081fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	60f8      	str	r0, [r7, #12]
 80082a2:	60b9      	str	r1, [r7, #8]
 80082a4:	607a      	str	r2, [r7, #4]
 80082a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80082a8:	e051      	b.n	800834e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082b8:	d123      	bne.n	8008302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2220      	movs	r2, #32
 80082de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ee:	f043 0204 	orr.w	r2, r3, #4
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e046      	b.n	8008390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008308:	d021      	beq.n	800834e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800830a:	f7fe f9eb 	bl	80066e4 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	429a      	cmp	r2, r3
 8008318:	d302      	bcc.n	8008320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d116      	bne.n	800834e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2220      	movs	r2, #32
 800832a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	f043 0220 	orr.w	r2, r3, #32
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e020      	b.n	8008390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	0c1b      	lsrs	r3, r3, #16
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b01      	cmp	r3, #1
 8008356:	d10c      	bne.n	8008372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	43da      	mvns	r2, r3
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	4013      	ands	r3, r2
 8008364:	b29b      	uxth	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	bf14      	ite	ne
 800836a:	2301      	movne	r3, #1
 800836c:	2300      	moveq	r3, #0
 800836e:	b2db      	uxtb	r3, r3
 8008370:	e00b      	b.n	800838a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	43da      	mvns	r2, r3
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	4013      	ands	r3, r2
 800837e:	b29b      	uxth	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	bf14      	ite	ne
 8008384:	2301      	movne	r3, #1
 8008386:	2300      	moveq	r3, #0
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d18d      	bne.n	80082aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083a4:	e02d      	b.n	8008402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 f8ce 	bl	8008548 <I2C_IsAcknowledgeFailed>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e02d      	b.n	8008412 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083bc:	d021      	beq.n	8008402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083be:	f7fe f991 	bl	80066e4 <HAL_GetTick>
 80083c2:	4602      	mov	r2, r0
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d302      	bcc.n	80083d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d116      	bne.n	8008402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2220      	movs	r2, #32
 80083de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ee:	f043 0220 	orr.w	r2, r3, #32
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e007      	b.n	8008412 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	695b      	ldr	r3, [r3, #20]
 8008408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800840c:	2b80      	cmp	r3, #128	; 0x80
 800840e:	d1ca      	bne.n	80083a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b084      	sub	sp, #16
 800841e:	af00      	add	r7, sp, #0
 8008420:	60f8      	str	r0, [r7, #12]
 8008422:	60b9      	str	r1, [r7, #8]
 8008424:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008426:	e02d      	b.n	8008484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 f88d 	bl	8008548 <I2C_IsAcknowledgeFailed>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e02d      	b.n	8008494 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800843e:	d021      	beq.n	8008484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008440:	f7fe f950 	bl	80066e4 <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	429a      	cmp	r2, r3
 800844e:	d302      	bcc.n	8008456 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d116      	bne.n	8008484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2220      	movs	r2, #32
 8008460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008470:	f043 0220 	orr.w	r2, r3, #32
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e007      	b.n	8008494 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	f003 0304 	and.w	r3, r3, #4
 800848e:	2b04      	cmp	r3, #4
 8008490:	d1ca      	bne.n	8008428 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80084a8:	e042      	b.n	8008530 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	f003 0310 	and.w	r3, r3, #16
 80084b4:	2b10      	cmp	r3, #16
 80084b6:	d119      	bne.n	80084ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f06f 0210 	mvn.w	r2, #16
 80084c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2220      	movs	r2, #32
 80084cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e029      	b.n	8008540 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ec:	f7fe f8fa 	bl	80066e4 <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d302      	bcc.n	8008502 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d116      	bne.n	8008530 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2220      	movs	r2, #32
 800850c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851c:	f043 0220 	orr.w	r2, r3, #32
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e007      	b.n	8008540 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853a:	2b40      	cmp	r3, #64	; 0x40
 800853c:	d1b5      	bne.n	80084aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800855a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800855e:	d11b      	bne.n	8008598 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008568:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2220      	movs	r2, #32
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008584:	f043 0204 	orr.w	r2, r3, #4
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e000      	b.n	800859a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
	...

080085a8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80085ae:	4b06      	ldr	r3, [pc, #24]	; (80085c8 <HAL_PWR_EnableBkUpAccess+0x20>)
 80085b0:	2201      	movs	r2, #1
 80085b2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80085b4:	4b05      	ldr	r3, [pc, #20]	; (80085cc <HAL_PWR_EnableBkUpAccess+0x24>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80085ba:	687b      	ldr	r3, [r7, #4]
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	420e0020 	.word	0x420e0020
 80085cc:	40007000 	.word	0x40007000

080085d0 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80085d6:	4b06      	ldr	r3, [pc, #24]	; (80085f0 <HAL_PWR_DisableBkUpAccess+0x20>)
 80085d8:	2200      	movs	r2, #0
 80085da:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80085dc:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <HAL_PWR_DisableBkUpAccess+0x24>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80085e2:	687b      	ldr	r3, [r7, #4]
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	420e0020 	.word	0x420e0020
 80085f4:	40007000 	.word	0x40007000

080085f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e267      	b.n	8008ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	d075      	beq.n	8008702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008616:	4b88      	ldr	r3, [pc, #544]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f003 030c 	and.w	r3, r3, #12
 800861e:	2b04      	cmp	r3, #4
 8008620:	d00c      	beq.n	800863c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008622:	4b85      	ldr	r3, [pc, #532]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800862a:	2b08      	cmp	r3, #8
 800862c:	d112      	bne.n	8008654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800862e:	4b82      	ldr	r3, [pc, #520]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800863a:	d10b      	bne.n	8008654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800863c:	4b7e      	ldr	r3, [pc, #504]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d05b      	beq.n	8008700 <HAL_RCC_OscConfig+0x108>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d157      	bne.n	8008700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e242      	b.n	8008ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800865c:	d106      	bne.n	800866c <HAL_RCC_OscConfig+0x74>
 800865e:	4b76      	ldr	r3, [pc, #472]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a75      	ldr	r2, [pc, #468]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 8008664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	e01d      	b.n	80086a8 <HAL_RCC_OscConfig+0xb0>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008674:	d10c      	bne.n	8008690 <HAL_RCC_OscConfig+0x98>
 8008676:	4b70      	ldr	r3, [pc, #448]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a6f      	ldr	r2, [pc, #444]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 800867c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	4b6d      	ldr	r3, [pc, #436]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a6c      	ldr	r2, [pc, #432]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 8008688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800868c:	6013      	str	r3, [r2, #0]
 800868e:	e00b      	b.n	80086a8 <HAL_RCC_OscConfig+0xb0>
 8008690:	4b69      	ldr	r3, [pc, #420]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a68      	ldr	r2, [pc, #416]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 8008696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	4b66      	ldr	r3, [pc, #408]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a65      	ldr	r2, [pc, #404]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 80086a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d013      	beq.n	80086d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086b0:	f7fe f818 	bl	80066e4 <HAL_GetTick>
 80086b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086b6:	e008      	b.n	80086ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086b8:	f7fe f814 	bl	80066e4 <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b64      	cmp	r3, #100	; 0x64
 80086c4:	d901      	bls.n	80086ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e207      	b.n	8008ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086ca:	4b5b      	ldr	r3, [pc, #364]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0f0      	beq.n	80086b8 <HAL_RCC_OscConfig+0xc0>
 80086d6:	e014      	b.n	8008702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086d8:	f7fe f804 	bl	80066e4 <HAL_GetTick>
 80086dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086de:	e008      	b.n	80086f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086e0:	f7fe f800 	bl	80066e4 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	2b64      	cmp	r3, #100	; 0x64
 80086ec:	d901      	bls.n	80086f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e1f3      	b.n	8008ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086f2:	4b51      	ldr	r3, [pc, #324]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1f0      	bne.n	80086e0 <HAL_RCC_OscConfig+0xe8>
 80086fe:	e000      	b.n	8008702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0302 	and.w	r3, r3, #2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d063      	beq.n	80087d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800870e:	4b4a      	ldr	r3, [pc, #296]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f003 030c 	and.w	r3, r3, #12
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00b      	beq.n	8008732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800871a:	4b47      	ldr	r3, [pc, #284]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008722:	2b08      	cmp	r3, #8
 8008724:	d11c      	bne.n	8008760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008726:	4b44      	ldr	r3, [pc, #272]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d116      	bne.n	8008760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008732:	4b41      	ldr	r3, [pc, #260]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d005      	beq.n	800874a <HAL_RCC_OscConfig+0x152>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d001      	beq.n	800874a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e1c7      	b.n	8008ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800874a:	4b3b      	ldr	r3, [pc, #236]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	4937      	ldr	r1, [pc, #220]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 800875a:	4313      	orrs	r3, r2
 800875c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800875e:	e03a      	b.n	80087d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d020      	beq.n	80087aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008768:	4b34      	ldr	r3, [pc, #208]	; (800883c <HAL_RCC_OscConfig+0x244>)
 800876a:	2201      	movs	r2, #1
 800876c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876e:	f7fd ffb9 	bl	80066e4 <HAL_GetTick>
 8008772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008774:	e008      	b.n	8008788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008776:	f7fd ffb5 	bl	80066e4 <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	2b02      	cmp	r3, #2
 8008782:	d901      	bls.n	8008788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e1a8      	b.n	8008ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008788:	4b2b      	ldr	r3, [pc, #172]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0f0      	beq.n	8008776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008794:	4b28      	ldr	r3, [pc, #160]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	00db      	lsls	r3, r3, #3
 80087a2:	4925      	ldr	r1, [pc, #148]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	600b      	str	r3, [r1, #0]
 80087a8:	e015      	b.n	80087d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087aa:	4b24      	ldr	r3, [pc, #144]	; (800883c <HAL_RCC_OscConfig+0x244>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b0:	f7fd ff98 	bl	80066e4 <HAL_GetTick>
 80087b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087b6:	e008      	b.n	80087ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087b8:	f7fd ff94 	bl	80066e4 <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d901      	bls.n	80087ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e187      	b.n	8008ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087ca:	4b1b      	ldr	r3, [pc, #108]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1f0      	bne.n	80087b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d036      	beq.n	8008850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d016      	beq.n	8008818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087ea:	4b15      	ldr	r3, [pc, #84]	; (8008840 <HAL_RCC_OscConfig+0x248>)
 80087ec:	2201      	movs	r2, #1
 80087ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087f0:	f7fd ff78 	bl	80066e4 <HAL_GetTick>
 80087f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087f6:	e008      	b.n	800880a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087f8:	f7fd ff74 	bl	80066e4 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b02      	cmp	r3, #2
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e167      	b.n	8008ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800880a:	4b0b      	ldr	r3, [pc, #44]	; (8008838 <HAL_RCC_OscConfig+0x240>)
 800880c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0f0      	beq.n	80087f8 <HAL_RCC_OscConfig+0x200>
 8008816:	e01b      	b.n	8008850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008818:	4b09      	ldr	r3, [pc, #36]	; (8008840 <HAL_RCC_OscConfig+0x248>)
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800881e:	f7fd ff61 	bl	80066e4 <HAL_GetTick>
 8008822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008824:	e00e      	b.n	8008844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008826:	f7fd ff5d 	bl	80066e4 <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	2b02      	cmp	r3, #2
 8008832:	d907      	bls.n	8008844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e150      	b.n	8008ada <HAL_RCC_OscConfig+0x4e2>
 8008838:	40023800 	.word	0x40023800
 800883c:	42470000 	.word	0x42470000
 8008840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008844:	4b88      	ldr	r3, [pc, #544]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 8008846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1ea      	bne.n	8008826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0304 	and.w	r3, r3, #4
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 8097 	beq.w	800898c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800885e:	2300      	movs	r3, #0
 8008860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008862:	4b81      	ldr	r3, [pc, #516]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 8008864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10f      	bne.n	800888e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800886e:	2300      	movs	r3, #0
 8008870:	60bb      	str	r3, [r7, #8]
 8008872:	4b7d      	ldr	r3, [pc, #500]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	4a7c      	ldr	r2, [pc, #496]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 8008878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800887c:	6413      	str	r3, [r2, #64]	; 0x40
 800887e:	4b7a      	ldr	r3, [pc, #488]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 8008880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008886:	60bb      	str	r3, [r7, #8]
 8008888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800888a:	2301      	movs	r3, #1
 800888c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800888e:	4b77      	ldr	r3, [pc, #476]	; (8008a6c <HAL_RCC_OscConfig+0x474>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008896:	2b00      	cmp	r3, #0
 8008898:	d118      	bne.n	80088cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800889a:	4b74      	ldr	r3, [pc, #464]	; (8008a6c <HAL_RCC_OscConfig+0x474>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a73      	ldr	r2, [pc, #460]	; (8008a6c <HAL_RCC_OscConfig+0x474>)
 80088a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088a6:	f7fd ff1d 	bl	80066e4 <HAL_GetTick>
 80088aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088ac:	e008      	b.n	80088c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088ae:	f7fd ff19 	bl	80066e4 <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d901      	bls.n	80088c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e10c      	b.n	8008ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088c0:	4b6a      	ldr	r3, [pc, #424]	; (8008a6c <HAL_RCC_OscConfig+0x474>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d0f0      	beq.n	80088ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d106      	bne.n	80088e2 <HAL_RCC_OscConfig+0x2ea>
 80088d4:	4b64      	ldr	r3, [pc, #400]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 80088d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d8:	4a63      	ldr	r2, [pc, #396]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 80088da:	f043 0301 	orr.w	r3, r3, #1
 80088de:	6713      	str	r3, [r2, #112]	; 0x70
 80088e0:	e01c      	b.n	800891c <HAL_RCC_OscConfig+0x324>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	2b05      	cmp	r3, #5
 80088e8:	d10c      	bne.n	8008904 <HAL_RCC_OscConfig+0x30c>
 80088ea:	4b5f      	ldr	r3, [pc, #380]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 80088ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ee:	4a5e      	ldr	r2, [pc, #376]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 80088f0:	f043 0304 	orr.w	r3, r3, #4
 80088f4:	6713      	str	r3, [r2, #112]	; 0x70
 80088f6:	4b5c      	ldr	r3, [pc, #368]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 80088f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fa:	4a5b      	ldr	r2, [pc, #364]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 80088fc:	f043 0301 	orr.w	r3, r3, #1
 8008900:	6713      	str	r3, [r2, #112]	; 0x70
 8008902:	e00b      	b.n	800891c <HAL_RCC_OscConfig+0x324>
 8008904:	4b58      	ldr	r3, [pc, #352]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 8008906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008908:	4a57      	ldr	r2, [pc, #348]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 800890a:	f023 0301 	bic.w	r3, r3, #1
 800890e:	6713      	str	r3, [r2, #112]	; 0x70
 8008910:	4b55      	ldr	r3, [pc, #340]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 8008912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008914:	4a54      	ldr	r2, [pc, #336]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 8008916:	f023 0304 	bic.w	r3, r3, #4
 800891a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d015      	beq.n	8008950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008924:	f7fd fede 	bl	80066e4 <HAL_GetTick>
 8008928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800892a:	e00a      	b.n	8008942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800892c:	f7fd feda 	bl	80066e4 <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	f241 3288 	movw	r2, #5000	; 0x1388
 800893a:	4293      	cmp	r3, r2
 800893c:	d901      	bls.n	8008942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e0cb      	b.n	8008ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008942:	4b49      	ldr	r3, [pc, #292]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 8008944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008946:	f003 0302 	and.w	r3, r3, #2
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0ee      	beq.n	800892c <HAL_RCC_OscConfig+0x334>
 800894e:	e014      	b.n	800897a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008950:	f7fd fec8 	bl	80066e4 <HAL_GetTick>
 8008954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008956:	e00a      	b.n	800896e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008958:	f7fd fec4 	bl	80066e4 <HAL_GetTick>
 800895c:	4602      	mov	r2, r0
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	f241 3288 	movw	r2, #5000	; 0x1388
 8008966:	4293      	cmp	r3, r2
 8008968:	d901      	bls.n	800896e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e0b5      	b.n	8008ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800896e:	4b3e      	ldr	r3, [pc, #248]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 8008970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1ee      	bne.n	8008958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800897a:	7dfb      	ldrb	r3, [r7, #23]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d105      	bne.n	800898c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008980:	4b39      	ldr	r3, [pc, #228]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 8008982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008984:	4a38      	ldr	r2, [pc, #224]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 8008986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800898a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 80a1 	beq.w	8008ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008996:	4b34      	ldr	r3, [pc, #208]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f003 030c 	and.w	r3, r3, #12
 800899e:	2b08      	cmp	r3, #8
 80089a0:	d05c      	beq.n	8008a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d141      	bne.n	8008a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089aa:	4b31      	ldr	r3, [pc, #196]	; (8008a70 <HAL_RCC_OscConfig+0x478>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089b0:	f7fd fe98 	bl	80066e4 <HAL_GetTick>
 80089b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089b6:	e008      	b.n	80089ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089b8:	f7fd fe94 	bl	80066e4 <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d901      	bls.n	80089ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e087      	b.n	8008ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089ca:	4b27      	ldr	r3, [pc, #156]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1f0      	bne.n	80089b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	69da      	ldr	r2, [r3, #28]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	431a      	orrs	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e4:	019b      	lsls	r3, r3, #6
 80089e6:	431a      	orrs	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ec:	085b      	lsrs	r3, r3, #1
 80089ee:	3b01      	subs	r3, #1
 80089f0:	041b      	lsls	r3, r3, #16
 80089f2:	431a      	orrs	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f8:	061b      	lsls	r3, r3, #24
 80089fa:	491b      	ldr	r1, [pc, #108]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a00:	4b1b      	ldr	r3, [pc, #108]	; (8008a70 <HAL_RCC_OscConfig+0x478>)
 8008a02:	2201      	movs	r2, #1
 8008a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a06:	f7fd fe6d 	bl	80066e4 <HAL_GetTick>
 8008a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a0c:	e008      	b.n	8008a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a0e:	f7fd fe69 	bl	80066e4 <HAL_GetTick>
 8008a12:	4602      	mov	r2, r0
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d901      	bls.n	8008a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	e05c      	b.n	8008ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a20:	4b11      	ldr	r3, [pc, #68]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d0f0      	beq.n	8008a0e <HAL_RCC_OscConfig+0x416>
 8008a2c:	e054      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a2e:	4b10      	ldr	r3, [pc, #64]	; (8008a70 <HAL_RCC_OscConfig+0x478>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a34:	f7fd fe56 	bl	80066e4 <HAL_GetTick>
 8008a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a3a:	e008      	b.n	8008a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a3c:	f7fd fe52 	bl	80066e4 <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d901      	bls.n	8008a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e045      	b.n	8008ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a4e:	4b06      	ldr	r3, [pc, #24]	; (8008a68 <HAL_RCC_OscConfig+0x470>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1f0      	bne.n	8008a3c <HAL_RCC_OscConfig+0x444>
 8008a5a:	e03d      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d107      	bne.n	8008a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e038      	b.n	8008ada <HAL_RCC_OscConfig+0x4e2>
 8008a68:	40023800 	.word	0x40023800
 8008a6c:	40007000 	.word	0x40007000
 8008a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a74:	4b1b      	ldr	r3, [pc, #108]	; (8008ae4 <HAL_RCC_OscConfig+0x4ec>)
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d028      	beq.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d121      	bne.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d11a      	bne.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d111      	bne.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aba:	085b      	lsrs	r3, r3, #1
 8008abc:	3b01      	subs	r3, #1
 8008abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d107      	bne.n	8008ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d001      	beq.n	8008ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e000      	b.n	8008ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	40023800 	.word	0x40023800

08008ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e0cc      	b.n	8008c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008afc:	4b68      	ldr	r3, [pc, #416]	; (8008ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0307 	and.w	r3, r3, #7
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d90c      	bls.n	8008b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b0a:	4b65      	ldr	r3, [pc, #404]	; (8008ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	b2d2      	uxtb	r2, r2
 8008b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b12:	4b63      	ldr	r3, [pc, #396]	; (8008ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d001      	beq.n	8008b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e0b8      	b.n	8008c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0302 	and.w	r3, r3, #2
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d020      	beq.n	8008b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0304 	and.w	r3, r3, #4
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d005      	beq.n	8008b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b3c:	4b59      	ldr	r3, [pc, #356]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	4a58      	ldr	r2, [pc, #352]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0308 	and.w	r3, r3, #8
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d005      	beq.n	8008b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b54:	4b53      	ldr	r3, [pc, #332]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	4a52      	ldr	r2, [pc, #328]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b60:	4b50      	ldr	r3, [pc, #320]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	494d      	ldr	r1, [pc, #308]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d044      	beq.n	8008c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d107      	bne.n	8008b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b86:	4b47      	ldr	r3, [pc, #284]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d119      	bne.n	8008bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e07f      	b.n	8008c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d003      	beq.n	8008ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	d107      	bne.n	8008bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ba6:	4b3f      	ldr	r3, [pc, #252]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d109      	bne.n	8008bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e06f      	b.n	8008c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bb6:	4b3b      	ldr	r3, [pc, #236]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e067      	b.n	8008c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bc6:	4b37      	ldr	r3, [pc, #220]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f023 0203 	bic.w	r2, r3, #3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	4934      	ldr	r1, [pc, #208]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008bd8:	f7fd fd84 	bl	80066e4 <HAL_GetTick>
 8008bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bde:	e00a      	b.n	8008bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008be0:	f7fd fd80 	bl	80066e4 <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d901      	bls.n	8008bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e04f      	b.n	8008c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bf6:	4b2b      	ldr	r3, [pc, #172]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f003 020c 	and.w	r2, r3, #12
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d1eb      	bne.n	8008be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c08:	4b25      	ldr	r3, [pc, #148]	; (8008ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0307 	and.w	r3, r3, #7
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d20c      	bcs.n	8008c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c16:	4b22      	ldr	r3, [pc, #136]	; (8008ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	b2d2      	uxtb	r2, r2
 8008c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c1e:	4b20      	ldr	r3, [pc, #128]	; (8008ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0307 	and.w	r3, r3, #7
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d001      	beq.n	8008c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e032      	b.n	8008c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0304 	and.w	r3, r3, #4
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d008      	beq.n	8008c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c3c:	4b19      	ldr	r3, [pc, #100]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	4916      	ldr	r1, [pc, #88]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0308 	and.w	r3, r3, #8
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d009      	beq.n	8008c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c5a:	4b12      	ldr	r3, [pc, #72]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	00db      	lsls	r3, r3, #3
 8008c68:	490e      	ldr	r1, [pc, #56]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c6e:	f000 f821 	bl	8008cb4 <HAL_RCC_GetSysClockFreq>
 8008c72:	4602      	mov	r2, r0
 8008c74:	4b0b      	ldr	r3, [pc, #44]	; (8008ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	091b      	lsrs	r3, r3, #4
 8008c7a:	f003 030f 	and.w	r3, r3, #15
 8008c7e:	490a      	ldr	r1, [pc, #40]	; (8008ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8008c80:	5ccb      	ldrb	r3, [r1, r3]
 8008c82:	fa22 f303 	lsr.w	r3, r2, r3
 8008c86:	4a09      	ldr	r2, [pc, #36]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c8a:	4b09      	ldr	r3, [pc, #36]	; (8008cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fd fce4 	bl	800665c <HAL_InitTick>

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	40023c00 	.word	0x40023c00
 8008ca4:	40023800 	.word	0x40023800
 8008ca8:	0801042c 	.word	0x0801042c
 8008cac:	20000140 	.word	0x20000140
 8008cb0:	20000144 	.word	0x20000144

08008cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cb8:	b090      	sub	sp, #64	; 0x40
 8008cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ccc:	4b59      	ldr	r3, [pc, #356]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f003 030c 	and.w	r3, r3, #12
 8008cd4:	2b08      	cmp	r3, #8
 8008cd6:	d00d      	beq.n	8008cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	f200 80a1 	bhi.w	8008e20 <HAL_RCC_GetSysClockFreq+0x16c>
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d002      	beq.n	8008ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	d003      	beq.n	8008cee <HAL_RCC_GetSysClockFreq+0x3a>
 8008ce6:	e09b      	b.n	8008e20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ce8:	4b53      	ldr	r3, [pc, #332]	; (8008e38 <HAL_RCC_GetSysClockFreq+0x184>)
 8008cea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008cec:	e09b      	b.n	8008e26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008cee:	4b53      	ldr	r3, [pc, #332]	; (8008e3c <HAL_RCC_GetSysClockFreq+0x188>)
 8008cf0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008cf2:	e098      	b.n	8008e26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008cf4:	4b4f      	ldr	r3, [pc, #316]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cfc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008cfe:	4b4d      	ldr	r3, [pc, #308]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d028      	beq.n	8008d5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d0a:	4b4a      	ldr	r3, [pc, #296]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	099b      	lsrs	r3, r3, #6
 8008d10:	2200      	movs	r2, #0
 8008d12:	623b      	str	r3, [r7, #32]
 8008d14:	627a      	str	r2, [r7, #36]	; 0x24
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	4b47      	ldr	r3, [pc, #284]	; (8008e3c <HAL_RCC_GetSysClockFreq+0x188>)
 8008d20:	fb03 f201 	mul.w	r2, r3, r1
 8008d24:	2300      	movs	r3, #0
 8008d26:	fb00 f303 	mul.w	r3, r0, r3
 8008d2a:	4413      	add	r3, r2
 8008d2c:	4a43      	ldr	r2, [pc, #268]	; (8008e3c <HAL_RCC_GetSysClockFreq+0x188>)
 8008d2e:	fba0 1202 	umull	r1, r2, r0, r2
 8008d32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d34:	460a      	mov	r2, r1
 8008d36:	62ba      	str	r2, [r7, #40]	; 0x28
 8008d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d3a:	4413      	add	r3, r2
 8008d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d40:	2200      	movs	r2, #0
 8008d42:	61bb      	str	r3, [r7, #24]
 8008d44:	61fa      	str	r2, [r7, #28]
 8008d46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008d4e:	f7f7 ff55 	bl	8000bfc <__aeabi_uldivmod>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	4613      	mov	r3, r2
 8008d58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d5a:	e053      	b.n	8008e04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d5c:	4b35      	ldr	r3, [pc, #212]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	099b      	lsrs	r3, r3, #6
 8008d62:	2200      	movs	r2, #0
 8008d64:	613b      	str	r3, [r7, #16]
 8008d66:	617a      	str	r2, [r7, #20]
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008d6e:	f04f 0b00 	mov.w	fp, #0
 8008d72:	4652      	mov	r2, sl
 8008d74:	465b      	mov	r3, fp
 8008d76:	f04f 0000 	mov.w	r0, #0
 8008d7a:	f04f 0100 	mov.w	r1, #0
 8008d7e:	0159      	lsls	r1, r3, #5
 8008d80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d84:	0150      	lsls	r0, r2, #5
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	ebb2 080a 	subs.w	r8, r2, sl
 8008d8e:	eb63 090b 	sbc.w	r9, r3, fp
 8008d92:	f04f 0200 	mov.w	r2, #0
 8008d96:	f04f 0300 	mov.w	r3, #0
 8008d9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008d9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008da2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008da6:	ebb2 0408 	subs.w	r4, r2, r8
 8008daa:	eb63 0509 	sbc.w	r5, r3, r9
 8008dae:	f04f 0200 	mov.w	r2, #0
 8008db2:	f04f 0300 	mov.w	r3, #0
 8008db6:	00eb      	lsls	r3, r5, #3
 8008db8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008dbc:	00e2      	lsls	r2, r4, #3
 8008dbe:	4614      	mov	r4, r2
 8008dc0:	461d      	mov	r5, r3
 8008dc2:	eb14 030a 	adds.w	r3, r4, sl
 8008dc6:	603b      	str	r3, [r7, #0]
 8008dc8:	eb45 030b 	adc.w	r3, r5, fp
 8008dcc:	607b      	str	r3, [r7, #4]
 8008dce:	f04f 0200 	mov.w	r2, #0
 8008dd2:	f04f 0300 	mov.w	r3, #0
 8008dd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008dda:	4629      	mov	r1, r5
 8008ddc:	028b      	lsls	r3, r1, #10
 8008dde:	4621      	mov	r1, r4
 8008de0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008de4:	4621      	mov	r1, r4
 8008de6:	028a      	lsls	r2, r1, #10
 8008de8:	4610      	mov	r0, r2
 8008dea:	4619      	mov	r1, r3
 8008dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dee:	2200      	movs	r2, #0
 8008df0:	60bb      	str	r3, [r7, #8]
 8008df2:	60fa      	str	r2, [r7, #12]
 8008df4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008df8:	f7f7 ff00 	bl	8000bfc <__aeabi_uldivmod>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4613      	mov	r3, r2
 8008e02:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008e04:	4b0b      	ldr	r3, [pc, #44]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	0c1b      	lsrs	r3, r3, #16
 8008e0a:	f003 0303 	and.w	r3, r3, #3
 8008e0e:	3301      	adds	r3, #1
 8008e10:	005b      	lsls	r3, r3, #1
 8008e12:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008e1e:	e002      	b.n	8008e26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e20:	4b05      	ldr	r3, [pc, #20]	; (8008e38 <HAL_RCC_GetSysClockFreq+0x184>)
 8008e22:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3740      	adds	r7, #64	; 0x40
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e32:	bf00      	nop
 8008e34:	40023800 	.word	0x40023800
 8008e38:	00f42400 	.word	0x00f42400
 8008e3c:	017d7840 	.word	0x017d7840

08008e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e40:	b480      	push	{r7}
 8008e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e44:	4b03      	ldr	r3, [pc, #12]	; (8008e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e46:	681b      	ldr	r3, [r3, #0]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	20000140 	.word	0x20000140

08008e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e5c:	f7ff fff0 	bl	8008e40 <HAL_RCC_GetHCLKFreq>
 8008e60:	4602      	mov	r2, r0
 8008e62:	4b05      	ldr	r3, [pc, #20]	; (8008e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	0a9b      	lsrs	r3, r3, #10
 8008e68:	f003 0307 	and.w	r3, r3, #7
 8008e6c:	4903      	ldr	r1, [pc, #12]	; (8008e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e6e:	5ccb      	ldrb	r3, [r1, r3]
 8008e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	40023800 	.word	0x40023800
 8008e7c:	0801043c 	.word	0x0801043c

08008e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e84:	f7ff ffdc 	bl	8008e40 <HAL_RCC_GetHCLKFreq>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	4b05      	ldr	r3, [pc, #20]	; (8008ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	0b5b      	lsrs	r3, r3, #13
 8008e90:	f003 0307 	and.w	r3, r3, #7
 8008e94:	4903      	ldr	r1, [pc, #12]	; (8008ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e96:	5ccb      	ldrb	r3, [r1, r3]
 8008e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	40023800 	.word	0x40023800
 8008ea4:	0801043c 	.word	0x0801043c

08008ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e041      	b.n	8008f3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d106      	bne.n	8008ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7fd f8fa 	bl	80060c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	4610      	mov	r0, r2
 8008ee8:	f001 f842 	bl	8009f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b082      	sub	sp, #8
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e041      	b.n	8008fdc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d106      	bne.n	8008f72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f839 	bl	8008fe4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2202      	movs	r2, #2
 8008f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	3304      	adds	r3, #4
 8008f82:	4619      	mov	r1, r3
 8008f84:	4610      	mov	r0, r2
 8008f86:	f000 fff3 	bl	8009f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d109      	bne.n	800901c <HAL_TIM_PWM_Start+0x24>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b01      	cmp	r3, #1
 8009012:	bf14      	ite	ne
 8009014:	2301      	movne	r3, #1
 8009016:	2300      	moveq	r3, #0
 8009018:	b2db      	uxtb	r3, r3
 800901a:	e022      	b.n	8009062 <HAL_TIM_PWM_Start+0x6a>
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2b04      	cmp	r3, #4
 8009020:	d109      	bne.n	8009036 <HAL_TIM_PWM_Start+0x3e>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b01      	cmp	r3, #1
 800902c:	bf14      	ite	ne
 800902e:	2301      	movne	r3, #1
 8009030:	2300      	moveq	r3, #0
 8009032:	b2db      	uxtb	r3, r3
 8009034:	e015      	b.n	8009062 <HAL_TIM_PWM_Start+0x6a>
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	2b08      	cmp	r3, #8
 800903a:	d109      	bne.n	8009050 <HAL_TIM_PWM_Start+0x58>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b01      	cmp	r3, #1
 8009046:	bf14      	ite	ne
 8009048:	2301      	movne	r3, #1
 800904a:	2300      	moveq	r3, #0
 800904c:	b2db      	uxtb	r3, r3
 800904e:	e008      	b.n	8009062 <HAL_TIM_PWM_Start+0x6a>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009056:	b2db      	uxtb	r3, r3
 8009058:	2b01      	cmp	r3, #1
 800905a:	bf14      	ite	ne
 800905c:	2301      	movne	r3, #1
 800905e:	2300      	moveq	r3, #0
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e07c      	b.n	8009164 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d104      	bne.n	800907a <HAL_TIM_PWM_Start+0x82>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2202      	movs	r2, #2
 8009074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009078:	e013      	b.n	80090a2 <HAL_TIM_PWM_Start+0xaa>
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	2b04      	cmp	r3, #4
 800907e:	d104      	bne.n	800908a <HAL_TIM_PWM_Start+0x92>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2202      	movs	r2, #2
 8009084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009088:	e00b      	b.n	80090a2 <HAL_TIM_PWM_Start+0xaa>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b08      	cmp	r3, #8
 800908e:	d104      	bne.n	800909a <HAL_TIM_PWM_Start+0xa2>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2202      	movs	r2, #2
 8009094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009098:	e003      	b.n	80090a2 <HAL_TIM_PWM_Start+0xaa>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2202      	movs	r2, #2
 800909e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2201      	movs	r2, #1
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f001 fb74 	bl	800a798 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a2d      	ldr	r2, [pc, #180]	; (800916c <HAL_TIM_PWM_Start+0x174>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d004      	beq.n	80090c4 <HAL_TIM_PWM_Start+0xcc>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a2c      	ldr	r2, [pc, #176]	; (8009170 <HAL_TIM_PWM_Start+0x178>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d101      	bne.n	80090c8 <HAL_TIM_PWM_Start+0xd0>
 80090c4:	2301      	movs	r3, #1
 80090c6:	e000      	b.n	80090ca <HAL_TIM_PWM_Start+0xd2>
 80090c8:	2300      	movs	r3, #0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d007      	beq.n	80090de <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a22      	ldr	r2, [pc, #136]	; (800916c <HAL_TIM_PWM_Start+0x174>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d022      	beq.n	800912e <HAL_TIM_PWM_Start+0x136>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090f0:	d01d      	beq.n	800912e <HAL_TIM_PWM_Start+0x136>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a1f      	ldr	r2, [pc, #124]	; (8009174 <HAL_TIM_PWM_Start+0x17c>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d018      	beq.n	800912e <HAL_TIM_PWM_Start+0x136>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a1d      	ldr	r2, [pc, #116]	; (8009178 <HAL_TIM_PWM_Start+0x180>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d013      	beq.n	800912e <HAL_TIM_PWM_Start+0x136>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a1c      	ldr	r2, [pc, #112]	; (800917c <HAL_TIM_PWM_Start+0x184>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d00e      	beq.n	800912e <HAL_TIM_PWM_Start+0x136>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a16      	ldr	r2, [pc, #88]	; (8009170 <HAL_TIM_PWM_Start+0x178>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d009      	beq.n	800912e <HAL_TIM_PWM_Start+0x136>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a18      	ldr	r2, [pc, #96]	; (8009180 <HAL_TIM_PWM_Start+0x188>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d004      	beq.n	800912e <HAL_TIM_PWM_Start+0x136>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a16      	ldr	r2, [pc, #88]	; (8009184 <HAL_TIM_PWM_Start+0x18c>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d111      	bne.n	8009152 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f003 0307 	and.w	r3, r3, #7
 8009138:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2b06      	cmp	r3, #6
 800913e:	d010      	beq.n	8009162 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f042 0201 	orr.w	r2, r2, #1
 800914e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009150:	e007      	b.n	8009162 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f042 0201 	orr.w	r2, r2, #1
 8009160:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	40010000 	.word	0x40010000
 8009170:	40010400 	.word	0x40010400
 8009174:	40000400 	.word	0x40000400
 8009178:	40000800 	.word	0x40000800
 800917c:	40000c00 	.word	0x40000c00
 8009180:	40014000 	.word	0x40014000
 8009184:	40001800 	.word	0x40001800

08009188 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e041      	b.n	800921e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d106      	bne.n	80091b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7fd f88a 	bl	80062c8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2202      	movs	r2, #2
 80091b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3304      	adds	r3, #4
 80091c4:	4619      	mov	r1, r3
 80091c6:	4610      	mov	r0, r2
 80091c8:	f000 fed2 	bl	8009f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d104      	bne.n	8009246 <HAL_TIM_IC_Start_IT+0x1e>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009242:	b2db      	uxtb	r3, r3
 8009244:	e013      	b.n	800926e <HAL_TIM_IC_Start_IT+0x46>
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b04      	cmp	r3, #4
 800924a:	d104      	bne.n	8009256 <HAL_TIM_IC_Start_IT+0x2e>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009252:	b2db      	uxtb	r3, r3
 8009254:	e00b      	b.n	800926e <HAL_TIM_IC_Start_IT+0x46>
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b08      	cmp	r3, #8
 800925a:	d104      	bne.n	8009266 <HAL_TIM_IC_Start_IT+0x3e>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009262:	b2db      	uxtb	r3, r3
 8009264:	e003      	b.n	800926e <HAL_TIM_IC_Start_IT+0x46>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800926c:	b2db      	uxtb	r3, r3
 800926e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d104      	bne.n	8009280 <HAL_TIM_IC_Start_IT+0x58>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800927c:	b2db      	uxtb	r3, r3
 800927e:	e013      	b.n	80092a8 <HAL_TIM_IC_Start_IT+0x80>
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2b04      	cmp	r3, #4
 8009284:	d104      	bne.n	8009290 <HAL_TIM_IC_Start_IT+0x68>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800928c:	b2db      	uxtb	r3, r3
 800928e:	e00b      	b.n	80092a8 <HAL_TIM_IC_Start_IT+0x80>
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	2b08      	cmp	r3, #8
 8009294:	d104      	bne.n	80092a0 <HAL_TIM_IC_Start_IT+0x78>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800929c:	b2db      	uxtb	r3, r3
 800929e:	e003      	b.n	80092a8 <HAL_TIM_IC_Start_IT+0x80>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80092aa:	7bbb      	ldrb	r3, [r7, #14]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d102      	bne.n	80092b6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80092b0:	7b7b      	ldrb	r3, [r7, #13]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d001      	beq.n	80092ba <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e0cc      	b.n	8009454 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d104      	bne.n	80092ca <HAL_TIM_IC_Start_IT+0xa2>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092c8:	e013      	b.n	80092f2 <HAL_TIM_IC_Start_IT+0xca>
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	d104      	bne.n	80092da <HAL_TIM_IC_Start_IT+0xb2>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092d8:	e00b      	b.n	80092f2 <HAL_TIM_IC_Start_IT+0xca>
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	2b08      	cmp	r3, #8
 80092de:	d104      	bne.n	80092ea <HAL_TIM_IC_Start_IT+0xc2>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2202      	movs	r2, #2
 80092e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092e8:	e003      	b.n	80092f2 <HAL_TIM_IC_Start_IT+0xca>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2202      	movs	r2, #2
 80092ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d104      	bne.n	8009302 <HAL_TIM_IC_Start_IT+0xda>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2202      	movs	r2, #2
 80092fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009300:	e013      	b.n	800932a <HAL_TIM_IC_Start_IT+0x102>
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	2b04      	cmp	r3, #4
 8009306:	d104      	bne.n	8009312 <HAL_TIM_IC_Start_IT+0xea>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2202      	movs	r2, #2
 800930c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009310:	e00b      	b.n	800932a <HAL_TIM_IC_Start_IT+0x102>
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	2b08      	cmp	r3, #8
 8009316:	d104      	bne.n	8009322 <HAL_TIM_IC_Start_IT+0xfa>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2202      	movs	r2, #2
 800931c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009320:	e003      	b.n	800932a <HAL_TIM_IC_Start_IT+0x102>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2202      	movs	r2, #2
 8009326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b0c      	cmp	r3, #12
 800932e:	d841      	bhi.n	80093b4 <HAL_TIM_IC_Start_IT+0x18c>
 8009330:	a201      	add	r2, pc, #4	; (adr r2, 8009338 <HAL_TIM_IC_Start_IT+0x110>)
 8009332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009336:	bf00      	nop
 8009338:	0800936d 	.word	0x0800936d
 800933c:	080093b5 	.word	0x080093b5
 8009340:	080093b5 	.word	0x080093b5
 8009344:	080093b5 	.word	0x080093b5
 8009348:	0800937f 	.word	0x0800937f
 800934c:	080093b5 	.word	0x080093b5
 8009350:	080093b5 	.word	0x080093b5
 8009354:	080093b5 	.word	0x080093b5
 8009358:	08009391 	.word	0x08009391
 800935c:	080093b5 	.word	0x080093b5
 8009360:	080093b5 	.word	0x080093b5
 8009364:	080093b5 	.word	0x080093b5
 8009368:	080093a3 	.word	0x080093a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68da      	ldr	r2, [r3, #12]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f042 0202 	orr.w	r2, r2, #2
 800937a:	60da      	str	r2, [r3, #12]
      break;
 800937c:	e01d      	b.n	80093ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68da      	ldr	r2, [r3, #12]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f042 0204 	orr.w	r2, r2, #4
 800938c:	60da      	str	r2, [r3, #12]
      break;
 800938e:	e014      	b.n	80093ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68da      	ldr	r2, [r3, #12]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f042 0208 	orr.w	r2, r2, #8
 800939e:	60da      	str	r2, [r3, #12]
      break;
 80093a0:	e00b      	b.n	80093ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68da      	ldr	r2, [r3, #12]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f042 0210 	orr.w	r2, r2, #16
 80093b0:	60da      	str	r2, [r3, #12]
      break;
 80093b2:	e002      	b.n	80093ba <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	73fb      	strb	r3, [r7, #15]
      break;
 80093b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d148      	bne.n	8009452 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2201      	movs	r2, #1
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f001 f9e5 	bl	800a798 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a22      	ldr	r2, [pc, #136]	; (800945c <HAL_TIM_IC_Start_IT+0x234>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d022      	beq.n	800941e <HAL_TIM_IC_Start_IT+0x1f6>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093e0:	d01d      	beq.n	800941e <HAL_TIM_IC_Start_IT+0x1f6>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a1e      	ldr	r2, [pc, #120]	; (8009460 <HAL_TIM_IC_Start_IT+0x238>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d018      	beq.n	800941e <HAL_TIM_IC_Start_IT+0x1f6>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a1c      	ldr	r2, [pc, #112]	; (8009464 <HAL_TIM_IC_Start_IT+0x23c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d013      	beq.n	800941e <HAL_TIM_IC_Start_IT+0x1f6>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a1b      	ldr	r2, [pc, #108]	; (8009468 <HAL_TIM_IC_Start_IT+0x240>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d00e      	beq.n	800941e <HAL_TIM_IC_Start_IT+0x1f6>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a19      	ldr	r2, [pc, #100]	; (800946c <HAL_TIM_IC_Start_IT+0x244>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d009      	beq.n	800941e <HAL_TIM_IC_Start_IT+0x1f6>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a18      	ldr	r2, [pc, #96]	; (8009470 <HAL_TIM_IC_Start_IT+0x248>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d004      	beq.n	800941e <HAL_TIM_IC_Start_IT+0x1f6>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a16      	ldr	r2, [pc, #88]	; (8009474 <HAL_TIM_IC_Start_IT+0x24c>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d111      	bne.n	8009442 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f003 0307 	and.w	r3, r3, #7
 8009428:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	2b06      	cmp	r3, #6
 800942e:	d010      	beq.n	8009452 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f042 0201 	orr.w	r2, r2, #1
 800943e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009440:	e007      	b.n	8009452 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f042 0201 	orr.w	r2, r2, #1
 8009450:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009452:	7bfb      	ldrb	r3, [r7, #15]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	40010000 	.word	0x40010000
 8009460:	40000400 	.word	0x40000400
 8009464:	40000800 	.word	0x40000800
 8009468:	40000c00 	.word	0x40000c00
 800946c:	40010400 	.word	0x40010400
 8009470:	40014000 	.word	0x40014000
 8009474:	40001800 	.word	0x40001800

08009478 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	2b0c      	cmp	r3, #12
 800948a:	d841      	bhi.n	8009510 <HAL_TIM_IC_Stop_IT+0x98>
 800948c:	a201      	add	r2, pc, #4	; (adr r2, 8009494 <HAL_TIM_IC_Stop_IT+0x1c>)
 800948e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009492:	bf00      	nop
 8009494:	080094c9 	.word	0x080094c9
 8009498:	08009511 	.word	0x08009511
 800949c:	08009511 	.word	0x08009511
 80094a0:	08009511 	.word	0x08009511
 80094a4:	080094db 	.word	0x080094db
 80094a8:	08009511 	.word	0x08009511
 80094ac:	08009511 	.word	0x08009511
 80094b0:	08009511 	.word	0x08009511
 80094b4:	080094ed 	.word	0x080094ed
 80094b8:	08009511 	.word	0x08009511
 80094bc:	08009511 	.word	0x08009511
 80094c0:	08009511 	.word	0x08009511
 80094c4:	080094ff 	.word	0x080094ff
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68da      	ldr	r2, [r3, #12]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f022 0202 	bic.w	r2, r2, #2
 80094d6:	60da      	str	r2, [r3, #12]
      break;
 80094d8:	e01d      	b.n	8009516 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68da      	ldr	r2, [r3, #12]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f022 0204 	bic.w	r2, r2, #4
 80094e8:	60da      	str	r2, [r3, #12]
      break;
 80094ea:	e014      	b.n	8009516 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68da      	ldr	r2, [r3, #12]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f022 0208 	bic.w	r2, r2, #8
 80094fa:	60da      	str	r2, [r3, #12]
      break;
 80094fc:	e00b      	b.n	8009516 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68da      	ldr	r2, [r3, #12]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 0210 	bic.w	r2, r2, #16
 800950c:	60da      	str	r2, [r3, #12]
      break;
 800950e:	e002      	b.n	8009516 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	73fb      	strb	r3, [r7, #15]
      break;
 8009514:	bf00      	nop
  }

  if (status == HAL_OK)
 8009516:	7bfb      	ldrb	r3, [r7, #15]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d156      	bne.n	80095ca <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2200      	movs	r2, #0
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	4618      	mov	r0, r3
 8009526:	f001 f937 	bl	800a798 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6a1a      	ldr	r2, [r3, #32]
 8009530:	f241 1311 	movw	r3, #4369	; 0x1111
 8009534:	4013      	ands	r3, r2
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10f      	bne.n	800955a <HAL_TIM_IC_Stop_IT+0xe2>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6a1a      	ldr	r2, [r3, #32]
 8009540:	f240 4344 	movw	r3, #1092	; 0x444
 8009544:	4013      	ands	r3, r2
 8009546:	2b00      	cmp	r3, #0
 8009548:	d107      	bne.n	800955a <HAL_TIM_IC_Stop_IT+0xe2>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f022 0201 	bic.w	r2, r2, #1
 8009558:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d104      	bne.n	800956a <HAL_TIM_IC_Stop_IT+0xf2>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009568:	e013      	b.n	8009592 <HAL_TIM_IC_Stop_IT+0x11a>
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	2b04      	cmp	r3, #4
 800956e:	d104      	bne.n	800957a <HAL_TIM_IC_Stop_IT+0x102>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009578:	e00b      	b.n	8009592 <HAL_TIM_IC_Stop_IT+0x11a>
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2b08      	cmp	r3, #8
 800957e:	d104      	bne.n	800958a <HAL_TIM_IC_Stop_IT+0x112>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009588:	e003      	b.n	8009592 <HAL_TIM_IC_Stop_IT+0x11a>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d104      	bne.n	80095a2 <HAL_TIM_IC_Stop_IT+0x12a>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095a0:	e013      	b.n	80095ca <HAL_TIM_IC_Stop_IT+0x152>
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	2b04      	cmp	r3, #4
 80095a6:	d104      	bne.n	80095b2 <HAL_TIM_IC_Stop_IT+0x13a>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095b0:	e00b      	b.n	80095ca <HAL_TIM_IC_Stop_IT+0x152>
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	2b08      	cmp	r3, #8
 80095b6:	d104      	bne.n	80095c2 <HAL_TIM_IC_Stop_IT+0x14a>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095c0:	e003      	b.n	80095ca <HAL_TIM_IC_Stop_IT+0x152>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e097      	b.n	8009718 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d106      	bne.n	8009602 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7fc fdc9 	bl	8006194 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2202      	movs	r2, #2
 8009606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	6812      	ldr	r2, [r2, #0]
 8009614:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009618:	f023 0307 	bic.w	r3, r3, #7
 800961c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	3304      	adds	r3, #4
 8009626:	4619      	mov	r1, r3
 8009628:	4610      	mov	r0, r2
 800962a:	f000 fca1 	bl	8009f70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009656:	f023 0303 	bic.w	r3, r3, #3
 800965a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	689a      	ldr	r2, [r3, #8]
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	021b      	lsls	r3, r3, #8
 8009666:	4313      	orrs	r3, r2
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	4313      	orrs	r3, r2
 800966c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009674:	f023 030c 	bic.w	r3, r3, #12
 8009678:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009680:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009684:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	69db      	ldr	r3, [r3, #28]
 800968e:	021b      	lsls	r3, r3, #8
 8009690:	4313      	orrs	r3, r2
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	4313      	orrs	r3, r2
 8009696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	011a      	lsls	r2, r3, #4
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	031b      	lsls	r3, r3, #12
 80096a4:	4313      	orrs	r3, r2
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80096b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80096ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	685a      	ldr	r2, [r3, #4]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	011b      	lsls	r3, r3, #4
 80096c6:	4313      	orrs	r3, r2
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2201      	movs	r2, #1
 800970a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3718      	adds	r7, #24
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009730:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009738:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009740:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009748:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d110      	bne.n	8009772 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009750:	7bfb      	ldrb	r3, [r7, #15]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d102      	bne.n	800975c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009756:	7b7b      	ldrb	r3, [r7, #13]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d001      	beq.n	8009760 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e069      	b.n	8009834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009770:	e031      	b.n	80097d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b04      	cmp	r3, #4
 8009776:	d110      	bne.n	800979a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009778:	7bbb      	ldrb	r3, [r7, #14]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d102      	bne.n	8009784 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800977e:	7b3b      	ldrb	r3, [r7, #12]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d001      	beq.n	8009788 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e055      	b.n	8009834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2202      	movs	r2, #2
 8009794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009798:	e01d      	b.n	80097d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800979a:	7bfb      	ldrb	r3, [r7, #15]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d108      	bne.n	80097b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80097a0:	7bbb      	ldrb	r3, [r7, #14]
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d105      	bne.n	80097b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80097a6:	7b7b      	ldrb	r3, [r7, #13]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d102      	bne.n	80097b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80097ac:	7b3b      	ldrb	r3, [r7, #12]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d001      	beq.n	80097b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e03e      	b.n	8009834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2202      	movs	r2, #2
 80097ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2202      	movs	r2, #2
 80097c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2202      	movs	r2, #2
 80097ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2202      	movs	r2, #2
 80097d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <HAL_TIM_Encoder_Start+0xc4>
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	2b04      	cmp	r3, #4
 80097e0:	d008      	beq.n	80097f4 <HAL_TIM_Encoder_Start+0xd4>
 80097e2:	e00f      	b.n	8009804 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2201      	movs	r2, #1
 80097ea:	2100      	movs	r1, #0
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 ffd3 	bl	800a798 <TIM_CCxChannelCmd>
      break;
 80097f2:	e016      	b.n	8009822 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2201      	movs	r2, #1
 80097fa:	2104      	movs	r1, #4
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 ffcb 	bl	800a798 <TIM_CCxChannelCmd>
      break;
 8009802:	e00e      	b.n	8009822 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2201      	movs	r2, #1
 800980a:	2100      	movs	r1, #0
 800980c:	4618      	mov	r0, r3
 800980e:	f000 ffc3 	bl	800a798 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2201      	movs	r2, #1
 8009818:	2104      	movs	r1, #4
 800981a:	4618      	mov	r0, r3
 800981c:	f000 ffbc 	bl	800a798 <TIM_CCxChannelCmd>
      break;
 8009820:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f042 0201 	orr.w	r2, r2, #1
 8009830:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	f003 0302 	and.w	r3, r3, #2
 800984e:	2b02      	cmp	r3, #2
 8009850:	d122      	bne.n	8009898 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	f003 0302 	and.w	r3, r3, #2
 800985c:	2b02      	cmp	r3, #2
 800985e:	d11b      	bne.n	8009898 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f06f 0202 	mvn.w	r2, #2
 8009868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	f003 0303 	and.w	r3, r3, #3
 800987a:	2b00      	cmp	r3, #0
 800987c:	d003      	beq.n	8009886 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7f7 fb3a 	bl	8000ef8 <HAL_TIM_IC_CaptureCallback>
 8009884:	e005      	b.n	8009892 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fb54 	bl	8009f34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fb5b 	bl	8009f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	f003 0304 	and.w	r3, r3, #4
 80098a2:	2b04      	cmp	r3, #4
 80098a4:	d122      	bne.n	80098ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b04      	cmp	r3, #4
 80098b2:	d11b      	bne.n	80098ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f06f 0204 	mvn.w	r2, #4
 80098bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2202      	movs	r2, #2
 80098c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7f7 fb10 	bl	8000ef8 <HAL_TIM_IC_CaptureCallback>
 80098d8:	e005      	b.n	80098e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fb2a 	bl	8009f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fb31 	bl	8009f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	f003 0308 	and.w	r3, r3, #8
 80098f6:	2b08      	cmp	r3, #8
 80098f8:	d122      	bne.n	8009940 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	f003 0308 	and.w	r3, r3, #8
 8009904:	2b08      	cmp	r3, #8
 8009906:	d11b      	bne.n	8009940 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f06f 0208 	mvn.w	r2, #8
 8009910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2204      	movs	r2, #4
 8009916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	69db      	ldr	r3, [r3, #28]
 800991e:	f003 0303 	and.w	r3, r3, #3
 8009922:	2b00      	cmp	r3, #0
 8009924:	d003      	beq.n	800992e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7f7 fae6 	bl	8000ef8 <HAL_TIM_IC_CaptureCallback>
 800992c:	e005      	b.n	800993a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fb00 	bl	8009f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fb07 	bl	8009f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	f003 0310 	and.w	r3, r3, #16
 800994a:	2b10      	cmp	r3, #16
 800994c:	d122      	bne.n	8009994 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	f003 0310 	and.w	r3, r3, #16
 8009958:	2b10      	cmp	r3, #16
 800995a:	d11b      	bne.n	8009994 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f06f 0210 	mvn.w	r2, #16
 8009964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2208      	movs	r2, #8
 800996a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	69db      	ldr	r3, [r3, #28]
 8009972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009976:	2b00      	cmp	r3, #0
 8009978:	d003      	beq.n	8009982 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7f7 fabc 	bl	8000ef8 <HAL_TIM_IC_CaptureCallback>
 8009980:	e005      	b.n	800998e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fad6 	bl	8009f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fadd 	bl	8009f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d10e      	bne.n	80099c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d107      	bne.n	80099c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f06f 0201 	mvn.w	r2, #1
 80099b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fab0 	bl	8009f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ca:	2b80      	cmp	r3, #128	; 0x80
 80099cc:	d10e      	bne.n	80099ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099d8:	2b80      	cmp	r3, #128	; 0x80
 80099da:	d107      	bne.n	80099ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 ffd4 	bl	800a994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f6:	2b40      	cmp	r3, #64	; 0x40
 80099f8:	d10e      	bne.n	8009a18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a04:	2b40      	cmp	r3, #64	; 0x40
 8009a06:	d107      	bne.n	8009a18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 faa2 	bl	8009f5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	f003 0320 	and.w	r3, r3, #32
 8009a22:	2b20      	cmp	r3, #32
 8009a24:	d10e      	bne.n	8009a44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	f003 0320 	and.w	r3, r3, #32
 8009a30:	2b20      	cmp	r3, #32
 8009a32:	d107      	bne.n	8009a44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f06f 0220 	mvn.w	r2, #32
 8009a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 ff9e 	bl	800a980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a44:	bf00      	nop
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d101      	bne.n	8009a6a <HAL_TIM_IC_ConfigChannel+0x1e>
 8009a66:	2302      	movs	r3, #2
 8009a68:	e088      	b.n	8009b7c <HAL_TIM_IC_ConfigChannel+0x130>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d11b      	bne.n	8009ab0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6818      	ldr	r0, [r3, #0]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	6819      	ldr	r1, [r3, #0]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	685a      	ldr	r2, [r3, #4]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f000 fcc2 	bl	800a410 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	699a      	ldr	r2, [r3, #24]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f022 020c 	bic.w	r2, r2, #12
 8009a9a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6999      	ldr	r1, [r3, #24]
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	689a      	ldr	r2, [r3, #8]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	430a      	orrs	r2, r1
 8009aac:	619a      	str	r2, [r3, #24]
 8009aae:	e060      	b.n	8009b72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	d11c      	bne.n	8009af0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6818      	ldr	r0, [r3, #0]
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	6819      	ldr	r1, [r3, #0]
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	f000 fd46 	bl	800a556 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	699a      	ldr	r2, [r3, #24]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009ad8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	6999      	ldr	r1, [r3, #24]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	021a      	lsls	r2, r3, #8
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	430a      	orrs	r2, r1
 8009aec:	619a      	str	r2, [r3, #24]
 8009aee:	e040      	b.n	8009b72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b08      	cmp	r3, #8
 8009af4:	d11b      	bne.n	8009b2e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	6819      	ldr	r1, [r3, #0]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	685a      	ldr	r2, [r3, #4]
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	f000 fd93 	bl	800a630 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	69da      	ldr	r2, [r3, #28]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f022 020c 	bic.w	r2, r2, #12
 8009b18:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	69d9      	ldr	r1, [r3, #28]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	689a      	ldr	r2, [r3, #8]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	61da      	str	r2, [r3, #28]
 8009b2c:	e021      	b.n	8009b72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b0c      	cmp	r3, #12
 8009b32:	d11c      	bne.n	8009b6e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6818      	ldr	r0, [r3, #0]
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	6819      	ldr	r1, [r3, #0]
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	f000 fdb0 	bl	800a6a8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	69da      	ldr	r2, [r3, #28]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009b56:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	69d9      	ldr	r1, [r3, #28]
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	021a      	lsls	r2, r3, #8
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	430a      	orrs	r2, r1
 8009b6a:	61da      	str	r2, [r3, #28]
 8009b6c:	e001      	b.n	8009b72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3718      	adds	r7, #24
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d101      	bne.n	8009ba2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b9e:	2302      	movs	r3, #2
 8009ba0:	e0ae      	b.n	8009d00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2b0c      	cmp	r3, #12
 8009bae:	f200 809f 	bhi.w	8009cf0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009bb2:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb8:	08009bed 	.word	0x08009bed
 8009bbc:	08009cf1 	.word	0x08009cf1
 8009bc0:	08009cf1 	.word	0x08009cf1
 8009bc4:	08009cf1 	.word	0x08009cf1
 8009bc8:	08009c2d 	.word	0x08009c2d
 8009bcc:	08009cf1 	.word	0x08009cf1
 8009bd0:	08009cf1 	.word	0x08009cf1
 8009bd4:	08009cf1 	.word	0x08009cf1
 8009bd8:	08009c6f 	.word	0x08009c6f
 8009bdc:	08009cf1 	.word	0x08009cf1
 8009be0:	08009cf1 	.word	0x08009cf1
 8009be4:	08009cf1 	.word	0x08009cf1
 8009be8:	08009caf 	.word	0x08009caf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68b9      	ldr	r1, [r7, #8]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 fa5c 	bl	800a0b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	699a      	ldr	r2, [r3, #24]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f042 0208 	orr.w	r2, r2, #8
 8009c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	699a      	ldr	r2, [r3, #24]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f022 0204 	bic.w	r2, r2, #4
 8009c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	6999      	ldr	r1, [r3, #24]
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	691a      	ldr	r2, [r3, #16]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	430a      	orrs	r2, r1
 8009c28:	619a      	str	r2, [r3, #24]
      break;
 8009c2a:	e064      	b.n	8009cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68b9      	ldr	r1, [r7, #8]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f000 faac 	bl	800a190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	699a      	ldr	r2, [r3, #24]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	699a      	ldr	r2, [r3, #24]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6999      	ldr	r1, [r3, #24]
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	021a      	lsls	r2, r3, #8
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	430a      	orrs	r2, r1
 8009c6a:	619a      	str	r2, [r3, #24]
      break;
 8009c6c:	e043      	b.n	8009cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68b9      	ldr	r1, [r7, #8]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f000 fb01 	bl	800a27c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	69da      	ldr	r2, [r3, #28]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f042 0208 	orr.w	r2, r2, #8
 8009c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	69da      	ldr	r2, [r3, #28]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f022 0204 	bic.w	r2, r2, #4
 8009c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	69d9      	ldr	r1, [r3, #28]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	691a      	ldr	r2, [r3, #16]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	430a      	orrs	r2, r1
 8009caa:	61da      	str	r2, [r3, #28]
      break;
 8009cac:	e023      	b.n	8009cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68b9      	ldr	r1, [r7, #8]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 fb55 	bl	800a364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	69da      	ldr	r2, [r3, #28]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	69da      	ldr	r2, [r3, #28]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	69d9      	ldr	r1, [r3, #28]
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	021a      	lsls	r2, r3, #8
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	430a      	orrs	r2, r1
 8009cec:	61da      	str	r2, [r3, #28]
      break;
 8009cee:	e002      	b.n	8009cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8009cf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3718      	adds	r7, #24
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d101      	bne.n	8009d24 <HAL_TIM_ConfigClockSource+0x1c>
 8009d20:	2302      	movs	r3, #2
 8009d22:	e0b4      	b.n	8009e8e <HAL_TIM_ConfigClockSource+0x186>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2202      	movs	r2, #2
 8009d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d5c:	d03e      	beq.n	8009ddc <HAL_TIM_ConfigClockSource+0xd4>
 8009d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d62:	f200 8087 	bhi.w	8009e74 <HAL_TIM_ConfigClockSource+0x16c>
 8009d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d6a:	f000 8086 	beq.w	8009e7a <HAL_TIM_ConfigClockSource+0x172>
 8009d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d72:	d87f      	bhi.n	8009e74 <HAL_TIM_ConfigClockSource+0x16c>
 8009d74:	2b70      	cmp	r3, #112	; 0x70
 8009d76:	d01a      	beq.n	8009dae <HAL_TIM_ConfigClockSource+0xa6>
 8009d78:	2b70      	cmp	r3, #112	; 0x70
 8009d7a:	d87b      	bhi.n	8009e74 <HAL_TIM_ConfigClockSource+0x16c>
 8009d7c:	2b60      	cmp	r3, #96	; 0x60
 8009d7e:	d050      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x11a>
 8009d80:	2b60      	cmp	r3, #96	; 0x60
 8009d82:	d877      	bhi.n	8009e74 <HAL_TIM_ConfigClockSource+0x16c>
 8009d84:	2b50      	cmp	r3, #80	; 0x50
 8009d86:	d03c      	beq.n	8009e02 <HAL_TIM_ConfigClockSource+0xfa>
 8009d88:	2b50      	cmp	r3, #80	; 0x50
 8009d8a:	d873      	bhi.n	8009e74 <HAL_TIM_ConfigClockSource+0x16c>
 8009d8c:	2b40      	cmp	r3, #64	; 0x40
 8009d8e:	d058      	beq.n	8009e42 <HAL_TIM_ConfigClockSource+0x13a>
 8009d90:	2b40      	cmp	r3, #64	; 0x40
 8009d92:	d86f      	bhi.n	8009e74 <HAL_TIM_ConfigClockSource+0x16c>
 8009d94:	2b30      	cmp	r3, #48	; 0x30
 8009d96:	d064      	beq.n	8009e62 <HAL_TIM_ConfigClockSource+0x15a>
 8009d98:	2b30      	cmp	r3, #48	; 0x30
 8009d9a:	d86b      	bhi.n	8009e74 <HAL_TIM_ConfigClockSource+0x16c>
 8009d9c:	2b20      	cmp	r3, #32
 8009d9e:	d060      	beq.n	8009e62 <HAL_TIM_ConfigClockSource+0x15a>
 8009da0:	2b20      	cmp	r3, #32
 8009da2:	d867      	bhi.n	8009e74 <HAL_TIM_ConfigClockSource+0x16c>
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d05c      	beq.n	8009e62 <HAL_TIM_ConfigClockSource+0x15a>
 8009da8:	2b10      	cmp	r3, #16
 8009daa:	d05a      	beq.n	8009e62 <HAL_TIM_ConfigClockSource+0x15a>
 8009dac:	e062      	b.n	8009e74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6818      	ldr	r0, [r3, #0]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	6899      	ldr	r1, [r3, #8]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	f000 fccb 	bl	800a758 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009dd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	609a      	str	r2, [r3, #8]
      break;
 8009dda:	e04f      	b.n	8009e7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6818      	ldr	r0, [r3, #0]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	6899      	ldr	r1, [r3, #8]
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	685a      	ldr	r2, [r3, #4]
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	f000 fcb4 	bl	800a758 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	689a      	ldr	r2, [r3, #8]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009dfe:	609a      	str	r2, [r3, #8]
      break;
 8009e00:	e03c      	b.n	8009e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6818      	ldr	r0, [r3, #0]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	6859      	ldr	r1, [r3, #4]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	f000 fb72 	bl	800a4f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2150      	movs	r1, #80	; 0x50
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f000 fc81 	bl	800a722 <TIM_ITRx_SetConfig>
      break;
 8009e20:	e02c      	b.n	8009e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6818      	ldr	r0, [r3, #0]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	6859      	ldr	r1, [r3, #4]
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	f000 fbce 	bl	800a5d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2160      	movs	r1, #96	; 0x60
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 fc71 	bl	800a722 <TIM_ITRx_SetConfig>
      break;
 8009e40:	e01c      	b.n	8009e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6818      	ldr	r0, [r3, #0]
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	6859      	ldr	r1, [r3, #4]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	461a      	mov	r2, r3
 8009e50:	f000 fb52 	bl	800a4f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2140      	movs	r1, #64	; 0x40
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 fc61 	bl	800a722 <TIM_ITRx_SetConfig>
      break;
 8009e60:	e00c      	b.n	8009e7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	f000 fc58 	bl	800a722 <TIM_ITRx_SetConfig>
      break;
 8009e72:	e003      	b.n	8009e7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	73fb      	strb	r3, [r7, #15]
      break;
 8009e78:	e000      	b.n	8009e7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009e7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
	...

08009e98 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	2b0c      	cmp	r3, #12
 8009eaa:	d831      	bhi.n	8009f10 <HAL_TIM_ReadCapturedValue+0x78>
 8009eac:	a201      	add	r2, pc, #4	; (adr r2, 8009eb4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb2:	bf00      	nop
 8009eb4:	08009ee9 	.word	0x08009ee9
 8009eb8:	08009f11 	.word	0x08009f11
 8009ebc:	08009f11 	.word	0x08009f11
 8009ec0:	08009f11 	.word	0x08009f11
 8009ec4:	08009ef3 	.word	0x08009ef3
 8009ec8:	08009f11 	.word	0x08009f11
 8009ecc:	08009f11 	.word	0x08009f11
 8009ed0:	08009f11 	.word	0x08009f11
 8009ed4:	08009efd 	.word	0x08009efd
 8009ed8:	08009f11 	.word	0x08009f11
 8009edc:	08009f11 	.word	0x08009f11
 8009ee0:	08009f11 	.word	0x08009f11
 8009ee4:	08009f07 	.word	0x08009f07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eee:	60fb      	str	r3, [r7, #12]

      break;
 8009ef0:	e00f      	b.n	8009f12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef8:	60fb      	str	r3, [r7, #12]

      break;
 8009efa:	e00a      	b.n	8009f12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f02:	60fb      	str	r3, [r7, #12]

      break;
 8009f04:	e005      	b.n	8009f12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f0c:	60fb      	str	r3, [r7, #12]

      break;
 8009f0e:	e000      	b.n	8009f12 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009f10:	bf00      	nop
  }

  return tmpreg;
 8009f12:	68fb      	ldr	r3, [r7, #12]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f3c:	bf00      	nop
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f64:	bf00      	nop
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a40      	ldr	r2, [pc, #256]	; (800a084 <TIM_Base_SetConfig+0x114>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d013      	beq.n	8009fb0 <TIM_Base_SetConfig+0x40>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f8e:	d00f      	beq.n	8009fb0 <TIM_Base_SetConfig+0x40>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a3d      	ldr	r2, [pc, #244]	; (800a088 <TIM_Base_SetConfig+0x118>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d00b      	beq.n	8009fb0 <TIM_Base_SetConfig+0x40>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a3c      	ldr	r2, [pc, #240]	; (800a08c <TIM_Base_SetConfig+0x11c>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d007      	beq.n	8009fb0 <TIM_Base_SetConfig+0x40>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a3b      	ldr	r2, [pc, #236]	; (800a090 <TIM_Base_SetConfig+0x120>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d003      	beq.n	8009fb0 <TIM_Base_SetConfig+0x40>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a3a      	ldr	r2, [pc, #232]	; (800a094 <TIM_Base_SetConfig+0x124>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d108      	bne.n	8009fc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4a2f      	ldr	r2, [pc, #188]	; (800a084 <TIM_Base_SetConfig+0x114>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d02b      	beq.n	800a022 <TIM_Base_SetConfig+0xb2>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd0:	d027      	beq.n	800a022 <TIM_Base_SetConfig+0xb2>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a2c      	ldr	r2, [pc, #176]	; (800a088 <TIM_Base_SetConfig+0x118>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d023      	beq.n	800a022 <TIM_Base_SetConfig+0xb2>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a2b      	ldr	r2, [pc, #172]	; (800a08c <TIM_Base_SetConfig+0x11c>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d01f      	beq.n	800a022 <TIM_Base_SetConfig+0xb2>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a2a      	ldr	r2, [pc, #168]	; (800a090 <TIM_Base_SetConfig+0x120>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d01b      	beq.n	800a022 <TIM_Base_SetConfig+0xb2>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a29      	ldr	r2, [pc, #164]	; (800a094 <TIM_Base_SetConfig+0x124>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d017      	beq.n	800a022 <TIM_Base_SetConfig+0xb2>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a28      	ldr	r2, [pc, #160]	; (800a098 <TIM_Base_SetConfig+0x128>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d013      	beq.n	800a022 <TIM_Base_SetConfig+0xb2>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a27      	ldr	r2, [pc, #156]	; (800a09c <TIM_Base_SetConfig+0x12c>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d00f      	beq.n	800a022 <TIM_Base_SetConfig+0xb2>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a26      	ldr	r2, [pc, #152]	; (800a0a0 <TIM_Base_SetConfig+0x130>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d00b      	beq.n	800a022 <TIM_Base_SetConfig+0xb2>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a25      	ldr	r2, [pc, #148]	; (800a0a4 <TIM_Base_SetConfig+0x134>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d007      	beq.n	800a022 <TIM_Base_SetConfig+0xb2>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a24      	ldr	r2, [pc, #144]	; (800a0a8 <TIM_Base_SetConfig+0x138>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d003      	beq.n	800a022 <TIM_Base_SetConfig+0xb2>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a23      	ldr	r2, [pc, #140]	; (800a0ac <TIM_Base_SetConfig+0x13c>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d108      	bne.n	800a034 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	4313      	orrs	r3, r2
 800a032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	695b      	ldr	r3, [r3, #20]
 800a03e:	4313      	orrs	r3, r2
 800a040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	689a      	ldr	r2, [r3, #8]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a0a      	ldr	r2, [pc, #40]	; (800a084 <TIM_Base_SetConfig+0x114>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d003      	beq.n	800a068 <TIM_Base_SetConfig+0xf8>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a0c      	ldr	r2, [pc, #48]	; (800a094 <TIM_Base_SetConfig+0x124>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d103      	bne.n	800a070 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	691a      	ldr	r2, [r3, #16]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2201      	movs	r2, #1
 800a074:	615a      	str	r2, [r3, #20]
}
 800a076:	bf00      	nop
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	40010000 	.word	0x40010000
 800a088:	40000400 	.word	0x40000400
 800a08c:	40000800 	.word	0x40000800
 800a090:	40000c00 	.word	0x40000c00
 800a094:	40010400 	.word	0x40010400
 800a098:	40014000 	.word	0x40014000
 800a09c:	40014400 	.word	0x40014400
 800a0a0:	40014800 	.word	0x40014800
 800a0a4:	40001800 	.word	0x40001800
 800a0a8:	40001c00 	.word	0x40001c00
 800a0ac:	40002000 	.word	0x40002000

0800a0b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b087      	sub	sp, #28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	f023 0201 	bic.w	r2, r3, #1
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f023 0303 	bic.w	r3, r3, #3
 800a0e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f023 0302 	bic.w	r3, r3, #2
 800a0f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	4313      	orrs	r3, r2
 800a102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a20      	ldr	r2, [pc, #128]	; (800a188 <TIM_OC1_SetConfig+0xd8>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d003      	beq.n	800a114 <TIM_OC1_SetConfig+0x64>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a1f      	ldr	r2, [pc, #124]	; (800a18c <TIM_OC1_SetConfig+0xdc>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d10c      	bne.n	800a12e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	f023 0308 	bic.w	r3, r3, #8
 800a11a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	4313      	orrs	r3, r2
 800a124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f023 0304 	bic.w	r3, r3, #4
 800a12c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a15      	ldr	r2, [pc, #84]	; (800a188 <TIM_OC1_SetConfig+0xd8>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d003      	beq.n	800a13e <TIM_OC1_SetConfig+0x8e>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a14      	ldr	r2, [pc, #80]	; (800a18c <TIM_OC1_SetConfig+0xdc>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d111      	bne.n	800a162 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a14c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	4313      	orrs	r3, r2
 800a156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	699b      	ldr	r3, [r3, #24]
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	4313      	orrs	r3, r2
 800a160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	685a      	ldr	r2, [r3, #4]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	621a      	str	r2, [r3, #32]
}
 800a17c:	bf00      	nop
 800a17e:	371c      	adds	r7, #28
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr
 800a188:	40010000 	.word	0x40010000
 800a18c:	40010400 	.word	0x40010400

0800a190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a190:	b480      	push	{r7}
 800a192:	b087      	sub	sp, #28
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a1b      	ldr	r3, [r3, #32]
 800a19e:	f023 0210 	bic.w	r2, r3, #16
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a1b      	ldr	r3, [r3, #32]
 800a1aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	699b      	ldr	r3, [r3, #24]
 800a1b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	021b      	lsls	r3, r3, #8
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	f023 0320 	bic.w	r3, r3, #32
 800a1da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	011b      	lsls	r3, r3, #4
 800a1e2:	697a      	ldr	r2, [r7, #20]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a22      	ldr	r2, [pc, #136]	; (800a274 <TIM_OC2_SetConfig+0xe4>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d003      	beq.n	800a1f8 <TIM_OC2_SetConfig+0x68>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a21      	ldr	r2, [pc, #132]	; (800a278 <TIM_OC2_SetConfig+0xe8>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d10d      	bne.n	800a214 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	011b      	lsls	r3, r3, #4
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	4313      	orrs	r3, r2
 800a20a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a212:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a17      	ldr	r2, [pc, #92]	; (800a274 <TIM_OC2_SetConfig+0xe4>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d003      	beq.n	800a224 <TIM_OC2_SetConfig+0x94>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4a16      	ldr	r2, [pc, #88]	; (800a278 <TIM_OC2_SetConfig+0xe8>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d113      	bne.n	800a24c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a22a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a232:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	695b      	ldr	r3, [r3, #20]
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	693a      	ldr	r2, [r7, #16]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	4313      	orrs	r3, r2
 800a24a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	685a      	ldr	r2, [r3, #4]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	621a      	str	r2, [r3, #32]
}
 800a266:	bf00      	nop
 800a268:	371c      	adds	r7, #28
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	40010000 	.word	0x40010000
 800a278:	40010400 	.word	0x40010400

0800a27c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b087      	sub	sp, #28
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	69db      	ldr	r3, [r3, #28]
 800a2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f023 0303 	bic.w	r3, r3, #3
 800a2b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	021b      	lsls	r3, r3, #8
 800a2cc:	697a      	ldr	r2, [r7, #20]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a21      	ldr	r2, [pc, #132]	; (800a35c <TIM_OC3_SetConfig+0xe0>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d003      	beq.n	800a2e2 <TIM_OC3_SetConfig+0x66>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a20      	ldr	r2, [pc, #128]	; (800a360 <TIM_OC3_SetConfig+0xe4>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d10d      	bne.n	800a2fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	021b      	lsls	r3, r3, #8
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a16      	ldr	r2, [pc, #88]	; (800a35c <TIM_OC3_SetConfig+0xe0>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d003      	beq.n	800a30e <TIM_OC3_SetConfig+0x92>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a15      	ldr	r2, [pc, #84]	; (800a360 <TIM_OC3_SetConfig+0xe4>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d113      	bne.n	800a336 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a31c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	011b      	lsls	r3, r3, #4
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	4313      	orrs	r3, r2
 800a328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	699b      	ldr	r3, [r3, #24]
 800a32e:	011b      	lsls	r3, r3, #4
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	4313      	orrs	r3, r2
 800a334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	685a      	ldr	r2, [r3, #4]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	621a      	str	r2, [r3, #32]
}
 800a350:	bf00      	nop
 800a352:	371c      	adds	r7, #28
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr
 800a35c:	40010000 	.word	0x40010000
 800a360:	40010400 	.word	0x40010400

0800a364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a364:	b480      	push	{r7}
 800a366:	b087      	sub	sp, #28
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	69db      	ldr	r3, [r3, #28]
 800a38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	021b      	lsls	r3, r3, #8
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	031b      	lsls	r3, r3, #12
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a12      	ldr	r2, [pc, #72]	; (800a408 <TIM_OC4_SetConfig+0xa4>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d003      	beq.n	800a3cc <TIM_OC4_SetConfig+0x68>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a11      	ldr	r2, [pc, #68]	; (800a40c <TIM_OC4_SetConfig+0xa8>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d109      	bne.n	800a3e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	019b      	lsls	r3, r3, #6
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	685a      	ldr	r2, [r3, #4]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	621a      	str	r2, [r3, #32]
}
 800a3fa:	bf00      	nop
 800a3fc:	371c      	adds	r7, #28
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	40010000 	.word	0x40010000
 800a40c:	40010400 	.word	0x40010400

0800a410 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a410:	b480      	push	{r7}
 800a412:	b087      	sub	sp, #28
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
 800a41c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	f023 0201 	bic.w	r2, r3, #1
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	4a28      	ldr	r2, [pc, #160]	; (800a4dc <TIM_TI1_SetConfig+0xcc>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d01b      	beq.n	800a476 <TIM_TI1_SetConfig+0x66>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a444:	d017      	beq.n	800a476 <TIM_TI1_SetConfig+0x66>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	4a25      	ldr	r2, [pc, #148]	; (800a4e0 <TIM_TI1_SetConfig+0xd0>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d013      	beq.n	800a476 <TIM_TI1_SetConfig+0x66>
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	4a24      	ldr	r2, [pc, #144]	; (800a4e4 <TIM_TI1_SetConfig+0xd4>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d00f      	beq.n	800a476 <TIM_TI1_SetConfig+0x66>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	4a23      	ldr	r2, [pc, #140]	; (800a4e8 <TIM_TI1_SetConfig+0xd8>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d00b      	beq.n	800a476 <TIM_TI1_SetConfig+0x66>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	4a22      	ldr	r2, [pc, #136]	; (800a4ec <TIM_TI1_SetConfig+0xdc>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d007      	beq.n	800a476 <TIM_TI1_SetConfig+0x66>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	4a21      	ldr	r2, [pc, #132]	; (800a4f0 <TIM_TI1_SetConfig+0xe0>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d003      	beq.n	800a476 <TIM_TI1_SetConfig+0x66>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	4a20      	ldr	r2, [pc, #128]	; (800a4f4 <TIM_TI1_SetConfig+0xe4>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d101      	bne.n	800a47a <TIM_TI1_SetConfig+0x6a>
 800a476:	2301      	movs	r3, #1
 800a478:	e000      	b.n	800a47c <TIM_TI1_SetConfig+0x6c>
 800a47a:	2300      	movs	r3, #0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d008      	beq.n	800a492 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	f023 0303 	bic.w	r3, r3, #3
 800a486:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a488:	697a      	ldr	r2, [r7, #20]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	617b      	str	r3, [r7, #20]
 800a490:	e003      	b.n	800a49a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	f043 0301 	orr.w	r3, r3, #1
 800a498:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	011b      	lsls	r3, r3, #4
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	697a      	ldr	r2, [r7, #20]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	f023 030a 	bic.w	r3, r3, #10
 800a4b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	f003 030a 	and.w	r3, r3, #10
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	621a      	str	r2, [r3, #32]
}
 800a4ce:	bf00      	nop
 800a4d0:	371c      	adds	r7, #28
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	40010000 	.word	0x40010000
 800a4e0:	40000400 	.word	0x40000400
 800a4e4:	40000800 	.word	0x40000800
 800a4e8:	40000c00 	.word	0x40000c00
 800a4ec:	40010400 	.word	0x40010400
 800a4f0:	40014000 	.word	0x40014000
 800a4f4:	40001800 	.word	0x40001800

0800a4f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b087      	sub	sp, #28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6a1b      	ldr	r3, [r3, #32]
 800a508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6a1b      	ldr	r3, [r3, #32]
 800a50e:	f023 0201 	bic.w	r2, r3, #1
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	011b      	lsls	r3, r3, #4
 800a528:	693a      	ldr	r2, [r7, #16]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f023 030a 	bic.w	r3, r3, #10
 800a534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	693a      	ldr	r2, [r7, #16]
 800a542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	621a      	str	r2, [r3, #32]
}
 800a54a:	bf00      	nop
 800a54c:	371c      	adds	r7, #28
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr

0800a556 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a556:	b480      	push	{r7}
 800a558:	b087      	sub	sp, #28
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	60f8      	str	r0, [r7, #12]
 800a55e:	60b9      	str	r1, [r7, #8]
 800a560:	607a      	str	r2, [r7, #4]
 800a562:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6a1b      	ldr	r3, [r3, #32]
 800a568:	f023 0210 	bic.w	r2, r3, #16
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6a1b      	ldr	r3, [r3, #32]
 800a57a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a582:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	021b      	lsls	r3, r3, #8
 800a588:	697a      	ldr	r2, [r7, #20]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	031b      	lsls	r3, r3, #12
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	697a      	ldr	r2, [r7, #20]
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	011b      	lsls	r3, r3, #4
 800a5ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a5b2:	693a      	ldr	r2, [r7, #16]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	621a      	str	r2, [r3, #32]
}
 800a5c4:	bf00      	nop
 800a5c6:	371c      	adds	r7, #28
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b087      	sub	sp, #28
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6a1b      	ldr	r3, [r3, #32]
 800a5e0:	f023 0210 	bic.w	r2, r3, #16
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6a1b      	ldr	r3, [r3, #32]
 800a5f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	031b      	lsls	r3, r3, #12
 800a600:	697a      	ldr	r2, [r7, #20]
 800a602:	4313      	orrs	r3, r2
 800a604:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a60c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	011b      	lsls	r3, r3, #4
 800a612:	693a      	ldr	r2, [r7, #16]
 800a614:	4313      	orrs	r3, r2
 800a616:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	697a      	ldr	r2, [r7, #20]
 800a61c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	621a      	str	r2, [r3, #32]
}
 800a624:	bf00      	nop
 800a626:	371c      	adds	r7, #28
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a630:	b480      	push	{r7}
 800a632:	b087      	sub	sp, #28
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
 800a63c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6a1b      	ldr	r3, [r3, #32]
 800a654:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	f023 0303 	bic.w	r3, r3, #3
 800a65c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4313      	orrs	r3, r2
 800a664:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a66c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	011b      	lsls	r3, r3, #4
 800a672:	b2db      	uxtb	r3, r3
 800a674:	697a      	ldr	r2, [r7, #20]
 800a676:	4313      	orrs	r3, r2
 800a678:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a680:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	021b      	lsls	r3, r3, #8
 800a686:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a68a:	693a      	ldr	r2, [r7, #16]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	697a      	ldr	r2, [r7, #20]
 800a694:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	693a      	ldr	r2, [r7, #16]
 800a69a:	621a      	str	r2, [r3, #32]
}
 800a69c:	bf00      	nop
 800a69e:	371c      	adds	r7, #28
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b087      	sub	sp, #28
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
 800a6b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6a1b      	ldr	r3, [r3, #32]
 800a6ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	69db      	ldr	r3, [r3, #28]
 800a6c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6a1b      	ldr	r3, [r3, #32]
 800a6cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	021b      	lsls	r3, r3, #8
 800a6da:	697a      	ldr	r2, [r7, #20]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	031b      	lsls	r3, r3, #12
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	697a      	ldr	r2, [r7, #20]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a6fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	031b      	lsls	r3, r3, #12
 800a700:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a704:	693a      	ldr	r2, [r7, #16]
 800a706:	4313      	orrs	r3, r2
 800a708:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	693a      	ldr	r2, [r7, #16]
 800a714:	621a      	str	r2, [r3, #32]
}
 800a716:	bf00      	nop
 800a718:	371c      	adds	r7, #28
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a722:	b480      	push	{r7}
 800a724:	b085      	sub	sp, #20
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	4313      	orrs	r3, r2
 800a740:	f043 0307 	orr.w	r3, r3, #7
 800a744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	609a      	str	r2, [r3, #8]
}
 800a74c:	bf00      	nop
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a758:	b480      	push	{r7}
 800a75a:	b087      	sub	sp, #28
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
 800a764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	021a      	lsls	r2, r3, #8
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	431a      	orrs	r2, r3
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	4313      	orrs	r3, r2
 800a780:	697a      	ldr	r2, [r7, #20]
 800a782:	4313      	orrs	r3, r2
 800a784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	609a      	str	r2, [r3, #8]
}
 800a78c:	bf00      	nop
 800a78e:	371c      	adds	r7, #28
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a798:	b480      	push	{r7}
 800a79a:	b087      	sub	sp, #28
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	f003 031f 	and.w	r3, r3, #31
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6a1a      	ldr	r2, [r3, #32]
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	43db      	mvns	r3, r3
 800a7ba:	401a      	ands	r2, r3
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6a1a      	ldr	r2, [r3, #32]
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	f003 031f 	and.w	r3, r3, #31
 800a7ca:	6879      	ldr	r1, [r7, #4]
 800a7cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a7d0:	431a      	orrs	r2, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	621a      	str	r2, [r3, #32]
}
 800a7d6:	bf00      	nop
 800a7d8:	371c      	adds	r7, #28
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr
	...

0800a7e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d101      	bne.n	800a7fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	e05a      	b.n	800a8b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2202      	movs	r2, #2
 800a808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a822:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a21      	ldr	r2, [pc, #132]	; (800a8c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d022      	beq.n	800a886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a848:	d01d      	beq.n	800a886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a1d      	ldr	r2, [pc, #116]	; (800a8c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d018      	beq.n	800a886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a1b      	ldr	r2, [pc, #108]	; (800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d013      	beq.n	800a886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a1a      	ldr	r2, [pc, #104]	; (800a8cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d00e      	beq.n	800a886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a18      	ldr	r2, [pc, #96]	; (800a8d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d009      	beq.n	800a886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a17      	ldr	r2, [pc, #92]	; (800a8d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d004      	beq.n	800a886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a15      	ldr	r2, [pc, #84]	; (800a8d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d10c      	bne.n	800a8a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a88c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	68ba      	ldr	r2, [r7, #8]
 800a894:	4313      	orrs	r3, r2
 800a896:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	68ba      	ldr	r2, [r7, #8]
 800a89e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	40010000 	.word	0x40010000
 800a8c4:	40000400 	.word	0x40000400
 800a8c8:	40000800 	.word	0x40000800
 800a8cc:	40000c00 	.word	0x40000c00
 800a8d0:	40010400 	.word	0x40010400
 800a8d4:	40014000 	.word	0x40014000
 800a8d8:	40001800 	.word	0x40001800

0800a8dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d101      	bne.n	800a8f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a8f4:	2302      	movs	r3, #2
 800a8f6:	e03d      	b.n	800a974 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	4313      	orrs	r3, r2
 800a91a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	4313      	orrs	r3, r2
 800a928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4313      	orrs	r3, r2
 800a936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	4313      	orrs	r3, r2
 800a944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	695b      	ldr	r3, [r3, #20]
 800a950:	4313      	orrs	r3, r2
 800a952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	69db      	ldr	r3, [r3, #28]
 800a95e:	4313      	orrs	r3, r2
 800a960:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d101      	bne.n	800a9ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e03f      	b.n	800aa3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d106      	bne.n	800a9d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7fb fd04 	bl	80063dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2224      	movs	r2, #36	; 0x24
 800a9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	68da      	ldr	r2, [r3, #12]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a9ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 fddb 	bl	800b5a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	691a      	ldr	r2, [r3, #16]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	695a      	ldr	r2, [r3, #20]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68da      	ldr	r2, [r3, #12]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2220      	movs	r2, #32
 800aa2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2220      	movs	r2, #32
 800aa34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b08a      	sub	sp, #40	; 0x28
 800aa46:	af02      	add	r7, sp, #8
 800aa48:	60f8      	str	r0, [r7, #12]
 800aa4a:	60b9      	str	r1, [r7, #8]
 800aa4c:	603b      	str	r3, [r7, #0]
 800aa4e:	4613      	mov	r3, r2
 800aa50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aa52:	2300      	movs	r3, #0
 800aa54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b20      	cmp	r3, #32
 800aa60:	d17c      	bne.n	800ab5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d002      	beq.n	800aa6e <HAL_UART_Transmit+0x2c>
 800aa68:	88fb      	ldrh	r3, [r7, #6]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d101      	bne.n	800aa72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e075      	b.n	800ab5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d101      	bne.n	800aa80 <HAL_UART_Transmit+0x3e>
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	e06e      	b.n	800ab5e <HAL_UART_Transmit+0x11c>
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2221      	movs	r2, #33	; 0x21
 800aa92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aa96:	f7fb fe25 	bl	80066e4 <HAL_GetTick>
 800aa9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	88fa      	ldrh	r2, [r7, #6]
 800aaa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	88fa      	ldrh	r2, [r7, #6]
 800aaa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aab0:	d108      	bne.n	800aac4 <HAL_UART_Transmit+0x82>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d104      	bne.n	800aac4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800aaba:	2300      	movs	r3, #0
 800aabc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	61bb      	str	r3, [r7, #24]
 800aac2:	e003      	b.n	800aacc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aac8:	2300      	movs	r3, #0
 800aaca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2200      	movs	r2, #0
 800aad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800aad4:	e02a      	b.n	800ab2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	9300      	str	r3, [sp, #0]
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	2200      	movs	r2, #0
 800aade:	2180      	movs	r1, #128	; 0x80
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f000 fb1f 	bl	800b124 <UART_WaitOnFlagUntilTimeout>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d001      	beq.n	800aaf0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800aaec:	2303      	movs	r3, #3
 800aaee:	e036      	b.n	800ab5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10b      	bne.n	800ab0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	461a      	mov	r2, r3
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	3302      	adds	r3, #2
 800ab0a:	61bb      	str	r3, [r7, #24]
 800ab0c:	e007      	b.n	800ab1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	781a      	ldrb	r2, [r3, #0]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	3b01      	subs	r3, #1
 800ab26:	b29a      	uxth	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1cf      	bne.n	800aad6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	2140      	movs	r1, #64	; 0x40
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f000 faef 	bl	800b124 <UART_WaitOnFlagUntilTimeout>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d001      	beq.n	800ab50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	e006      	b.n	800ab5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2220      	movs	r2, #32
 800ab54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	e000      	b.n	800ab5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ab5c:	2302      	movs	r3, #2
  }
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3720      	adds	r7, #32
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b084      	sub	sp, #16
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	60f8      	str	r0, [r7, #12]
 800ab6e:	60b9      	str	r1, [r7, #8]
 800ab70:	4613      	mov	r3, r2
 800ab72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	2b20      	cmp	r3, #32
 800ab7e:	d11d      	bne.n	800abbc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d002      	beq.n	800ab8c <HAL_UART_Receive_IT+0x26>
 800ab86:	88fb      	ldrh	r3, [r7, #6]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d101      	bne.n	800ab90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e016      	b.n	800abbe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d101      	bne.n	800ab9e <HAL_UART_Receive_IT+0x38>
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	e00f      	b.n	800abbe <HAL_UART_Receive_IT+0x58>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2201      	movs	r2, #1
 800aba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800abac:	88fb      	ldrh	r3, [r7, #6]
 800abae:	461a      	mov	r2, r3
 800abb0:	68b9      	ldr	r1, [r7, #8]
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f000 fb24 	bl	800b200 <UART_Start_Receive_IT>
 800abb8:	4603      	mov	r3, r0
 800abba:	e000      	b.n	800abbe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800abbc:	2302      	movs	r3, #2
  }
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
	...

0800abc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b0ba      	sub	sp, #232	; 0xe8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	695b      	ldr	r3, [r3, #20]
 800abea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800abee:	2300      	movs	r3, #0
 800abf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800abf4:	2300      	movs	r3, #0
 800abf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800abfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abfe:	f003 030f 	and.w	r3, r3, #15
 800ac02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ac06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10f      	bne.n	800ac2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac12:	f003 0320 	and.w	r3, r3, #32
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d009      	beq.n	800ac2e <HAL_UART_IRQHandler+0x66>
 800ac1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac1e:	f003 0320 	and.w	r3, r3, #32
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d003      	beq.n	800ac2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fc03 	bl	800b432 <UART_Receive_IT>
      return;
 800ac2c:	e256      	b.n	800b0dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ac2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	f000 80de 	beq.w	800adf4 <HAL_UART_IRQHandler+0x22c>
 800ac38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac3c:	f003 0301 	and.w	r3, r3, #1
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d106      	bne.n	800ac52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ac44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f000 80d1 	beq.w	800adf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ac52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac56:	f003 0301 	and.w	r3, r3, #1
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00b      	beq.n	800ac76 <HAL_UART_IRQHandler+0xae>
 800ac5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d005      	beq.n	800ac76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6e:	f043 0201 	orr.w	r2, r3, #1
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ac76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac7a:	f003 0304 	and.w	r3, r3, #4
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00b      	beq.n	800ac9a <HAL_UART_IRQHandler+0xd2>
 800ac82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac86:	f003 0301 	and.w	r3, r3, #1
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d005      	beq.n	800ac9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac92:	f043 0202 	orr.w	r2, r3, #2
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ac9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac9e:	f003 0302 	and.w	r3, r3, #2
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00b      	beq.n	800acbe <HAL_UART_IRQHandler+0xf6>
 800aca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acaa:	f003 0301 	and.w	r3, r3, #1
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d005      	beq.n	800acbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb6:	f043 0204 	orr.w	r2, r3, #4
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800acbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acc2:	f003 0308 	and.w	r3, r3, #8
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d011      	beq.n	800acee <HAL_UART_IRQHandler+0x126>
 800acca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acce:	f003 0320 	and.w	r3, r3, #32
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d105      	bne.n	800ace2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800acd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acda:	f003 0301 	and.w	r3, r3, #1
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d005      	beq.n	800acee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace6:	f043 0208 	orr.w	r2, r3, #8
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f000 81ed 	beq.w	800b0d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800acf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acfc:	f003 0320 	and.w	r3, r3, #32
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d008      	beq.n	800ad16 <HAL_UART_IRQHandler+0x14e>
 800ad04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad08:	f003 0320 	and.w	r3, r3, #32
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 fb8e 	bl	800b432 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	695b      	ldr	r3, [r3, #20]
 800ad1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad20:	2b40      	cmp	r3, #64	; 0x40
 800ad22:	bf0c      	ite	eq
 800ad24:	2301      	moveq	r3, #1
 800ad26:	2300      	movne	r3, #0
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad32:	f003 0308 	and.w	r3, r3, #8
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d103      	bne.n	800ad42 <HAL_UART_IRQHandler+0x17a>
 800ad3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d04f      	beq.n	800ade2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fa96 	bl	800b274 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	695b      	ldr	r3, [r3, #20]
 800ad4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad52:	2b40      	cmp	r3, #64	; 0x40
 800ad54:	d141      	bne.n	800adda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	3314      	adds	r3, #20
 800ad5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad64:	e853 3f00 	ldrex	r3, [r3]
 800ad68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ad6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	3314      	adds	r3, #20
 800ad7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ad82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ad86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ad8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ad92:	e841 2300 	strex	r3, r2, [r1]
 800ad96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ad9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1d9      	bne.n	800ad56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d013      	beq.n	800add2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adae:	4a7d      	ldr	r2, [pc, #500]	; (800afa4 <HAL_UART_IRQHandler+0x3dc>)
 800adb0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fc fa45 	bl	8007246 <HAL_DMA_Abort_IT>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d016      	beq.n	800adf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800adcc:	4610      	mov	r0, r2
 800adce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800add0:	e00e      	b.n	800adf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f990 	bl	800b0f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800add8:	e00a      	b.n	800adf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f98c 	bl	800b0f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ade0:	e006      	b.n	800adf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f988 	bl	800b0f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800adee:	e170      	b.n	800b0d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adf0:	bf00      	nop
    return;
 800adf2:	e16e      	b.n	800b0d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	f040 814a 	bne.w	800b092 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800adfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae02:	f003 0310 	and.w	r3, r3, #16
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 8143 	beq.w	800b092 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ae0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae10:	f003 0310 	and.w	r3, r3, #16
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f000 813c 	beq.w	800b092 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	60bb      	str	r3, [r7, #8]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	60bb      	str	r3, [r7, #8]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	60bb      	str	r3, [r7, #8]
 800ae2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	695b      	ldr	r3, [r3, #20]
 800ae36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae3a:	2b40      	cmp	r3, #64	; 0x40
 800ae3c:	f040 80b4 	bne.w	800afa8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ae4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 8140 	beq.w	800b0d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	f080 8139 	bcs.w	800b0d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae76:	f000 8088 	beq.w	800af8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	330c      	adds	r3, #12
 800ae80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae88:	e853 3f00 	ldrex	r3, [r3]
 800ae8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ae90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	330c      	adds	r3, #12
 800aea2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aea6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aeaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aeb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aeb6:	e841 2300 	strex	r3, r2, [r1]
 800aeba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1d9      	bne.n	800ae7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	3314      	adds	r3, #20
 800aecc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aed0:	e853 3f00 	ldrex	r3, [r3]
 800aed4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aed8:	f023 0301 	bic.w	r3, r3, #1
 800aedc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	3314      	adds	r3, #20
 800aee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aeea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aeee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aef6:	e841 2300 	strex	r3, r2, [r1]
 800aefa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aefc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d1e1      	bne.n	800aec6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	3314      	adds	r3, #20
 800af08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af0c:	e853 3f00 	ldrex	r3, [r3]
 800af10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800af12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	3314      	adds	r3, #20
 800af22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800af26:	66fa      	str	r2, [r7, #108]	; 0x6c
 800af28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800af2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800af2e:	e841 2300 	strex	r3, r2, [r1]
 800af32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800af34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1e3      	bne.n	800af02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2220      	movs	r2, #32
 800af3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	330c      	adds	r3, #12
 800af4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af52:	e853 3f00 	ldrex	r3, [r3]
 800af56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800af58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af5a:	f023 0310 	bic.w	r3, r3, #16
 800af5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	330c      	adds	r3, #12
 800af68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800af6c:	65ba      	str	r2, [r7, #88]	; 0x58
 800af6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af74:	e841 2300 	strex	r3, r2, [r1]
 800af78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1e3      	bne.n	800af48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af84:	4618      	mov	r0, r3
 800af86:	f7fc f8ee 	bl	8007166 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af92:	b29b      	uxth	r3, r3
 800af94:	1ad3      	subs	r3, r2, r3
 800af96:	b29b      	uxth	r3, r3
 800af98:	4619      	mov	r1, r3
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f8b6 	bl	800b10c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800afa0:	e099      	b.n	800b0d6 <HAL_UART_IRQHandler+0x50e>
 800afa2:	bf00      	nop
 800afa4:	0800b33b 	.word	0x0800b33b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f000 808b 	beq.w	800b0da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800afc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800afc8:	2b00      	cmp	r3, #0
 800afca:	f000 8086 	beq.w	800b0da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	330c      	adds	r3, #12
 800afd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd8:	e853 3f00 	ldrex	r3, [r3]
 800afdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800afde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afe4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	330c      	adds	r3, #12
 800afee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aff2:	647a      	str	r2, [r7, #68]	; 0x44
 800aff4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aff8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800affa:	e841 2300 	strex	r3, r2, [r1]
 800affe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1e3      	bne.n	800afce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	3314      	adds	r3, #20
 800b00c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	e853 3f00 	ldrex	r3, [r3]
 800b014:	623b      	str	r3, [r7, #32]
   return(result);
 800b016:	6a3b      	ldr	r3, [r7, #32]
 800b018:	f023 0301 	bic.w	r3, r3, #1
 800b01c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3314      	adds	r3, #20
 800b026:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b02a:	633a      	str	r2, [r7, #48]	; 0x30
 800b02c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b032:	e841 2300 	strex	r3, r2, [r1]
 800b036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1e3      	bne.n	800b006 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2220      	movs	r2, #32
 800b042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	330c      	adds	r3, #12
 800b052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	e853 3f00 	ldrex	r3, [r3]
 800b05a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f023 0310 	bic.w	r3, r3, #16
 800b062:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	330c      	adds	r3, #12
 800b06c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b070:	61fa      	str	r2, [r7, #28]
 800b072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b074:	69b9      	ldr	r1, [r7, #24]
 800b076:	69fa      	ldr	r2, [r7, #28]
 800b078:	e841 2300 	strex	r3, r2, [r1]
 800b07c:	617b      	str	r3, [r7, #20]
   return(result);
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1e3      	bne.n	800b04c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b088:	4619      	mov	r1, r3
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f83e 	bl	800b10c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b090:	e023      	b.n	800b0da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d009      	beq.n	800b0b2 <HAL_UART_IRQHandler+0x4ea>
 800b09e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d003      	beq.n	800b0b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f959 	bl	800b362 <UART_Transmit_IT>
    return;
 800b0b0:	e014      	b.n	800b0dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b0b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00e      	beq.n	800b0dc <HAL_UART_IRQHandler+0x514>
 800b0be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d008      	beq.n	800b0dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 f999 	bl	800b402 <UART_EndTransmit_IT>
    return;
 800b0d0:	e004      	b.n	800b0dc <HAL_UART_IRQHandler+0x514>
    return;
 800b0d2:	bf00      	nop
 800b0d4:	e002      	b.n	800b0dc <HAL_UART_IRQHandler+0x514>
      return;
 800b0d6:	bf00      	nop
 800b0d8:	e000      	b.n	800b0dc <HAL_UART_IRQHandler+0x514>
      return;
 800b0da:	bf00      	nop
  }
}
 800b0dc:	37e8      	adds	r7, #232	; 0xe8
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop

0800b0e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b0ec:	bf00      	nop
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	460b      	mov	r3, r1
 800b116:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b118:	bf00      	nop
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b090      	sub	sp, #64	; 0x40
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	603b      	str	r3, [r7, #0]
 800b130:	4613      	mov	r3, r2
 800b132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b134:	e050      	b.n	800b1d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b13c:	d04c      	beq.n	800b1d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b13e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b140:	2b00      	cmp	r3, #0
 800b142:	d007      	beq.n	800b154 <UART_WaitOnFlagUntilTimeout+0x30>
 800b144:	f7fb face 	bl	80066e4 <HAL_GetTick>
 800b148:	4602      	mov	r2, r0
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b150:	429a      	cmp	r2, r3
 800b152:	d241      	bcs.n	800b1d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	330c      	adds	r3, #12
 800b15a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15e:	e853 3f00 	ldrex	r3, [r3]
 800b162:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b166:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b16a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	330c      	adds	r3, #12
 800b172:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b174:	637a      	str	r2, [r7, #52]	; 0x34
 800b176:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b178:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b17a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b17c:	e841 2300 	strex	r3, r2, [r1]
 800b180:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1e5      	bne.n	800b154 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	3314      	adds	r3, #20
 800b18e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	e853 3f00 	ldrex	r3, [r3]
 800b196:	613b      	str	r3, [r7, #16]
   return(result);
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	f023 0301 	bic.w	r3, r3, #1
 800b19e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	3314      	adds	r3, #20
 800b1a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1a8:	623a      	str	r2, [r7, #32]
 800b1aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ac:	69f9      	ldr	r1, [r7, #28]
 800b1ae:	6a3a      	ldr	r2, [r7, #32]
 800b1b0:	e841 2300 	strex	r3, r2, [r1]
 800b1b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1e5      	bne.n	800b188 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2220      	movs	r2, #32
 800b1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2220      	movs	r2, #32
 800b1c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b1d4:	2303      	movs	r3, #3
 800b1d6:	e00f      	b.n	800b1f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	68ba      	ldr	r2, [r7, #8]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	bf0c      	ite	eq
 800b1e8:	2301      	moveq	r3, #1
 800b1ea:	2300      	movne	r3, #0
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	79fb      	ldrb	r3, [r7, #7]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d09f      	beq.n	800b136 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b1f6:	2300      	movs	r3, #0
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3740      	adds	r7, #64	; 0x40
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	4613      	mov	r3, r2
 800b20c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	88fa      	ldrh	r2, [r7, #6]
 800b218:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	88fa      	ldrh	r2, [r7, #6]
 800b21e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2200      	movs	r2, #0
 800b224:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2222      	movs	r2, #34	; 0x22
 800b22a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2200      	movs	r2, #0
 800b232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68da      	ldr	r2, [r3, #12]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b244:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	695a      	ldr	r2, [r3, #20]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f042 0201 	orr.w	r2, r2, #1
 800b254:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68da      	ldr	r2, [r3, #12]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f042 0220 	orr.w	r2, r2, #32
 800b264:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3714      	adds	r7, #20
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b274:	b480      	push	{r7}
 800b276:	b095      	sub	sp, #84	; 0x54
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	330c      	adds	r3, #12
 800b282:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b286:	e853 3f00 	ldrex	r3, [r3]
 800b28a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b292:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	330c      	adds	r3, #12
 800b29a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b29c:	643a      	str	r2, [r7, #64]	; 0x40
 800b29e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2a4:	e841 2300 	strex	r3, r2, [r1]
 800b2a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1e5      	bne.n	800b27c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	3314      	adds	r3, #20
 800b2b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b8:	6a3b      	ldr	r3, [r7, #32]
 800b2ba:	e853 3f00 	ldrex	r3, [r3]
 800b2be:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	f023 0301 	bic.w	r3, r3, #1
 800b2c6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	3314      	adds	r3, #20
 800b2ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2d8:	e841 2300 	strex	r3, r2, [r1]
 800b2dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1e5      	bne.n	800b2b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d119      	bne.n	800b320 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	330c      	adds	r3, #12
 800b2f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	e853 3f00 	ldrex	r3, [r3]
 800b2fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	f023 0310 	bic.w	r3, r3, #16
 800b302:	647b      	str	r3, [r7, #68]	; 0x44
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	330c      	adds	r3, #12
 800b30a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b30c:	61ba      	str	r2, [r7, #24]
 800b30e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b310:	6979      	ldr	r1, [r7, #20]
 800b312:	69ba      	ldr	r2, [r7, #24]
 800b314:	e841 2300 	strex	r3, r2, [r1]
 800b318:	613b      	str	r3, [r7, #16]
   return(result);
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1e5      	bne.n	800b2ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2220      	movs	r2, #32
 800b324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b32e:	bf00      	nop
 800b330:	3754      	adds	r7, #84	; 0x54
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b084      	sub	sp, #16
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b346:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f7ff fecf 	bl	800b0f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b35a:	bf00      	nop
 800b35c:	3710      	adds	r7, #16
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b362:	b480      	push	{r7}
 800b364:	b085      	sub	sp, #20
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b370:	b2db      	uxtb	r3, r3
 800b372:	2b21      	cmp	r3, #33	; 0x21
 800b374:	d13e      	bne.n	800b3f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b37e:	d114      	bne.n	800b3aa <UART_Transmit_IT+0x48>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	691b      	ldr	r3, [r3, #16]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d110      	bne.n	800b3aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a1b      	ldr	r3, [r3, #32]
 800b38c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	881b      	ldrh	r3, [r3, #0]
 800b392:	461a      	mov	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b39c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a1b      	ldr	r3, [r3, #32]
 800b3a2:	1c9a      	adds	r2, r3, #2
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	621a      	str	r2, [r3, #32]
 800b3a8:	e008      	b.n	800b3bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a1b      	ldr	r3, [r3, #32]
 800b3ae:	1c59      	adds	r1, r3, #1
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	6211      	str	r1, [r2, #32]
 800b3b4:	781a      	ldrb	r2, [r3, #0]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	3b01      	subs	r3, #1
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d10f      	bne.n	800b3f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	68da      	ldr	r2, [r3, #12]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b3de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68da      	ldr	r2, [r3, #12]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	e000      	b.n	800b3f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b3f4:	2302      	movs	r3, #2
  }
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr

0800b402 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b082      	sub	sp, #8
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68da      	ldr	r2, [r3, #12]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b418:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2220      	movs	r2, #32
 800b41e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7ff fe5e 	bl	800b0e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b08c      	sub	sp, #48	; 0x30
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b440:	b2db      	uxtb	r3, r3
 800b442:	2b22      	cmp	r3, #34	; 0x22
 800b444:	f040 80ab 	bne.w	800b59e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b450:	d117      	bne.n	800b482 <UART_Receive_IT+0x50>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d113      	bne.n	800b482 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b45a:	2300      	movs	r3, #0
 800b45c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b462:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b470:	b29a      	uxth	r2, r3
 800b472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b474:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b47a:	1c9a      	adds	r2, r3, #2
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	629a      	str	r2, [r3, #40]	; 0x28
 800b480:	e026      	b.n	800b4d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b486:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b488:	2300      	movs	r3, #0
 800b48a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b494:	d007      	beq.n	800b4a6 <UART_Receive_IT+0x74>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10a      	bne.n	800b4b4 <UART_Receive_IT+0x82>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d106      	bne.n	800b4b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	b2da      	uxtb	r2, r3
 800b4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b0:	701a      	strb	r2, [r3, #0]
 800b4b2:	e008      	b.n	800b4c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4c0:	b2da      	uxtb	r2, r3
 800b4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ca:	1c5a      	adds	r2, r3, #1
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	4619      	mov	r1, r3
 800b4de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d15a      	bne.n	800b59a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	68da      	ldr	r2, [r3, #12]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f022 0220 	bic.w	r2, r2, #32
 800b4f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	68da      	ldr	r2, [r3, #12]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b502:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	695a      	ldr	r2, [r3, #20]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f022 0201 	bic.w	r2, r2, #1
 800b512:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2220      	movs	r2, #32
 800b518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b520:	2b01      	cmp	r3, #1
 800b522:	d135      	bne.n	800b590 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	330c      	adds	r3, #12
 800b530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	e853 3f00 	ldrex	r3, [r3]
 800b538:	613b      	str	r3, [r7, #16]
   return(result);
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	f023 0310 	bic.w	r3, r3, #16
 800b540:	627b      	str	r3, [r7, #36]	; 0x24
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	330c      	adds	r3, #12
 800b548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b54a:	623a      	str	r2, [r7, #32]
 800b54c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54e:	69f9      	ldr	r1, [r7, #28]
 800b550:	6a3a      	ldr	r2, [r7, #32]
 800b552:	e841 2300 	strex	r3, r2, [r1]
 800b556:	61bb      	str	r3, [r7, #24]
   return(result);
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1e5      	bne.n	800b52a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f003 0310 	and.w	r3, r3, #16
 800b568:	2b10      	cmp	r3, #16
 800b56a:	d10a      	bne.n	800b582 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b56c:	2300      	movs	r3, #0
 800b56e:	60fb      	str	r3, [r7, #12]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	60fb      	str	r3, [r7, #12]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	60fb      	str	r3, [r7, #12]
 800b580:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b586:	4619      	mov	r1, r3
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f7ff fdbf 	bl	800b10c <HAL_UARTEx_RxEventCallback>
 800b58e:	e002      	b.n	800b596 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f7f6 fafb 	bl	8001b8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b596:	2300      	movs	r3, #0
 800b598:	e002      	b.n	800b5a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b59a:	2300      	movs	r3, #0
 800b59c:	e000      	b.n	800b5a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b59e:	2302      	movs	r3, #2
  }
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3730      	adds	r7, #48	; 0x30
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5ac:	b0c0      	sub	sp, #256	; 0x100
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b5c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5c4:	68d9      	ldr	r1, [r3, #12]
 800b5c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	ea40 0301 	orr.w	r3, r0, r1
 800b5d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b5d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5d6:	689a      	ldr	r2, [r3, #8]
 800b5d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	431a      	orrs	r2, r3
 800b5e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5e4:	695b      	ldr	r3, [r3, #20]
 800b5e6:	431a      	orrs	r2, r3
 800b5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5ec:	69db      	ldr	r3, [r3, #28]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b5f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b600:	f021 010c 	bic.w	r1, r1, #12
 800b604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b60e:	430b      	orrs	r3, r1
 800b610:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	695b      	ldr	r3, [r3, #20]
 800b61a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b61e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b622:	6999      	ldr	r1, [r3, #24]
 800b624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	ea40 0301 	orr.w	r3, r0, r1
 800b62e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	4b8f      	ldr	r3, [pc, #572]	; (800b874 <UART_SetConfig+0x2cc>)
 800b638:	429a      	cmp	r2, r3
 800b63a:	d005      	beq.n	800b648 <UART_SetConfig+0xa0>
 800b63c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	4b8d      	ldr	r3, [pc, #564]	; (800b878 <UART_SetConfig+0x2d0>)
 800b644:	429a      	cmp	r2, r3
 800b646:	d104      	bne.n	800b652 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b648:	f7fd fc1a 	bl	8008e80 <HAL_RCC_GetPCLK2Freq>
 800b64c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b650:	e003      	b.n	800b65a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b652:	f7fd fc01 	bl	8008e58 <HAL_RCC_GetPCLK1Freq>
 800b656:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b65a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b65e:	69db      	ldr	r3, [r3, #28]
 800b660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b664:	f040 810c 	bne.w	800b880 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b66c:	2200      	movs	r2, #0
 800b66e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b672:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b676:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b67a:	4622      	mov	r2, r4
 800b67c:	462b      	mov	r3, r5
 800b67e:	1891      	adds	r1, r2, r2
 800b680:	65b9      	str	r1, [r7, #88]	; 0x58
 800b682:	415b      	adcs	r3, r3
 800b684:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b686:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b68a:	4621      	mov	r1, r4
 800b68c:	eb12 0801 	adds.w	r8, r2, r1
 800b690:	4629      	mov	r1, r5
 800b692:	eb43 0901 	adc.w	r9, r3, r1
 800b696:	f04f 0200 	mov.w	r2, #0
 800b69a:	f04f 0300 	mov.w	r3, #0
 800b69e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b6a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b6a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b6aa:	4690      	mov	r8, r2
 800b6ac:	4699      	mov	r9, r3
 800b6ae:	4623      	mov	r3, r4
 800b6b0:	eb18 0303 	adds.w	r3, r8, r3
 800b6b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b6b8:	462b      	mov	r3, r5
 800b6ba:	eb49 0303 	adc.w	r3, r9, r3
 800b6be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b6c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b6d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	18db      	adds	r3, r3, r3
 800b6da:	653b      	str	r3, [r7, #80]	; 0x50
 800b6dc:	4613      	mov	r3, r2
 800b6de:	eb42 0303 	adc.w	r3, r2, r3
 800b6e2:	657b      	str	r3, [r7, #84]	; 0x54
 800b6e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b6e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b6ec:	f7f5 fa86 	bl	8000bfc <__aeabi_uldivmod>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	4b61      	ldr	r3, [pc, #388]	; (800b87c <UART_SetConfig+0x2d4>)
 800b6f6:	fba3 2302 	umull	r2, r3, r3, r2
 800b6fa:	095b      	lsrs	r3, r3, #5
 800b6fc:	011c      	lsls	r4, r3, #4
 800b6fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b702:	2200      	movs	r2, #0
 800b704:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b708:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b70c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b710:	4642      	mov	r2, r8
 800b712:	464b      	mov	r3, r9
 800b714:	1891      	adds	r1, r2, r2
 800b716:	64b9      	str	r1, [r7, #72]	; 0x48
 800b718:	415b      	adcs	r3, r3
 800b71a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b71c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b720:	4641      	mov	r1, r8
 800b722:	eb12 0a01 	adds.w	sl, r2, r1
 800b726:	4649      	mov	r1, r9
 800b728:	eb43 0b01 	adc.w	fp, r3, r1
 800b72c:	f04f 0200 	mov.w	r2, #0
 800b730:	f04f 0300 	mov.w	r3, #0
 800b734:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b738:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b73c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b740:	4692      	mov	sl, r2
 800b742:	469b      	mov	fp, r3
 800b744:	4643      	mov	r3, r8
 800b746:	eb1a 0303 	adds.w	r3, sl, r3
 800b74a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b74e:	464b      	mov	r3, r9
 800b750:	eb4b 0303 	adc.w	r3, fp, r3
 800b754:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b764:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b768:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b76c:	460b      	mov	r3, r1
 800b76e:	18db      	adds	r3, r3, r3
 800b770:	643b      	str	r3, [r7, #64]	; 0x40
 800b772:	4613      	mov	r3, r2
 800b774:	eb42 0303 	adc.w	r3, r2, r3
 800b778:	647b      	str	r3, [r7, #68]	; 0x44
 800b77a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b77e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b782:	f7f5 fa3b 	bl	8000bfc <__aeabi_uldivmod>
 800b786:	4602      	mov	r2, r0
 800b788:	460b      	mov	r3, r1
 800b78a:	4611      	mov	r1, r2
 800b78c:	4b3b      	ldr	r3, [pc, #236]	; (800b87c <UART_SetConfig+0x2d4>)
 800b78e:	fba3 2301 	umull	r2, r3, r3, r1
 800b792:	095b      	lsrs	r3, r3, #5
 800b794:	2264      	movs	r2, #100	; 0x64
 800b796:	fb02 f303 	mul.w	r3, r2, r3
 800b79a:	1acb      	subs	r3, r1, r3
 800b79c:	00db      	lsls	r3, r3, #3
 800b79e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b7a2:	4b36      	ldr	r3, [pc, #216]	; (800b87c <UART_SetConfig+0x2d4>)
 800b7a4:	fba3 2302 	umull	r2, r3, r3, r2
 800b7a8:	095b      	lsrs	r3, r3, #5
 800b7aa:	005b      	lsls	r3, r3, #1
 800b7ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b7b0:	441c      	add	r4, r3
 800b7b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b7bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b7c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b7c4:	4642      	mov	r2, r8
 800b7c6:	464b      	mov	r3, r9
 800b7c8:	1891      	adds	r1, r2, r2
 800b7ca:	63b9      	str	r1, [r7, #56]	; 0x38
 800b7cc:	415b      	adcs	r3, r3
 800b7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b7d4:	4641      	mov	r1, r8
 800b7d6:	1851      	adds	r1, r2, r1
 800b7d8:	6339      	str	r1, [r7, #48]	; 0x30
 800b7da:	4649      	mov	r1, r9
 800b7dc:	414b      	adcs	r3, r1
 800b7de:	637b      	str	r3, [r7, #52]	; 0x34
 800b7e0:	f04f 0200 	mov.w	r2, #0
 800b7e4:	f04f 0300 	mov.w	r3, #0
 800b7e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b7ec:	4659      	mov	r1, fp
 800b7ee:	00cb      	lsls	r3, r1, #3
 800b7f0:	4651      	mov	r1, sl
 800b7f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b7f6:	4651      	mov	r1, sl
 800b7f8:	00ca      	lsls	r2, r1, #3
 800b7fa:	4610      	mov	r0, r2
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	4603      	mov	r3, r0
 800b800:	4642      	mov	r2, r8
 800b802:	189b      	adds	r3, r3, r2
 800b804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b808:	464b      	mov	r3, r9
 800b80a:	460a      	mov	r2, r1
 800b80c:	eb42 0303 	adc.w	r3, r2, r3
 800b810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b820:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b824:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b828:	460b      	mov	r3, r1
 800b82a:	18db      	adds	r3, r3, r3
 800b82c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b82e:	4613      	mov	r3, r2
 800b830:	eb42 0303 	adc.w	r3, r2, r3
 800b834:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b836:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b83a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b83e:	f7f5 f9dd 	bl	8000bfc <__aeabi_uldivmod>
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	4b0d      	ldr	r3, [pc, #52]	; (800b87c <UART_SetConfig+0x2d4>)
 800b848:	fba3 1302 	umull	r1, r3, r3, r2
 800b84c:	095b      	lsrs	r3, r3, #5
 800b84e:	2164      	movs	r1, #100	; 0x64
 800b850:	fb01 f303 	mul.w	r3, r1, r3
 800b854:	1ad3      	subs	r3, r2, r3
 800b856:	00db      	lsls	r3, r3, #3
 800b858:	3332      	adds	r3, #50	; 0x32
 800b85a:	4a08      	ldr	r2, [pc, #32]	; (800b87c <UART_SetConfig+0x2d4>)
 800b85c:	fba2 2303 	umull	r2, r3, r2, r3
 800b860:	095b      	lsrs	r3, r3, #5
 800b862:	f003 0207 	and.w	r2, r3, #7
 800b866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4422      	add	r2, r4
 800b86e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b870:	e106      	b.n	800ba80 <UART_SetConfig+0x4d8>
 800b872:	bf00      	nop
 800b874:	40011000 	.word	0x40011000
 800b878:	40011400 	.word	0x40011400
 800b87c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b884:	2200      	movs	r2, #0
 800b886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b88a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b88e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b892:	4642      	mov	r2, r8
 800b894:	464b      	mov	r3, r9
 800b896:	1891      	adds	r1, r2, r2
 800b898:	6239      	str	r1, [r7, #32]
 800b89a:	415b      	adcs	r3, r3
 800b89c:	627b      	str	r3, [r7, #36]	; 0x24
 800b89e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b8a2:	4641      	mov	r1, r8
 800b8a4:	1854      	adds	r4, r2, r1
 800b8a6:	4649      	mov	r1, r9
 800b8a8:	eb43 0501 	adc.w	r5, r3, r1
 800b8ac:	f04f 0200 	mov.w	r2, #0
 800b8b0:	f04f 0300 	mov.w	r3, #0
 800b8b4:	00eb      	lsls	r3, r5, #3
 800b8b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b8ba:	00e2      	lsls	r2, r4, #3
 800b8bc:	4614      	mov	r4, r2
 800b8be:	461d      	mov	r5, r3
 800b8c0:	4643      	mov	r3, r8
 800b8c2:	18e3      	adds	r3, r4, r3
 800b8c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b8c8:	464b      	mov	r3, r9
 800b8ca:	eb45 0303 	adc.w	r3, r5, r3
 800b8ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b8d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b8de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b8e2:	f04f 0200 	mov.w	r2, #0
 800b8e6:	f04f 0300 	mov.w	r3, #0
 800b8ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b8ee:	4629      	mov	r1, r5
 800b8f0:	008b      	lsls	r3, r1, #2
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b8f8:	4621      	mov	r1, r4
 800b8fa:	008a      	lsls	r2, r1, #2
 800b8fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b900:	f7f5 f97c 	bl	8000bfc <__aeabi_uldivmod>
 800b904:	4602      	mov	r2, r0
 800b906:	460b      	mov	r3, r1
 800b908:	4b60      	ldr	r3, [pc, #384]	; (800ba8c <UART_SetConfig+0x4e4>)
 800b90a:	fba3 2302 	umull	r2, r3, r3, r2
 800b90e:	095b      	lsrs	r3, r3, #5
 800b910:	011c      	lsls	r4, r3, #4
 800b912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b916:	2200      	movs	r2, #0
 800b918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b91c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b920:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b924:	4642      	mov	r2, r8
 800b926:	464b      	mov	r3, r9
 800b928:	1891      	adds	r1, r2, r2
 800b92a:	61b9      	str	r1, [r7, #24]
 800b92c:	415b      	adcs	r3, r3
 800b92e:	61fb      	str	r3, [r7, #28]
 800b930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b934:	4641      	mov	r1, r8
 800b936:	1851      	adds	r1, r2, r1
 800b938:	6139      	str	r1, [r7, #16]
 800b93a:	4649      	mov	r1, r9
 800b93c:	414b      	adcs	r3, r1
 800b93e:	617b      	str	r3, [r7, #20]
 800b940:	f04f 0200 	mov.w	r2, #0
 800b944:	f04f 0300 	mov.w	r3, #0
 800b948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b94c:	4659      	mov	r1, fp
 800b94e:	00cb      	lsls	r3, r1, #3
 800b950:	4651      	mov	r1, sl
 800b952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b956:	4651      	mov	r1, sl
 800b958:	00ca      	lsls	r2, r1, #3
 800b95a:	4610      	mov	r0, r2
 800b95c:	4619      	mov	r1, r3
 800b95e:	4603      	mov	r3, r0
 800b960:	4642      	mov	r2, r8
 800b962:	189b      	adds	r3, r3, r2
 800b964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b968:	464b      	mov	r3, r9
 800b96a:	460a      	mov	r2, r1
 800b96c:	eb42 0303 	adc.w	r3, r2, r3
 800b970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b97e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b980:	f04f 0200 	mov.w	r2, #0
 800b984:	f04f 0300 	mov.w	r3, #0
 800b988:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b98c:	4649      	mov	r1, r9
 800b98e:	008b      	lsls	r3, r1, #2
 800b990:	4641      	mov	r1, r8
 800b992:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b996:	4641      	mov	r1, r8
 800b998:	008a      	lsls	r2, r1, #2
 800b99a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b99e:	f7f5 f92d 	bl	8000bfc <__aeabi_uldivmod>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	4b38      	ldr	r3, [pc, #224]	; (800ba8c <UART_SetConfig+0x4e4>)
 800b9aa:	fba3 2301 	umull	r2, r3, r3, r1
 800b9ae:	095b      	lsrs	r3, r3, #5
 800b9b0:	2264      	movs	r2, #100	; 0x64
 800b9b2:	fb02 f303 	mul.w	r3, r2, r3
 800b9b6:	1acb      	subs	r3, r1, r3
 800b9b8:	011b      	lsls	r3, r3, #4
 800b9ba:	3332      	adds	r3, #50	; 0x32
 800b9bc:	4a33      	ldr	r2, [pc, #204]	; (800ba8c <UART_SetConfig+0x4e4>)
 800b9be:	fba2 2303 	umull	r2, r3, r2, r3
 800b9c2:	095b      	lsrs	r3, r3, #5
 800b9c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9c8:	441c      	add	r4, r3
 800b9ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	673b      	str	r3, [r7, #112]	; 0x70
 800b9d2:	677a      	str	r2, [r7, #116]	; 0x74
 800b9d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b9d8:	4642      	mov	r2, r8
 800b9da:	464b      	mov	r3, r9
 800b9dc:	1891      	adds	r1, r2, r2
 800b9de:	60b9      	str	r1, [r7, #8]
 800b9e0:	415b      	adcs	r3, r3
 800b9e2:	60fb      	str	r3, [r7, #12]
 800b9e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b9e8:	4641      	mov	r1, r8
 800b9ea:	1851      	adds	r1, r2, r1
 800b9ec:	6039      	str	r1, [r7, #0]
 800b9ee:	4649      	mov	r1, r9
 800b9f0:	414b      	adcs	r3, r1
 800b9f2:	607b      	str	r3, [r7, #4]
 800b9f4:	f04f 0200 	mov.w	r2, #0
 800b9f8:	f04f 0300 	mov.w	r3, #0
 800b9fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ba00:	4659      	mov	r1, fp
 800ba02:	00cb      	lsls	r3, r1, #3
 800ba04:	4651      	mov	r1, sl
 800ba06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba0a:	4651      	mov	r1, sl
 800ba0c:	00ca      	lsls	r2, r1, #3
 800ba0e:	4610      	mov	r0, r2
 800ba10:	4619      	mov	r1, r3
 800ba12:	4603      	mov	r3, r0
 800ba14:	4642      	mov	r2, r8
 800ba16:	189b      	adds	r3, r3, r2
 800ba18:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba1a:	464b      	mov	r3, r9
 800ba1c:	460a      	mov	r2, r1
 800ba1e:	eb42 0303 	adc.w	r3, r2, r3
 800ba22:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	663b      	str	r3, [r7, #96]	; 0x60
 800ba2e:	667a      	str	r2, [r7, #100]	; 0x64
 800ba30:	f04f 0200 	mov.w	r2, #0
 800ba34:	f04f 0300 	mov.w	r3, #0
 800ba38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ba3c:	4649      	mov	r1, r9
 800ba3e:	008b      	lsls	r3, r1, #2
 800ba40:	4641      	mov	r1, r8
 800ba42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba46:	4641      	mov	r1, r8
 800ba48:	008a      	lsls	r2, r1, #2
 800ba4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ba4e:	f7f5 f8d5 	bl	8000bfc <__aeabi_uldivmod>
 800ba52:	4602      	mov	r2, r0
 800ba54:	460b      	mov	r3, r1
 800ba56:	4b0d      	ldr	r3, [pc, #52]	; (800ba8c <UART_SetConfig+0x4e4>)
 800ba58:	fba3 1302 	umull	r1, r3, r3, r2
 800ba5c:	095b      	lsrs	r3, r3, #5
 800ba5e:	2164      	movs	r1, #100	; 0x64
 800ba60:	fb01 f303 	mul.w	r3, r1, r3
 800ba64:	1ad3      	subs	r3, r2, r3
 800ba66:	011b      	lsls	r3, r3, #4
 800ba68:	3332      	adds	r3, #50	; 0x32
 800ba6a:	4a08      	ldr	r2, [pc, #32]	; (800ba8c <UART_SetConfig+0x4e4>)
 800ba6c:	fba2 2303 	umull	r2, r3, r2, r3
 800ba70:	095b      	lsrs	r3, r3, #5
 800ba72:	f003 020f 	and.w	r2, r3, #15
 800ba76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4422      	add	r2, r4
 800ba7e:	609a      	str	r2, [r3, #8]
}
 800ba80:	bf00      	nop
 800ba82:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ba86:	46bd      	mov	sp, r7
 800ba88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba8c:	51eb851f 	.word	0x51eb851f

0800ba90 <__NVIC_SetPriority>:
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	4603      	mov	r3, r0
 800ba98:	6039      	str	r1, [r7, #0]
 800ba9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ba9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	db0a      	blt.n	800baba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	b2da      	uxtb	r2, r3
 800baa8:	490c      	ldr	r1, [pc, #48]	; (800badc <__NVIC_SetPriority+0x4c>)
 800baaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800baae:	0112      	lsls	r2, r2, #4
 800bab0:	b2d2      	uxtb	r2, r2
 800bab2:	440b      	add	r3, r1
 800bab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bab8:	e00a      	b.n	800bad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	b2da      	uxtb	r2, r3
 800babe:	4908      	ldr	r1, [pc, #32]	; (800bae0 <__NVIC_SetPriority+0x50>)
 800bac0:	79fb      	ldrb	r3, [r7, #7]
 800bac2:	f003 030f 	and.w	r3, r3, #15
 800bac6:	3b04      	subs	r3, #4
 800bac8:	0112      	lsls	r2, r2, #4
 800baca:	b2d2      	uxtb	r2, r2
 800bacc:	440b      	add	r3, r1
 800bace:	761a      	strb	r2, [r3, #24]
}
 800bad0:	bf00      	nop
 800bad2:	370c      	adds	r7, #12
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr
 800badc:	e000e100 	.word	0xe000e100
 800bae0:	e000ed00 	.word	0xe000ed00

0800bae4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bae4:	b580      	push	{r7, lr}
 800bae6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bae8:	2100      	movs	r1, #0
 800baea:	f06f 0004 	mvn.w	r0, #4
 800baee:	f7ff ffcf 	bl	800ba90 <__NVIC_SetPriority>
#endif
}
 800baf2:	bf00      	nop
 800baf4:	bd80      	pop	{r7, pc}
	...

0800baf8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bafe:	f3ef 8305 	mrs	r3, IPSR
 800bb02:	603b      	str	r3, [r7, #0]
  return(result);
 800bb04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d003      	beq.n	800bb12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bb0a:	f06f 0305 	mvn.w	r3, #5
 800bb0e:	607b      	str	r3, [r7, #4]
 800bb10:	e00c      	b.n	800bb2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bb12:	4b0a      	ldr	r3, [pc, #40]	; (800bb3c <osKernelInitialize+0x44>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d105      	bne.n	800bb26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bb1a:	4b08      	ldr	r3, [pc, #32]	; (800bb3c <osKernelInitialize+0x44>)
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	607b      	str	r3, [r7, #4]
 800bb24:	e002      	b.n	800bb2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bb26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bb2c:	687b      	ldr	r3, [r7, #4]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	370c      	adds	r7, #12
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	2000058c 	.word	0x2000058c

0800bb40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb46:	f3ef 8305 	mrs	r3, IPSR
 800bb4a:	603b      	str	r3, [r7, #0]
  return(result);
 800bb4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d003      	beq.n	800bb5a <osKernelStart+0x1a>
    stat = osErrorISR;
 800bb52:	f06f 0305 	mvn.w	r3, #5
 800bb56:	607b      	str	r3, [r7, #4]
 800bb58:	e010      	b.n	800bb7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bb5a:	4b0b      	ldr	r3, [pc, #44]	; (800bb88 <osKernelStart+0x48>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d109      	bne.n	800bb76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bb62:	f7ff ffbf 	bl	800bae4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bb66:	4b08      	ldr	r3, [pc, #32]	; (800bb88 <osKernelStart+0x48>)
 800bb68:	2202      	movs	r2, #2
 800bb6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bb6c:	f001 f866 	bl	800cc3c <vTaskStartScheduler>
      stat = osOK;
 800bb70:	2300      	movs	r3, #0
 800bb72:	607b      	str	r3, [r7, #4]
 800bb74:	e002      	b.n	800bb7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bb76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bb7c:	687b      	ldr	r3, [r7, #4]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3708      	adds	r7, #8
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	2000058c 	.word	0x2000058c

0800bb8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b08e      	sub	sp, #56	; 0x38
 800bb90:	af04      	add	r7, sp, #16
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb9c:	f3ef 8305 	mrs	r3, IPSR
 800bba0:	617b      	str	r3, [r7, #20]
  return(result);
 800bba2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d17e      	bne.n	800bca6 <osThreadNew+0x11a>
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d07b      	beq.n	800bca6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bbae:	2380      	movs	r3, #128	; 0x80
 800bbb0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bbb2:	2318      	movs	r3, #24
 800bbb4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bbba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbbe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d045      	beq.n	800bc52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d002      	beq.n	800bbd4 <osThreadNew+0x48>
        name = attr->name;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	699b      	ldr	r3, [r3, #24]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d002      	beq.n	800bbe2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	699b      	ldr	r3, [r3, #24]
 800bbe0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d008      	beq.n	800bbfa <osThreadNew+0x6e>
 800bbe8:	69fb      	ldr	r3, [r7, #28]
 800bbea:	2b38      	cmp	r3, #56	; 0x38
 800bbec:	d805      	bhi.n	800bbfa <osThreadNew+0x6e>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	f003 0301 	and.w	r3, r3, #1
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d001      	beq.n	800bbfe <osThreadNew+0x72>
        return (NULL);
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	e054      	b.n	800bca8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d003      	beq.n	800bc0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	695b      	ldr	r3, [r3, #20]
 800bc0a:	089b      	lsrs	r3, r3, #2
 800bc0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00e      	beq.n	800bc34 <osThreadNew+0xa8>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	2b5b      	cmp	r3, #91	; 0x5b
 800bc1c:	d90a      	bls.n	800bc34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d006      	beq.n	800bc34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	695b      	ldr	r3, [r3, #20]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d002      	beq.n	800bc34 <osThreadNew+0xa8>
        mem = 1;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	61bb      	str	r3, [r7, #24]
 800bc32:	e010      	b.n	800bc56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10c      	bne.n	800bc56 <osThreadNew+0xca>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d108      	bne.n	800bc56 <osThreadNew+0xca>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d104      	bne.n	800bc56 <osThreadNew+0xca>
          mem = 0;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	61bb      	str	r3, [r7, #24]
 800bc50:	e001      	b.n	800bc56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bc52:	2300      	movs	r3, #0
 800bc54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bc56:	69bb      	ldr	r3, [r7, #24]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d110      	bne.n	800bc7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc64:	9202      	str	r2, [sp, #8]
 800bc66:	9301      	str	r3, [sp, #4]
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	6a3a      	ldr	r2, [r7, #32]
 800bc70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	f000 fe0c 	bl	800c890 <xTaskCreateStatic>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	613b      	str	r3, [r7, #16]
 800bc7c:	e013      	b.n	800bca6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d110      	bne.n	800bca6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bc84:	6a3b      	ldr	r3, [r7, #32]
 800bc86:	b29a      	uxth	r2, r3
 800bc88:	f107 0310 	add.w	r3, r7, #16
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	f000 fe57 	bl	800c94a <xTaskCreate>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d001      	beq.n	800bca6 <osThreadNew+0x11a>
            hTask = NULL;
 800bca2:	2300      	movs	r3, #0
 800bca4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bca6:	693b      	ldr	r3, [r7, #16]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3728      	adds	r7, #40	; 0x28
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcb8:	f3ef 8305 	mrs	r3, IPSR
 800bcbc:	60bb      	str	r3, [r7, #8]
  return(result);
 800bcbe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d003      	beq.n	800bccc <osDelay+0x1c>
    stat = osErrorISR;
 800bcc4:	f06f 0305 	mvn.w	r3, #5
 800bcc8:	60fb      	str	r3, [r7, #12]
 800bcca:	e007      	b.n	800bcdc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bccc:	2300      	movs	r3, #0
 800bcce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d002      	beq.n	800bcdc <osDelay+0x2c>
      vTaskDelay(ticks);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 ff7c 	bl	800cbd4 <vTaskDelay>
    }
  }

  return (stat);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
	...

0800bce8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	4a07      	ldr	r2, [pc, #28]	; (800bd14 <vApplicationGetIdleTaskMemory+0x2c>)
 800bcf8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	4a06      	ldr	r2, [pc, #24]	; (800bd18 <vApplicationGetIdleTaskMemory+0x30>)
 800bcfe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2280      	movs	r2, #128	; 0x80
 800bd04:	601a      	str	r2, [r3, #0]
}
 800bd06:	bf00      	nop
 800bd08:	3714      	adds	r7, #20
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop
 800bd14:	20000590 	.word	0x20000590
 800bd18:	200005ec 	.word	0x200005ec

0800bd1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bd1c:	b480      	push	{r7}
 800bd1e:	b085      	sub	sp, #20
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	4a07      	ldr	r2, [pc, #28]	; (800bd48 <vApplicationGetTimerTaskMemory+0x2c>)
 800bd2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	4a06      	ldr	r2, [pc, #24]	; (800bd4c <vApplicationGetTimerTaskMemory+0x30>)
 800bd32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd3a:	601a      	str	r2, [r3, #0]
}
 800bd3c:	bf00      	nop
 800bd3e:	3714      	adds	r7, #20
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr
 800bd48:	200007ec 	.word	0x200007ec
 800bd4c:	20000848 	.word	0x20000848

0800bd50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f103 0208 	add.w	r2, r3, #8
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f103 0208 	add.w	r2, r3, #8
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f103 0208 	add.w	r2, r3, #8
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2200      	movs	r2, #0
 800bd82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bd84:	bf00      	nop
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bd9e:	bf00      	nop
 800bda0:	370c      	adds	r7, #12
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b085      	sub	sp, #20
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
 800bdb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	68fa      	ldr	r2, [r7, #12]
 800bdbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	689a      	ldr	r2, [r3, #8]
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	683a      	ldr	r2, [r7, #0]
 800bdce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	683a      	ldr	r2, [r7, #0]
 800bdd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	1c5a      	adds	r2, r3, #1
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	601a      	str	r2, [r3, #0]
}
 800bde6:	bf00      	nop
 800bde8:	3714      	adds	r7, #20
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr

0800bdf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bdf2:	b480      	push	{r7}
 800bdf4:	b085      	sub	sp, #20
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
 800bdfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be08:	d103      	bne.n	800be12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	60fb      	str	r3, [r7, #12]
 800be10:	e00c      	b.n	800be2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	3308      	adds	r3, #8
 800be16:	60fb      	str	r3, [r7, #12]
 800be18:	e002      	b.n	800be20 <vListInsert+0x2e>
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	60fb      	str	r3, [r7, #12]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	68ba      	ldr	r2, [r7, #8]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d2f6      	bcs.n	800be1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	685a      	ldr	r2, [r3, #4]
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	683a      	ldr	r2, [r7, #0]
 800be46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	1c5a      	adds	r2, r3, #1
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	601a      	str	r2, [r3, #0]
}
 800be58:	bf00      	nop
 800be5a:	3714      	adds	r7, #20
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800be64:	b480      	push	{r7}
 800be66:	b085      	sub	sp, #20
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	691b      	ldr	r3, [r3, #16]
 800be70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	6892      	ldr	r2, [r2, #8]
 800be7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	6852      	ldr	r2, [r2, #4]
 800be84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	687a      	ldr	r2, [r7, #4]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d103      	bne.n	800be98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	689a      	ldr	r2, [r3, #8]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	1e5a      	subs	r2, r3, #1
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3714      	adds	r7, #20
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10a      	bne.n	800bee2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800becc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed0:	f383 8811 	msr	BASEPRI, r3
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bede:	bf00      	nop
 800bee0:	e7fe      	b.n	800bee0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bee2:	f002 f84f 	bl	800df84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beee:	68f9      	ldr	r1, [r7, #12]
 800bef0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bef2:	fb01 f303 	mul.w	r3, r1, r3
 800bef6:	441a      	add	r2, r3
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2200      	movs	r2, #0
 800bf00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf12:	3b01      	subs	r3, #1
 800bf14:	68f9      	ldr	r1, [r7, #12]
 800bf16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bf18:	fb01 f303 	mul.w	r3, r1, r3
 800bf1c:	441a      	add	r2, r3
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	22ff      	movs	r2, #255	; 0xff
 800bf26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	22ff      	movs	r2, #255	; 0xff
 800bf2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d114      	bne.n	800bf62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	691b      	ldr	r3, [r3, #16]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d01a      	beq.n	800bf76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	3310      	adds	r3, #16
 800bf44:	4618      	mov	r0, r3
 800bf46:	f001 f903 	bl	800d150 <xTaskRemoveFromEventList>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d012      	beq.n	800bf76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bf50:	4b0c      	ldr	r3, [pc, #48]	; (800bf84 <xQueueGenericReset+0xcc>)
 800bf52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf56:	601a      	str	r2, [r3, #0]
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	e009      	b.n	800bf76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	3310      	adds	r3, #16
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7ff fef2 	bl	800bd50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	3324      	adds	r3, #36	; 0x24
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7ff feed 	bl	800bd50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bf76:	f002 f835 	bl	800dfe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bf7a:	2301      	movs	r3, #1
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	e000ed04 	.word	0xe000ed04

0800bf88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b08e      	sub	sp, #56	; 0x38
 800bf8c:	af02      	add	r7, sp, #8
 800bf8e:	60f8      	str	r0, [r7, #12]
 800bf90:	60b9      	str	r1, [r7, #8]
 800bf92:	607a      	str	r2, [r7, #4]
 800bf94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d10a      	bne.n	800bfb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bf9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa0:	f383 8811 	msr	BASEPRI, r3
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bfae:	bf00      	nop
 800bfb0:	e7fe      	b.n	800bfb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d10a      	bne.n	800bfce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfbc:	f383 8811 	msr	BASEPRI, r3
 800bfc0:	f3bf 8f6f 	isb	sy
 800bfc4:	f3bf 8f4f 	dsb	sy
 800bfc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bfca:	bf00      	nop
 800bfcc:	e7fe      	b.n	800bfcc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d002      	beq.n	800bfda <xQueueGenericCreateStatic+0x52>
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d001      	beq.n	800bfde <xQueueGenericCreateStatic+0x56>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e000      	b.n	800bfe0 <xQueueGenericCreateStatic+0x58>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d10a      	bne.n	800bffa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe8:	f383 8811 	msr	BASEPRI, r3
 800bfec:	f3bf 8f6f 	isb	sy
 800bff0:	f3bf 8f4f 	dsb	sy
 800bff4:	623b      	str	r3, [r7, #32]
}
 800bff6:	bf00      	nop
 800bff8:	e7fe      	b.n	800bff8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d102      	bne.n	800c006 <xQueueGenericCreateStatic+0x7e>
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d101      	bne.n	800c00a <xQueueGenericCreateStatic+0x82>
 800c006:	2301      	movs	r3, #1
 800c008:	e000      	b.n	800c00c <xQueueGenericCreateStatic+0x84>
 800c00a:	2300      	movs	r3, #0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10a      	bne.n	800c026 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	61fb      	str	r3, [r7, #28]
}
 800c022:	bf00      	nop
 800c024:	e7fe      	b.n	800c024 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c026:	2350      	movs	r3, #80	; 0x50
 800c028:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	2b50      	cmp	r3, #80	; 0x50
 800c02e:	d00a      	beq.n	800c046 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	61bb      	str	r3, [r7, #24]
}
 800c042:	bf00      	nop
 800c044:	e7fe      	b.n	800c044 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c046:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00d      	beq.n	800c06e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c054:	2201      	movs	r2, #1
 800c056:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c05a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	4613      	mov	r3, r2
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	68b9      	ldr	r1, [r7, #8]
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f000 f805 	bl	800c078 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c070:	4618      	mov	r0, r3
 800c072:	3730      	adds	r7, #48	; 0x30
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d103      	bne.n	800c094 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c08c:	69bb      	ldr	r3, [r7, #24]
 800c08e:	69ba      	ldr	r2, [r7, #24]
 800c090:	601a      	str	r2, [r3, #0]
 800c092:	e002      	b.n	800c09a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	68fa      	ldr	r2, [r7, #12]
 800c09e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	68ba      	ldr	r2, [r7, #8]
 800c0a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c0a6:	2101      	movs	r1, #1
 800c0a8:	69b8      	ldr	r0, [r7, #24]
 800c0aa:	f7ff ff05 	bl	800beb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	78fa      	ldrb	r2, [r7, #3]
 800c0b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c0b6:	bf00      	nop
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
	...

0800c0c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b08e      	sub	sp, #56	; 0x38
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	607a      	str	r2, [r7, #4]
 800c0cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d10a      	bne.n	800c0f2 <xQueueGenericSend+0x32>
	__asm volatile
 800c0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e0:	f383 8811 	msr	BASEPRI, r3
 800c0e4:	f3bf 8f6f 	isb	sy
 800c0e8:	f3bf 8f4f 	dsb	sy
 800c0ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c0ee:	bf00      	nop
 800c0f0:	e7fe      	b.n	800c0f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d103      	bne.n	800c100 <xQueueGenericSend+0x40>
 800c0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d101      	bne.n	800c104 <xQueueGenericSend+0x44>
 800c100:	2301      	movs	r3, #1
 800c102:	e000      	b.n	800c106 <xQueueGenericSend+0x46>
 800c104:	2300      	movs	r3, #0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d10a      	bne.n	800c120 <xQueueGenericSend+0x60>
	__asm volatile
 800c10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10e:	f383 8811 	msr	BASEPRI, r3
 800c112:	f3bf 8f6f 	isb	sy
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c11c:	bf00      	nop
 800c11e:	e7fe      	b.n	800c11e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	2b02      	cmp	r3, #2
 800c124:	d103      	bne.n	800c12e <xQueueGenericSend+0x6e>
 800c126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d101      	bne.n	800c132 <xQueueGenericSend+0x72>
 800c12e:	2301      	movs	r3, #1
 800c130:	e000      	b.n	800c134 <xQueueGenericSend+0x74>
 800c132:	2300      	movs	r3, #0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10a      	bne.n	800c14e <xQueueGenericSend+0x8e>
	__asm volatile
 800c138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13c:	f383 8811 	msr	BASEPRI, r3
 800c140:	f3bf 8f6f 	isb	sy
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	623b      	str	r3, [r7, #32]
}
 800c14a:	bf00      	nop
 800c14c:	e7fe      	b.n	800c14c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c14e:	f001 f9bd 	bl	800d4cc <xTaskGetSchedulerState>
 800c152:	4603      	mov	r3, r0
 800c154:	2b00      	cmp	r3, #0
 800c156:	d102      	bne.n	800c15e <xQueueGenericSend+0x9e>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <xQueueGenericSend+0xa2>
 800c15e:	2301      	movs	r3, #1
 800c160:	e000      	b.n	800c164 <xQueueGenericSend+0xa4>
 800c162:	2300      	movs	r3, #0
 800c164:	2b00      	cmp	r3, #0
 800c166:	d10a      	bne.n	800c17e <xQueueGenericSend+0xbe>
	__asm volatile
 800c168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16c:	f383 8811 	msr	BASEPRI, r3
 800c170:	f3bf 8f6f 	isb	sy
 800c174:	f3bf 8f4f 	dsb	sy
 800c178:	61fb      	str	r3, [r7, #28]
}
 800c17a:	bf00      	nop
 800c17c:	e7fe      	b.n	800c17c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c17e:	f001 ff01 	bl	800df84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d302      	bcc.n	800c194 <xQueueGenericSend+0xd4>
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	2b02      	cmp	r3, #2
 800c192:	d129      	bne.n	800c1e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c194:	683a      	ldr	r2, [r7, #0]
 800c196:	68b9      	ldr	r1, [r7, #8]
 800c198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c19a:	f000 fa0b 	bl	800c5b4 <prvCopyDataToQueue>
 800c19e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d010      	beq.n	800c1ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1aa:	3324      	adds	r3, #36	; 0x24
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f000 ffcf 	bl	800d150 <xTaskRemoveFromEventList>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d013      	beq.n	800c1e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c1b8:	4b3f      	ldr	r3, [pc, #252]	; (800c2b8 <xQueueGenericSend+0x1f8>)
 800c1ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1be:	601a      	str	r2, [r3, #0]
 800c1c0:	f3bf 8f4f 	dsb	sy
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	e00a      	b.n	800c1e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d007      	beq.n	800c1e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c1d0:	4b39      	ldr	r3, [pc, #228]	; (800c2b8 <xQueueGenericSend+0x1f8>)
 800c1d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1d6:	601a      	str	r2, [r3, #0]
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c1e0:	f001 ff00 	bl	800dfe4 <vPortExitCritical>
				return pdPASS;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e063      	b.n	800c2b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d103      	bne.n	800c1f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1ee:	f001 fef9 	bl	800dfe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	e05c      	b.n	800c2b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d106      	bne.n	800c20a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1fc:	f107 0314 	add.w	r3, r7, #20
 800c200:	4618      	mov	r0, r3
 800c202:	f001 f809 	bl	800d218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c206:	2301      	movs	r3, #1
 800c208:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c20a:	f001 feeb 	bl	800dfe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c20e:	f000 fd7b 	bl	800cd08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c212:	f001 feb7 	bl	800df84 <vPortEnterCritical>
 800c216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c218:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c21c:	b25b      	sxtb	r3, r3
 800c21e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c222:	d103      	bne.n	800c22c <xQueueGenericSend+0x16c>
 800c224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c226:	2200      	movs	r2, #0
 800c228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c232:	b25b      	sxtb	r3, r3
 800c234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c238:	d103      	bne.n	800c242 <xQueueGenericSend+0x182>
 800c23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23c:	2200      	movs	r2, #0
 800c23e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c242:	f001 fecf 	bl	800dfe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c246:	1d3a      	adds	r2, r7, #4
 800c248:	f107 0314 	add.w	r3, r7, #20
 800c24c:	4611      	mov	r1, r2
 800c24e:	4618      	mov	r0, r3
 800c250:	f000 fff8 	bl	800d244 <xTaskCheckForTimeOut>
 800c254:	4603      	mov	r3, r0
 800c256:	2b00      	cmp	r3, #0
 800c258:	d124      	bne.n	800c2a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c25a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c25c:	f000 faa2 	bl	800c7a4 <prvIsQueueFull>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d018      	beq.n	800c298 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c268:	3310      	adds	r3, #16
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	4611      	mov	r1, r2
 800c26e:	4618      	mov	r0, r3
 800c270:	f000 ff1e 	bl	800d0b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c276:	f000 fa2d 	bl	800c6d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c27a:	f000 fd53 	bl	800cd24 <xTaskResumeAll>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b00      	cmp	r3, #0
 800c282:	f47f af7c 	bne.w	800c17e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c286:	4b0c      	ldr	r3, [pc, #48]	; (800c2b8 <xQueueGenericSend+0x1f8>)
 800c288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c28c:	601a      	str	r2, [r3, #0]
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	f3bf 8f6f 	isb	sy
 800c296:	e772      	b.n	800c17e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c29a:	f000 fa1b 	bl	800c6d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c29e:	f000 fd41 	bl	800cd24 <xTaskResumeAll>
 800c2a2:	e76c      	b.n	800c17e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c2a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2a6:	f000 fa15 	bl	800c6d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2aa:	f000 fd3b 	bl	800cd24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c2ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3738      	adds	r7, #56	; 0x38
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	e000ed04 	.word	0xe000ed04

0800c2bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b090      	sub	sp, #64	; 0x40
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	607a      	str	r2, [r7, #4]
 800c2c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d10a      	bne.n	800c2ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d8:	f383 8811 	msr	BASEPRI, r3
 800c2dc:	f3bf 8f6f 	isb	sy
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c2e6:	bf00      	nop
 800c2e8:	e7fe      	b.n	800c2e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d103      	bne.n	800c2f8 <xQueueGenericSendFromISR+0x3c>
 800c2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d101      	bne.n	800c2fc <xQueueGenericSendFromISR+0x40>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e000      	b.n	800c2fe <xQueueGenericSendFromISR+0x42>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d10a      	bne.n	800c318 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c314:	bf00      	nop
 800c316:	e7fe      	b.n	800c316 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	2b02      	cmp	r3, #2
 800c31c:	d103      	bne.n	800c326 <xQueueGenericSendFromISR+0x6a>
 800c31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c322:	2b01      	cmp	r3, #1
 800c324:	d101      	bne.n	800c32a <xQueueGenericSendFromISR+0x6e>
 800c326:	2301      	movs	r3, #1
 800c328:	e000      	b.n	800c32c <xQueueGenericSendFromISR+0x70>
 800c32a:	2300      	movs	r3, #0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10a      	bne.n	800c346 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c334:	f383 8811 	msr	BASEPRI, r3
 800c338:	f3bf 8f6f 	isb	sy
 800c33c:	f3bf 8f4f 	dsb	sy
 800c340:	623b      	str	r3, [r7, #32]
}
 800c342:	bf00      	nop
 800c344:	e7fe      	b.n	800c344 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c346:	f001 feff 	bl	800e148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c34a:	f3ef 8211 	mrs	r2, BASEPRI
 800c34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	61fa      	str	r2, [r7, #28]
 800c360:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c362:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c364:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c36e:	429a      	cmp	r2, r3
 800c370:	d302      	bcc.n	800c378 <xQueueGenericSendFromISR+0xbc>
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	2b02      	cmp	r3, #2
 800c376:	d12f      	bne.n	800c3d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c386:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c388:	683a      	ldr	r2, [r7, #0]
 800c38a:	68b9      	ldr	r1, [r7, #8]
 800c38c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c38e:	f000 f911 	bl	800c5b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c392:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c39a:	d112      	bne.n	800c3c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d016      	beq.n	800c3d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a6:	3324      	adds	r3, #36	; 0x24
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f000 fed1 	bl	800d150 <xTaskRemoveFromEventList>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d00e      	beq.n	800c3d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00b      	beq.n	800c3d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2201      	movs	r2, #1
 800c3be:	601a      	str	r2, [r3, #0]
 800c3c0:	e007      	b.n	800c3d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c3c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	b25a      	sxtb	r2, r3
 800c3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c3d6:	e001      	b.n	800c3dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c3e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3740      	adds	r7, #64	; 0x40
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
	...

0800c3f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b08c      	sub	sp, #48	; 0x30
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c400:	2300      	movs	r3, #0
 800c402:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10a      	bne.n	800c424 <xQueueReceive+0x30>
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	623b      	str	r3, [r7, #32]
}
 800c420:	bf00      	nop
 800c422:	e7fe      	b.n	800c422 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d103      	bne.n	800c432 <xQueueReceive+0x3e>
 800c42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d101      	bne.n	800c436 <xQueueReceive+0x42>
 800c432:	2301      	movs	r3, #1
 800c434:	e000      	b.n	800c438 <xQueueReceive+0x44>
 800c436:	2300      	movs	r3, #0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d10a      	bne.n	800c452 <xQueueReceive+0x5e>
	__asm volatile
 800c43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c440:	f383 8811 	msr	BASEPRI, r3
 800c444:	f3bf 8f6f 	isb	sy
 800c448:	f3bf 8f4f 	dsb	sy
 800c44c:	61fb      	str	r3, [r7, #28]
}
 800c44e:	bf00      	nop
 800c450:	e7fe      	b.n	800c450 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c452:	f001 f83b 	bl	800d4cc <xTaskGetSchedulerState>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d102      	bne.n	800c462 <xQueueReceive+0x6e>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d101      	bne.n	800c466 <xQueueReceive+0x72>
 800c462:	2301      	movs	r3, #1
 800c464:	e000      	b.n	800c468 <xQueueReceive+0x74>
 800c466:	2300      	movs	r3, #0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d10a      	bne.n	800c482 <xQueueReceive+0x8e>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	61bb      	str	r3, [r7, #24]
}
 800c47e:	bf00      	nop
 800c480:	e7fe      	b.n	800c480 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c482:	f001 fd7f 	bl	800df84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d01f      	beq.n	800c4d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c492:	68b9      	ldr	r1, [r7, #8]
 800c494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c496:	f000 f8f7 	bl	800c688 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49c:	1e5a      	subs	r2, r3, #1
 800c49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a4:	691b      	ldr	r3, [r3, #16]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00f      	beq.n	800c4ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ac:	3310      	adds	r3, #16
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f000 fe4e 	bl	800d150 <xTaskRemoveFromEventList>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d007      	beq.n	800c4ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c4ba:	4b3d      	ldr	r3, [pc, #244]	; (800c5b0 <xQueueReceive+0x1bc>)
 800c4bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4c0:	601a      	str	r2, [r3, #0]
 800c4c2:	f3bf 8f4f 	dsb	sy
 800c4c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c4ca:	f001 fd8b 	bl	800dfe4 <vPortExitCritical>
				return pdPASS;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e069      	b.n	800c5a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d103      	bne.n	800c4e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c4d8:	f001 fd84 	bl	800dfe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	e062      	b.n	800c5a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d106      	bne.n	800c4f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4e6:	f107 0310 	add.w	r3, r7, #16
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 fe94 	bl	800d218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c4f4:	f001 fd76 	bl	800dfe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c4f8:	f000 fc06 	bl	800cd08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c4fc:	f001 fd42 	bl	800df84 <vPortEnterCritical>
 800c500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c502:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c506:	b25b      	sxtb	r3, r3
 800c508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c50c:	d103      	bne.n	800c516 <xQueueReceive+0x122>
 800c50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c510:	2200      	movs	r2, #0
 800c512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c51c:	b25b      	sxtb	r3, r3
 800c51e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c522:	d103      	bne.n	800c52c <xQueueReceive+0x138>
 800c524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c526:	2200      	movs	r2, #0
 800c528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c52c:	f001 fd5a 	bl	800dfe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c530:	1d3a      	adds	r2, r7, #4
 800c532:	f107 0310 	add.w	r3, r7, #16
 800c536:	4611      	mov	r1, r2
 800c538:	4618      	mov	r0, r3
 800c53a:	f000 fe83 	bl	800d244 <xTaskCheckForTimeOut>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d123      	bne.n	800c58c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c546:	f000 f917 	bl	800c778 <prvIsQueueEmpty>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d017      	beq.n	800c580 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c552:	3324      	adds	r3, #36	; 0x24
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	4611      	mov	r1, r2
 800c558:	4618      	mov	r0, r3
 800c55a:	f000 fda9 	bl	800d0b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c55e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c560:	f000 f8b8 	bl	800c6d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c564:	f000 fbde 	bl	800cd24 <xTaskResumeAll>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d189      	bne.n	800c482 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c56e:	4b10      	ldr	r3, [pc, #64]	; (800c5b0 <xQueueReceive+0x1bc>)
 800c570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c574:	601a      	str	r2, [r3, #0]
 800c576:	f3bf 8f4f 	dsb	sy
 800c57a:	f3bf 8f6f 	isb	sy
 800c57e:	e780      	b.n	800c482 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c582:	f000 f8a7 	bl	800c6d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c586:	f000 fbcd 	bl	800cd24 <xTaskResumeAll>
 800c58a:	e77a      	b.n	800c482 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c58c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c58e:	f000 f8a1 	bl	800c6d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c592:	f000 fbc7 	bl	800cd24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c598:	f000 f8ee 	bl	800c778 <prvIsQueueEmpty>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f43f af6f 	beq.w	800c482 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c5a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3730      	adds	r7, #48	; 0x30
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	e000ed04 	.word	0xe000ed04

0800c5b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b086      	sub	sp, #24
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d10d      	bne.n	800c5ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d14d      	bne.n	800c676 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f000 ff92 	bl	800d508 <xTaskPriorityDisinherit>
 800c5e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	609a      	str	r2, [r3, #8]
 800c5ec:	e043      	b.n	800c676 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d119      	bne.n	800c628 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	6858      	ldr	r0, [r3, #4]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	68b9      	ldr	r1, [r7, #8]
 800c600:	f002 fb12 	bl	800ec28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	685a      	ldr	r2, [r3, #4]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60c:	441a      	add	r2, r3
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	685a      	ldr	r2, [r3, #4]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d32b      	bcc.n	800c676 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	605a      	str	r2, [r3, #4]
 800c626:	e026      	b.n	800c676 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	68d8      	ldr	r0, [r3, #12]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c630:	461a      	mov	r2, r3
 800c632:	68b9      	ldr	r1, [r7, #8]
 800c634:	f002 faf8 	bl	800ec28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	68da      	ldr	r2, [r3, #12]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c640:	425b      	negs	r3, r3
 800c642:	441a      	add	r2, r3
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	68da      	ldr	r2, [r3, #12]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	429a      	cmp	r2, r3
 800c652:	d207      	bcs.n	800c664 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	689a      	ldr	r2, [r3, #8]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65c:	425b      	negs	r3, r3
 800c65e:	441a      	add	r2, r3
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2b02      	cmp	r3, #2
 800c668:	d105      	bne.n	800c676 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d002      	beq.n	800c676 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	3b01      	subs	r3, #1
 800c674:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	1c5a      	adds	r2, r3, #1
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c67e:	697b      	ldr	r3, [r7, #20]
}
 800c680:	4618      	mov	r0, r3
 800c682:	3718      	adds	r7, #24
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c696:	2b00      	cmp	r3, #0
 800c698:	d018      	beq.n	800c6cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	68da      	ldr	r2, [r3, #12]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a2:	441a      	add	r2, r3
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	68da      	ldr	r2, [r3, #12]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d303      	bcc.n	800c6bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	68d9      	ldr	r1, [r3, #12]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	6838      	ldr	r0, [r7, #0]
 800c6c8:	f002 faae 	bl	800ec28 <memcpy>
	}
}
 800c6cc:	bf00      	nop
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c6dc:	f001 fc52 	bl	800df84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6e8:	e011      	b.n	800c70e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d012      	beq.n	800c718 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	3324      	adds	r3, #36	; 0x24
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 fd2a 	bl	800d150 <xTaskRemoveFromEventList>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d001      	beq.n	800c706 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c702:	f000 fe01 	bl	800d308 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c706:	7bfb      	ldrb	r3, [r7, #15]
 800c708:	3b01      	subs	r3, #1
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c70e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c712:	2b00      	cmp	r3, #0
 800c714:	dce9      	bgt.n	800c6ea <prvUnlockQueue+0x16>
 800c716:	e000      	b.n	800c71a <prvUnlockQueue+0x46>
					break;
 800c718:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	22ff      	movs	r2, #255	; 0xff
 800c71e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c722:	f001 fc5f 	bl	800dfe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c726:	f001 fc2d 	bl	800df84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c730:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c732:	e011      	b.n	800c758 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	691b      	ldr	r3, [r3, #16]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d012      	beq.n	800c762 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	3310      	adds	r3, #16
 800c740:	4618      	mov	r0, r3
 800c742:	f000 fd05 	bl	800d150 <xTaskRemoveFromEventList>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d001      	beq.n	800c750 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c74c:	f000 fddc 	bl	800d308 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c750:	7bbb      	ldrb	r3, [r7, #14]
 800c752:	3b01      	subs	r3, #1
 800c754:	b2db      	uxtb	r3, r3
 800c756:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	dce9      	bgt.n	800c734 <prvUnlockQueue+0x60>
 800c760:	e000      	b.n	800c764 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c762:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	22ff      	movs	r2, #255	; 0xff
 800c768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c76c:	f001 fc3a 	bl	800dfe4 <vPortExitCritical>
}
 800c770:	bf00      	nop
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c780:	f001 fc00 	bl	800df84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d102      	bne.n	800c792 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c78c:	2301      	movs	r3, #1
 800c78e:	60fb      	str	r3, [r7, #12]
 800c790:	e001      	b.n	800c796 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c792:	2300      	movs	r3, #0
 800c794:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c796:	f001 fc25 	bl	800dfe4 <vPortExitCritical>

	return xReturn;
 800c79a:	68fb      	ldr	r3, [r7, #12]
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3710      	adds	r7, #16
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c7ac:	f001 fbea 	bl	800df84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d102      	bne.n	800c7c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	60fb      	str	r3, [r7, #12]
 800c7c0:	e001      	b.n	800c7c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7c6:	f001 fc0d 	bl	800dfe4 <vPortExitCritical>

	return xReturn;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c7de:	2300      	movs	r3, #0
 800c7e0:	60fb      	str	r3, [r7, #12]
 800c7e2:	e014      	b.n	800c80e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c7e4:	4a0f      	ldr	r2, [pc, #60]	; (800c824 <vQueueAddToRegistry+0x50>)
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d10b      	bne.n	800c808 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c7f0:	490c      	ldr	r1, [pc, #48]	; (800c824 <vQueueAddToRegistry+0x50>)
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	683a      	ldr	r2, [r7, #0]
 800c7f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c7fa:	4a0a      	ldr	r2, [pc, #40]	; (800c824 <vQueueAddToRegistry+0x50>)
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	00db      	lsls	r3, r3, #3
 800c800:	4413      	add	r3, r2
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c806:	e006      	b.n	800c816 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	3301      	adds	r3, #1
 800c80c:	60fb      	str	r3, [r7, #12]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2b07      	cmp	r3, #7
 800c812:	d9e7      	bls.n	800c7e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c814:	bf00      	nop
 800c816:	bf00      	nop
 800c818:	3714      	adds	r7, #20
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop
 800c824:	20000c48 	.word	0x20000c48

0800c828 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b086      	sub	sp, #24
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c838:	f001 fba4 	bl	800df84 <vPortEnterCritical>
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c842:	b25b      	sxtb	r3, r3
 800c844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c848:	d103      	bne.n	800c852 <vQueueWaitForMessageRestricted+0x2a>
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c858:	b25b      	sxtb	r3, r3
 800c85a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c85e:	d103      	bne.n	800c868 <vQueueWaitForMessageRestricted+0x40>
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	2200      	movs	r2, #0
 800c864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c868:	f001 fbbc 	bl	800dfe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c870:	2b00      	cmp	r3, #0
 800c872:	d106      	bne.n	800c882 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	3324      	adds	r3, #36	; 0x24
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	68b9      	ldr	r1, [r7, #8]
 800c87c:	4618      	mov	r0, r3
 800c87e:	f000 fc3b 	bl	800d0f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c882:	6978      	ldr	r0, [r7, #20]
 800c884:	f7ff ff26 	bl	800c6d4 <prvUnlockQueue>
	}
 800c888:	bf00      	nop
 800c88a:	3718      	adds	r7, #24
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c890:	b580      	push	{r7, lr}
 800c892:	b08e      	sub	sp, #56	; 0x38
 800c894:	af04      	add	r7, sp, #16
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	607a      	str	r2, [r7, #4]
 800c89c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d10a      	bne.n	800c8ba <xTaskCreateStatic+0x2a>
	__asm volatile
 800c8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a8:	f383 8811 	msr	BASEPRI, r3
 800c8ac:	f3bf 8f6f 	isb	sy
 800c8b0:	f3bf 8f4f 	dsb	sy
 800c8b4:	623b      	str	r3, [r7, #32]
}
 800c8b6:	bf00      	nop
 800c8b8:	e7fe      	b.n	800c8b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d10a      	bne.n	800c8d6 <xTaskCreateStatic+0x46>
	__asm volatile
 800c8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c4:	f383 8811 	msr	BASEPRI, r3
 800c8c8:	f3bf 8f6f 	isb	sy
 800c8cc:	f3bf 8f4f 	dsb	sy
 800c8d0:	61fb      	str	r3, [r7, #28]
}
 800c8d2:	bf00      	nop
 800c8d4:	e7fe      	b.n	800c8d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c8d6:	235c      	movs	r3, #92	; 0x5c
 800c8d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	2b5c      	cmp	r3, #92	; 0x5c
 800c8de:	d00a      	beq.n	800c8f6 <xTaskCreateStatic+0x66>
	__asm volatile
 800c8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e4:	f383 8811 	msr	BASEPRI, r3
 800c8e8:	f3bf 8f6f 	isb	sy
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	61bb      	str	r3, [r7, #24]
}
 800c8f2:	bf00      	nop
 800c8f4:	e7fe      	b.n	800c8f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c8f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d01e      	beq.n	800c93c <xTaskCreateStatic+0xac>
 800c8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c900:	2b00      	cmp	r3, #0
 800c902:	d01b      	beq.n	800c93c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c906:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c90c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c910:	2202      	movs	r2, #2
 800c912:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c916:	2300      	movs	r3, #0
 800c918:	9303      	str	r3, [sp, #12]
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	9302      	str	r3, [sp, #8]
 800c91e:	f107 0314 	add.w	r3, r7, #20
 800c922:	9301      	str	r3, [sp, #4]
 800c924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c926:	9300      	str	r3, [sp, #0]
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	68b9      	ldr	r1, [r7, #8]
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	f000 f850 	bl	800c9d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c936:	f000 f8dd 	bl	800caf4 <prvAddNewTaskToReadyList>
 800c93a:	e001      	b.n	800c940 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c93c:	2300      	movs	r3, #0
 800c93e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c940:	697b      	ldr	r3, [r7, #20]
	}
 800c942:	4618      	mov	r0, r3
 800c944:	3728      	adds	r7, #40	; 0x28
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b08c      	sub	sp, #48	; 0x30
 800c94e:	af04      	add	r7, sp, #16
 800c950:	60f8      	str	r0, [r7, #12]
 800c952:	60b9      	str	r1, [r7, #8]
 800c954:	603b      	str	r3, [r7, #0]
 800c956:	4613      	mov	r3, r2
 800c958:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c95a:	88fb      	ldrh	r3, [r7, #6]
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	4618      	mov	r0, r3
 800c960:	f001 fc32 	bl	800e1c8 <pvPortMalloc>
 800c964:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00e      	beq.n	800c98a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c96c:	205c      	movs	r0, #92	; 0x5c
 800c96e:	f001 fc2b 	bl	800e1c8 <pvPortMalloc>
 800c972:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d003      	beq.n	800c982 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	697a      	ldr	r2, [r7, #20]
 800c97e:	631a      	str	r2, [r3, #48]	; 0x30
 800c980:	e005      	b.n	800c98e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c982:	6978      	ldr	r0, [r7, #20]
 800c984:	f001 fcec 	bl	800e360 <vPortFree>
 800c988:	e001      	b.n	800c98e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c98a:	2300      	movs	r3, #0
 800c98c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d017      	beq.n	800c9c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	2200      	movs	r2, #0
 800c998:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c99c:	88fa      	ldrh	r2, [r7, #6]
 800c99e:	2300      	movs	r3, #0
 800c9a0:	9303      	str	r3, [sp, #12]
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	9302      	str	r3, [sp, #8]
 800c9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a8:	9301      	str	r3, [sp, #4]
 800c9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ac:	9300      	str	r3, [sp, #0]
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	68b9      	ldr	r1, [r7, #8]
 800c9b2:	68f8      	ldr	r0, [r7, #12]
 800c9b4:	f000 f80e 	bl	800c9d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c9b8:	69f8      	ldr	r0, [r7, #28]
 800c9ba:	f000 f89b 	bl	800caf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	61bb      	str	r3, [r7, #24]
 800c9c2:	e002      	b.n	800c9ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c9c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c9ca:	69bb      	ldr	r3, [r7, #24]
	}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3720      	adds	r7, #32
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b088      	sub	sp, #32
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	607a      	str	r2, [r7, #4]
 800c9e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	21a5      	movs	r1, #165	; 0xa5
 800c9ee:	f002 f8e7 	bl	800ebc0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	4413      	add	r3, r2
 800ca02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ca04:	69bb      	ldr	r3, [r7, #24]
 800ca06:	f023 0307 	bic.w	r3, r3, #7
 800ca0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	f003 0307 	and.w	r3, r3, #7
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00a      	beq.n	800ca2c <prvInitialiseNewTask+0x58>
	__asm volatile
 800ca16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1a:	f383 8811 	msr	BASEPRI, r3
 800ca1e:	f3bf 8f6f 	isb	sy
 800ca22:	f3bf 8f4f 	dsb	sy
 800ca26:	617b      	str	r3, [r7, #20]
}
 800ca28:	bf00      	nop
 800ca2a:	e7fe      	b.n	800ca2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d01f      	beq.n	800ca72 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca32:	2300      	movs	r3, #0
 800ca34:	61fb      	str	r3, [r7, #28]
 800ca36:	e012      	b.n	800ca5e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	7819      	ldrb	r1, [r3, #0]
 800ca40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	4413      	add	r3, r2
 800ca46:	3334      	adds	r3, #52	; 0x34
 800ca48:	460a      	mov	r2, r1
 800ca4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	69fb      	ldr	r3, [r7, #28]
 800ca50:	4413      	add	r3, r2
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d006      	beq.n	800ca66 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	61fb      	str	r3, [r7, #28]
 800ca5e:	69fb      	ldr	r3, [r7, #28]
 800ca60:	2b0f      	cmp	r3, #15
 800ca62:	d9e9      	bls.n	800ca38 <prvInitialiseNewTask+0x64>
 800ca64:	e000      	b.n	800ca68 <prvInitialiseNewTask+0x94>
			{
				break;
 800ca66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ca68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ca70:	e003      	b.n	800ca7a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ca72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca74:	2200      	movs	r2, #0
 800ca76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ca7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7c:	2b37      	cmp	r3, #55	; 0x37
 800ca7e:	d901      	bls.n	800ca84 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ca80:	2337      	movs	r3, #55	; 0x37
 800ca82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ca84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ca8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ca90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca92:	2200      	movs	r2, #0
 800ca94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ca96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca98:	3304      	adds	r3, #4
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7ff f978 	bl	800bd90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800caa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa2:	3318      	adds	r3, #24
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7ff f973 	bl	800bd90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800caaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800caba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cabe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac2:	2200      	movs	r2, #0
 800cac4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac8:	2200      	movs	r2, #0
 800caca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cace:	683a      	ldr	r2, [r7, #0]
 800cad0:	68f9      	ldr	r1, [r7, #12]
 800cad2:	69b8      	ldr	r0, [r7, #24]
 800cad4:	f001 f928 	bl	800dd28 <pxPortInitialiseStack>
 800cad8:	4602      	mov	r2, r0
 800cada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cadc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d002      	beq.n	800caea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800caea:	bf00      	nop
 800caec:	3720      	adds	r7, #32
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
	...

0800caf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cafc:	f001 fa42 	bl	800df84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cb00:	4b2d      	ldr	r3, [pc, #180]	; (800cbb8 <prvAddNewTaskToReadyList+0xc4>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3301      	adds	r3, #1
 800cb06:	4a2c      	ldr	r2, [pc, #176]	; (800cbb8 <prvAddNewTaskToReadyList+0xc4>)
 800cb08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cb0a:	4b2c      	ldr	r3, [pc, #176]	; (800cbbc <prvAddNewTaskToReadyList+0xc8>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d109      	bne.n	800cb26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cb12:	4a2a      	ldr	r2, [pc, #168]	; (800cbbc <prvAddNewTaskToReadyList+0xc8>)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cb18:	4b27      	ldr	r3, [pc, #156]	; (800cbb8 <prvAddNewTaskToReadyList+0xc4>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d110      	bne.n	800cb42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cb20:	f000 fc16 	bl	800d350 <prvInitialiseTaskLists>
 800cb24:	e00d      	b.n	800cb42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cb26:	4b26      	ldr	r3, [pc, #152]	; (800cbc0 <prvAddNewTaskToReadyList+0xcc>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d109      	bne.n	800cb42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cb2e:	4b23      	ldr	r3, [pc, #140]	; (800cbbc <prvAddNewTaskToReadyList+0xc8>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d802      	bhi.n	800cb42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cb3c:	4a1f      	ldr	r2, [pc, #124]	; (800cbbc <prvAddNewTaskToReadyList+0xc8>)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cb42:	4b20      	ldr	r3, [pc, #128]	; (800cbc4 <prvAddNewTaskToReadyList+0xd0>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	3301      	adds	r3, #1
 800cb48:	4a1e      	ldr	r2, [pc, #120]	; (800cbc4 <prvAddNewTaskToReadyList+0xd0>)
 800cb4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cb4c:	4b1d      	ldr	r3, [pc, #116]	; (800cbc4 <prvAddNewTaskToReadyList+0xd0>)
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb58:	4b1b      	ldr	r3, [pc, #108]	; (800cbc8 <prvAddNewTaskToReadyList+0xd4>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d903      	bls.n	800cb68 <prvAddNewTaskToReadyList+0x74>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb64:	4a18      	ldr	r2, [pc, #96]	; (800cbc8 <prvAddNewTaskToReadyList+0xd4>)
 800cb66:	6013      	str	r3, [r2, #0]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb6c:	4613      	mov	r3, r2
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	4413      	add	r3, r2
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	4a15      	ldr	r2, [pc, #84]	; (800cbcc <prvAddNewTaskToReadyList+0xd8>)
 800cb76:	441a      	add	r2, r3
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	3304      	adds	r3, #4
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	4610      	mov	r0, r2
 800cb80:	f7ff f913 	bl	800bdaa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cb84:	f001 fa2e 	bl	800dfe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cb88:	4b0d      	ldr	r3, [pc, #52]	; (800cbc0 <prvAddNewTaskToReadyList+0xcc>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00e      	beq.n	800cbae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cb90:	4b0a      	ldr	r3, [pc, #40]	; (800cbbc <prvAddNewTaskToReadyList+0xc8>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d207      	bcs.n	800cbae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cb9e:	4b0c      	ldr	r3, [pc, #48]	; (800cbd0 <prvAddNewTaskToReadyList+0xdc>)
 800cba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cba4:	601a      	str	r2, [r3, #0]
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbae:	bf00      	nop
 800cbb0:	3708      	adds	r7, #8
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	2000115c 	.word	0x2000115c
 800cbbc:	20000c88 	.word	0x20000c88
 800cbc0:	20001168 	.word	0x20001168
 800cbc4:	20001178 	.word	0x20001178
 800cbc8:	20001164 	.word	0x20001164
 800cbcc:	20000c8c 	.word	0x20000c8c
 800cbd0:	e000ed04 	.word	0xe000ed04

0800cbd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d017      	beq.n	800cc16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cbe6:	4b13      	ldr	r3, [pc, #76]	; (800cc34 <vTaskDelay+0x60>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d00a      	beq.n	800cc04 <vTaskDelay+0x30>
	__asm volatile
 800cbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	60bb      	str	r3, [r7, #8]
}
 800cc00:	bf00      	nop
 800cc02:	e7fe      	b.n	800cc02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cc04:	f000 f880 	bl	800cd08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cc08:	2100      	movs	r1, #0
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 fcea 	bl	800d5e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cc10:	f000 f888 	bl	800cd24 <xTaskResumeAll>
 800cc14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d107      	bne.n	800cc2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cc1c:	4b06      	ldr	r3, [pc, #24]	; (800cc38 <vTaskDelay+0x64>)
 800cc1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc22:	601a      	str	r2, [r3, #0]
 800cc24:	f3bf 8f4f 	dsb	sy
 800cc28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc2c:	bf00      	nop
 800cc2e:	3710      	adds	r7, #16
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	20001184 	.word	0x20001184
 800cc38:	e000ed04 	.word	0xe000ed04

0800cc3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b08a      	sub	sp, #40	; 0x28
 800cc40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc42:	2300      	movs	r3, #0
 800cc44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc46:	2300      	movs	r3, #0
 800cc48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc4a:	463a      	mov	r2, r7
 800cc4c:	1d39      	adds	r1, r7, #4
 800cc4e:	f107 0308 	add.w	r3, r7, #8
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7ff f848 	bl	800bce8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cc58:	6839      	ldr	r1, [r7, #0]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	68ba      	ldr	r2, [r7, #8]
 800cc5e:	9202      	str	r2, [sp, #8]
 800cc60:	9301      	str	r3, [sp, #4]
 800cc62:	2300      	movs	r3, #0
 800cc64:	9300      	str	r3, [sp, #0]
 800cc66:	2300      	movs	r3, #0
 800cc68:	460a      	mov	r2, r1
 800cc6a:	4921      	ldr	r1, [pc, #132]	; (800ccf0 <vTaskStartScheduler+0xb4>)
 800cc6c:	4821      	ldr	r0, [pc, #132]	; (800ccf4 <vTaskStartScheduler+0xb8>)
 800cc6e:	f7ff fe0f 	bl	800c890 <xTaskCreateStatic>
 800cc72:	4603      	mov	r3, r0
 800cc74:	4a20      	ldr	r2, [pc, #128]	; (800ccf8 <vTaskStartScheduler+0xbc>)
 800cc76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cc78:	4b1f      	ldr	r3, [pc, #124]	; (800ccf8 <vTaskStartScheduler+0xbc>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d002      	beq.n	800cc86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cc80:	2301      	movs	r3, #1
 800cc82:	617b      	str	r3, [r7, #20]
 800cc84:	e001      	b.n	800cc8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d102      	bne.n	800cc96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cc90:	f000 fcfc 	bl	800d68c <xTimerCreateTimerTask>
 800cc94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d116      	bne.n	800ccca <vTaskStartScheduler+0x8e>
	__asm volatile
 800cc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca0:	f383 8811 	msr	BASEPRI, r3
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	613b      	str	r3, [r7, #16]
}
 800ccae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ccb0:	4b12      	ldr	r3, [pc, #72]	; (800ccfc <vTaskStartScheduler+0xc0>)
 800ccb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccb6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ccb8:	4b11      	ldr	r3, [pc, #68]	; (800cd00 <vTaskStartScheduler+0xc4>)
 800ccba:	2201      	movs	r2, #1
 800ccbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ccbe:	4b11      	ldr	r3, [pc, #68]	; (800cd04 <vTaskStartScheduler+0xc8>)
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ccc4:	f001 f8bc 	bl	800de40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ccc8:	e00e      	b.n	800cce8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccd0:	d10a      	bne.n	800cce8 <vTaskStartScheduler+0xac>
	__asm volatile
 800ccd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd6:	f383 8811 	msr	BASEPRI, r3
 800ccda:	f3bf 8f6f 	isb	sy
 800ccde:	f3bf 8f4f 	dsb	sy
 800cce2:	60fb      	str	r3, [r7, #12]
}
 800cce4:	bf00      	nop
 800cce6:	e7fe      	b.n	800cce6 <vTaskStartScheduler+0xaa>
}
 800cce8:	bf00      	nop
 800ccea:	3718      	adds	r7, #24
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	08010240 	.word	0x08010240
 800ccf4:	0800d321 	.word	0x0800d321
 800ccf8:	20001180 	.word	0x20001180
 800ccfc:	2000117c 	.word	0x2000117c
 800cd00:	20001168 	.word	0x20001168
 800cd04:	20001160 	.word	0x20001160

0800cd08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cd08:	b480      	push	{r7}
 800cd0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cd0c:	4b04      	ldr	r3, [pc, #16]	; (800cd20 <vTaskSuspendAll+0x18>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	3301      	adds	r3, #1
 800cd12:	4a03      	ldr	r2, [pc, #12]	; (800cd20 <vTaskSuspendAll+0x18>)
 800cd14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cd16:	bf00      	nop
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr
 800cd20:	20001184 	.word	0x20001184

0800cd24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cd32:	4b42      	ldr	r3, [pc, #264]	; (800ce3c <xTaskResumeAll+0x118>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d10a      	bne.n	800cd50 <xTaskResumeAll+0x2c>
	__asm volatile
 800cd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3e:	f383 8811 	msr	BASEPRI, r3
 800cd42:	f3bf 8f6f 	isb	sy
 800cd46:	f3bf 8f4f 	dsb	sy
 800cd4a:	603b      	str	r3, [r7, #0]
}
 800cd4c:	bf00      	nop
 800cd4e:	e7fe      	b.n	800cd4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cd50:	f001 f918 	bl	800df84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cd54:	4b39      	ldr	r3, [pc, #228]	; (800ce3c <xTaskResumeAll+0x118>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	3b01      	subs	r3, #1
 800cd5a:	4a38      	ldr	r2, [pc, #224]	; (800ce3c <xTaskResumeAll+0x118>)
 800cd5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd5e:	4b37      	ldr	r3, [pc, #220]	; (800ce3c <xTaskResumeAll+0x118>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d162      	bne.n	800ce2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cd66:	4b36      	ldr	r3, [pc, #216]	; (800ce40 <xTaskResumeAll+0x11c>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d05e      	beq.n	800ce2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd6e:	e02f      	b.n	800cdd0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd70:	4b34      	ldr	r3, [pc, #208]	; (800ce44 <xTaskResumeAll+0x120>)
 800cd72:	68db      	ldr	r3, [r3, #12]
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	3318      	adds	r3, #24
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7ff f871 	bl	800be64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	3304      	adds	r3, #4
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7ff f86c 	bl	800be64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd90:	4b2d      	ldr	r3, [pc, #180]	; (800ce48 <xTaskResumeAll+0x124>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d903      	bls.n	800cda0 <xTaskResumeAll+0x7c>
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9c:	4a2a      	ldr	r2, [pc, #168]	; (800ce48 <xTaskResumeAll+0x124>)
 800cd9e:	6013      	str	r3, [r2, #0]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda4:	4613      	mov	r3, r2
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	4413      	add	r3, r2
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	4a27      	ldr	r2, [pc, #156]	; (800ce4c <xTaskResumeAll+0x128>)
 800cdae:	441a      	add	r2, r3
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	3304      	adds	r3, #4
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	4610      	mov	r0, r2
 800cdb8:	f7fe fff7 	bl	800bdaa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdc0:	4b23      	ldr	r3, [pc, #140]	; (800ce50 <xTaskResumeAll+0x12c>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d302      	bcc.n	800cdd0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cdca:	4b22      	ldr	r3, [pc, #136]	; (800ce54 <xTaskResumeAll+0x130>)
 800cdcc:	2201      	movs	r2, #1
 800cdce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cdd0:	4b1c      	ldr	r3, [pc, #112]	; (800ce44 <xTaskResumeAll+0x120>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d1cb      	bne.n	800cd70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d001      	beq.n	800cde2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cdde:	f000 fb55 	bl	800d48c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cde2:	4b1d      	ldr	r3, [pc, #116]	; (800ce58 <xTaskResumeAll+0x134>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d010      	beq.n	800ce10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cdee:	f000 f847 	bl	800ce80 <xTaskIncrementTick>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d002      	beq.n	800cdfe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cdf8:	4b16      	ldr	r3, [pc, #88]	; (800ce54 <xTaskResumeAll+0x130>)
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	3b01      	subs	r3, #1
 800ce02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d1f1      	bne.n	800cdee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ce0a:	4b13      	ldr	r3, [pc, #76]	; (800ce58 <xTaskResumeAll+0x134>)
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ce10:	4b10      	ldr	r3, [pc, #64]	; (800ce54 <xTaskResumeAll+0x130>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d009      	beq.n	800ce2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ce1c:	4b0f      	ldr	r3, [pc, #60]	; (800ce5c <xTaskResumeAll+0x138>)
 800ce1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce22:	601a      	str	r2, [r3, #0]
 800ce24:	f3bf 8f4f 	dsb	sy
 800ce28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce2c:	f001 f8da 	bl	800dfe4 <vPortExitCritical>

	return xAlreadyYielded;
 800ce30:	68bb      	ldr	r3, [r7, #8]
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	20001184 	.word	0x20001184
 800ce40:	2000115c 	.word	0x2000115c
 800ce44:	2000111c 	.word	0x2000111c
 800ce48:	20001164 	.word	0x20001164
 800ce4c:	20000c8c 	.word	0x20000c8c
 800ce50:	20000c88 	.word	0x20000c88
 800ce54:	20001170 	.word	0x20001170
 800ce58:	2000116c 	.word	0x2000116c
 800ce5c:	e000ed04 	.word	0xe000ed04

0800ce60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ce60:	b480      	push	{r7}
 800ce62:	b083      	sub	sp, #12
 800ce64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ce66:	4b05      	ldr	r3, [pc, #20]	; (800ce7c <xTaskGetTickCount+0x1c>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ce6c:	687b      	ldr	r3, [r7, #4]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	370c      	adds	r7, #12
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	20001160 	.word	0x20001160

0800ce80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b086      	sub	sp, #24
 800ce84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ce86:	2300      	movs	r3, #0
 800ce88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce8a:	4b4f      	ldr	r3, [pc, #316]	; (800cfc8 <xTaskIncrementTick+0x148>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f040 808f 	bne.w	800cfb2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ce94:	4b4d      	ldr	r3, [pc, #308]	; (800cfcc <xTaskIncrementTick+0x14c>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ce9c:	4a4b      	ldr	r2, [pc, #300]	; (800cfcc <xTaskIncrementTick+0x14c>)
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d120      	bne.n	800ceea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cea8:	4b49      	ldr	r3, [pc, #292]	; (800cfd0 <xTaskIncrementTick+0x150>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00a      	beq.n	800cec8 <xTaskIncrementTick+0x48>
	__asm volatile
 800ceb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb6:	f383 8811 	msr	BASEPRI, r3
 800ceba:	f3bf 8f6f 	isb	sy
 800cebe:	f3bf 8f4f 	dsb	sy
 800cec2:	603b      	str	r3, [r7, #0]
}
 800cec4:	bf00      	nop
 800cec6:	e7fe      	b.n	800cec6 <xTaskIncrementTick+0x46>
 800cec8:	4b41      	ldr	r3, [pc, #260]	; (800cfd0 <xTaskIncrementTick+0x150>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	60fb      	str	r3, [r7, #12]
 800cece:	4b41      	ldr	r3, [pc, #260]	; (800cfd4 <xTaskIncrementTick+0x154>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4a3f      	ldr	r2, [pc, #252]	; (800cfd0 <xTaskIncrementTick+0x150>)
 800ced4:	6013      	str	r3, [r2, #0]
 800ced6:	4a3f      	ldr	r2, [pc, #252]	; (800cfd4 <xTaskIncrementTick+0x154>)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6013      	str	r3, [r2, #0]
 800cedc:	4b3e      	ldr	r3, [pc, #248]	; (800cfd8 <xTaskIncrementTick+0x158>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	3301      	adds	r3, #1
 800cee2:	4a3d      	ldr	r2, [pc, #244]	; (800cfd8 <xTaskIncrementTick+0x158>)
 800cee4:	6013      	str	r3, [r2, #0]
 800cee6:	f000 fad1 	bl	800d48c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ceea:	4b3c      	ldr	r3, [pc, #240]	; (800cfdc <xTaskIncrementTick+0x15c>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	693a      	ldr	r2, [r7, #16]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d349      	bcc.n	800cf88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cef4:	4b36      	ldr	r3, [pc, #216]	; (800cfd0 <xTaskIncrementTick+0x150>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d104      	bne.n	800cf08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cefe:	4b37      	ldr	r3, [pc, #220]	; (800cfdc <xTaskIncrementTick+0x15c>)
 800cf00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf04:	601a      	str	r2, [r3, #0]
					break;
 800cf06:	e03f      	b.n	800cf88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf08:	4b31      	ldr	r3, [pc, #196]	; (800cfd0 <xTaskIncrementTick+0x150>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	68db      	ldr	r3, [r3, #12]
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cf18:	693a      	ldr	r2, [r7, #16]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d203      	bcs.n	800cf28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cf20:	4a2e      	ldr	r2, [pc, #184]	; (800cfdc <xTaskIncrementTick+0x15c>)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cf26:	e02f      	b.n	800cf88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	3304      	adds	r3, #4
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fe ff99 	bl	800be64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d004      	beq.n	800cf44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	3318      	adds	r3, #24
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7fe ff90 	bl	800be64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf48:	4b25      	ldr	r3, [pc, #148]	; (800cfe0 <xTaskIncrementTick+0x160>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d903      	bls.n	800cf58 <xTaskIncrementTick+0xd8>
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf54:	4a22      	ldr	r2, [pc, #136]	; (800cfe0 <xTaskIncrementTick+0x160>)
 800cf56:	6013      	str	r3, [r2, #0]
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	4413      	add	r3, r2
 800cf62:	009b      	lsls	r3, r3, #2
 800cf64:	4a1f      	ldr	r2, [pc, #124]	; (800cfe4 <xTaskIncrementTick+0x164>)
 800cf66:	441a      	add	r2, r3
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	3304      	adds	r3, #4
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	4610      	mov	r0, r2
 800cf70:	f7fe ff1b 	bl	800bdaa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf78:	4b1b      	ldr	r3, [pc, #108]	; (800cfe8 <xTaskIncrementTick+0x168>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d3b8      	bcc.n	800cef4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cf82:	2301      	movs	r3, #1
 800cf84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf86:	e7b5      	b.n	800cef4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cf88:	4b17      	ldr	r3, [pc, #92]	; (800cfe8 <xTaskIncrementTick+0x168>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf8e:	4915      	ldr	r1, [pc, #84]	; (800cfe4 <xTaskIncrementTick+0x164>)
 800cf90:	4613      	mov	r3, r2
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	4413      	add	r3, r2
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	440b      	add	r3, r1
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d901      	bls.n	800cfa4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cfa4:	4b11      	ldr	r3, [pc, #68]	; (800cfec <xTaskIncrementTick+0x16c>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d007      	beq.n	800cfbc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cfac:	2301      	movs	r3, #1
 800cfae:	617b      	str	r3, [r7, #20]
 800cfb0:	e004      	b.n	800cfbc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cfb2:	4b0f      	ldr	r3, [pc, #60]	; (800cff0 <xTaskIncrementTick+0x170>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	4a0d      	ldr	r2, [pc, #52]	; (800cff0 <xTaskIncrementTick+0x170>)
 800cfba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cfbc:	697b      	ldr	r3, [r7, #20]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3718      	adds	r7, #24
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	20001184 	.word	0x20001184
 800cfcc:	20001160 	.word	0x20001160
 800cfd0:	20001114 	.word	0x20001114
 800cfd4:	20001118 	.word	0x20001118
 800cfd8:	20001174 	.word	0x20001174
 800cfdc:	2000117c 	.word	0x2000117c
 800cfe0:	20001164 	.word	0x20001164
 800cfe4:	20000c8c 	.word	0x20000c8c
 800cfe8:	20000c88 	.word	0x20000c88
 800cfec:	20001170 	.word	0x20001170
 800cff0:	2000116c 	.word	0x2000116c

0800cff4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cffa:	4b28      	ldr	r3, [pc, #160]	; (800d09c <vTaskSwitchContext+0xa8>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d003      	beq.n	800d00a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d002:	4b27      	ldr	r3, [pc, #156]	; (800d0a0 <vTaskSwitchContext+0xac>)
 800d004:	2201      	movs	r2, #1
 800d006:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d008:	e041      	b.n	800d08e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d00a:	4b25      	ldr	r3, [pc, #148]	; (800d0a0 <vTaskSwitchContext+0xac>)
 800d00c:	2200      	movs	r2, #0
 800d00e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d010:	4b24      	ldr	r3, [pc, #144]	; (800d0a4 <vTaskSwitchContext+0xb0>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	60fb      	str	r3, [r7, #12]
 800d016:	e010      	b.n	800d03a <vTaskSwitchContext+0x46>
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d10a      	bne.n	800d034 <vTaskSwitchContext+0x40>
	__asm volatile
 800d01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d022:	f383 8811 	msr	BASEPRI, r3
 800d026:	f3bf 8f6f 	isb	sy
 800d02a:	f3bf 8f4f 	dsb	sy
 800d02e:	607b      	str	r3, [r7, #4]
}
 800d030:	bf00      	nop
 800d032:	e7fe      	b.n	800d032 <vTaskSwitchContext+0x3e>
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	3b01      	subs	r3, #1
 800d038:	60fb      	str	r3, [r7, #12]
 800d03a:	491b      	ldr	r1, [pc, #108]	; (800d0a8 <vTaskSwitchContext+0xb4>)
 800d03c:	68fa      	ldr	r2, [r7, #12]
 800d03e:	4613      	mov	r3, r2
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	4413      	add	r3, r2
 800d044:	009b      	lsls	r3, r3, #2
 800d046:	440b      	add	r3, r1
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d0e4      	beq.n	800d018 <vTaskSwitchContext+0x24>
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	4613      	mov	r3, r2
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	4413      	add	r3, r2
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	4a13      	ldr	r2, [pc, #76]	; (800d0a8 <vTaskSwitchContext+0xb4>)
 800d05a:	4413      	add	r3, r2
 800d05c:	60bb      	str	r3, [r7, #8]
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	685a      	ldr	r2, [r3, #4]
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	605a      	str	r2, [r3, #4]
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	685a      	ldr	r2, [r3, #4]
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	3308      	adds	r3, #8
 800d070:	429a      	cmp	r2, r3
 800d072:	d104      	bne.n	800d07e <vTaskSwitchContext+0x8a>
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	685a      	ldr	r2, [r3, #4]
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	605a      	str	r2, [r3, #4]
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	4a09      	ldr	r2, [pc, #36]	; (800d0ac <vTaskSwitchContext+0xb8>)
 800d086:	6013      	str	r3, [r2, #0]
 800d088:	4a06      	ldr	r2, [pc, #24]	; (800d0a4 <vTaskSwitchContext+0xb0>)
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	6013      	str	r3, [r2, #0]
}
 800d08e:	bf00      	nop
 800d090:	3714      	adds	r7, #20
 800d092:	46bd      	mov	sp, r7
 800d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	20001184 	.word	0x20001184
 800d0a0:	20001170 	.word	0x20001170
 800d0a4:	20001164 	.word	0x20001164
 800d0a8:	20000c8c 	.word	0x20000c8c
 800d0ac:	20000c88 	.word	0x20000c88

0800d0b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10a      	bne.n	800d0d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	60fb      	str	r3, [r7, #12]
}
 800d0d2:	bf00      	nop
 800d0d4:	e7fe      	b.n	800d0d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0d6:	4b07      	ldr	r3, [pc, #28]	; (800d0f4 <vTaskPlaceOnEventList+0x44>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	3318      	adds	r3, #24
 800d0dc:	4619      	mov	r1, r3
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f7fe fe87 	bl	800bdf2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d0e4:	2101      	movs	r1, #1
 800d0e6:	6838      	ldr	r0, [r7, #0]
 800d0e8:	f000 fa7c 	bl	800d5e4 <prvAddCurrentTaskToDelayedList>
}
 800d0ec:	bf00      	nop
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}
 800d0f4:	20000c88 	.word	0x20000c88

0800d0f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b086      	sub	sp, #24
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d10a      	bne.n	800d120 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10e:	f383 8811 	msr	BASEPRI, r3
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	617b      	str	r3, [r7, #20]
}
 800d11c:	bf00      	nop
 800d11e:	e7fe      	b.n	800d11e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d120:	4b0a      	ldr	r3, [pc, #40]	; (800d14c <vTaskPlaceOnEventListRestricted+0x54>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	3318      	adds	r3, #24
 800d126:	4619      	mov	r1, r3
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f7fe fe3e 	bl	800bdaa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d002      	beq.n	800d13a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d138:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d13a:	6879      	ldr	r1, [r7, #4]
 800d13c:	68b8      	ldr	r0, [r7, #8]
 800d13e:	f000 fa51 	bl	800d5e4 <prvAddCurrentTaskToDelayedList>
	}
 800d142:	bf00      	nop
 800d144:	3718      	adds	r7, #24
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	20000c88 	.word	0x20000c88

0800d150 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b086      	sub	sp, #24
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d10a      	bne.n	800d17c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d16a:	f383 8811 	msr	BASEPRI, r3
 800d16e:	f3bf 8f6f 	isb	sy
 800d172:	f3bf 8f4f 	dsb	sy
 800d176:	60fb      	str	r3, [r7, #12]
}
 800d178:	bf00      	nop
 800d17a:	e7fe      	b.n	800d17a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	3318      	adds	r3, #24
 800d180:	4618      	mov	r0, r3
 800d182:	f7fe fe6f 	bl	800be64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d186:	4b1e      	ldr	r3, [pc, #120]	; (800d200 <xTaskRemoveFromEventList+0xb0>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d11d      	bne.n	800d1ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	3304      	adds	r3, #4
 800d192:	4618      	mov	r0, r3
 800d194:	f7fe fe66 	bl	800be64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d19c:	4b19      	ldr	r3, [pc, #100]	; (800d204 <xTaskRemoveFromEventList+0xb4>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d903      	bls.n	800d1ac <xTaskRemoveFromEventList+0x5c>
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a8:	4a16      	ldr	r2, [pc, #88]	; (800d204 <xTaskRemoveFromEventList+0xb4>)
 800d1aa:	6013      	str	r3, [r2, #0]
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	4413      	add	r3, r2
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	4a13      	ldr	r2, [pc, #76]	; (800d208 <xTaskRemoveFromEventList+0xb8>)
 800d1ba:	441a      	add	r2, r3
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	3304      	adds	r3, #4
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	4610      	mov	r0, r2
 800d1c4:	f7fe fdf1 	bl	800bdaa <vListInsertEnd>
 800d1c8:	e005      	b.n	800d1d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	3318      	adds	r3, #24
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	480e      	ldr	r0, [pc, #56]	; (800d20c <xTaskRemoveFromEventList+0xbc>)
 800d1d2:	f7fe fdea 	bl	800bdaa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1da:	4b0d      	ldr	r3, [pc, #52]	; (800d210 <xTaskRemoveFromEventList+0xc0>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d905      	bls.n	800d1f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d1e8:	4b0a      	ldr	r3, [pc, #40]	; (800d214 <xTaskRemoveFromEventList+0xc4>)
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	601a      	str	r2, [r3, #0]
 800d1ee:	e001      	b.n	800d1f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d1f4:	697b      	ldr	r3, [r7, #20]
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3718      	adds	r7, #24
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	20001184 	.word	0x20001184
 800d204:	20001164 	.word	0x20001164
 800d208:	20000c8c 	.word	0x20000c8c
 800d20c:	2000111c 	.word	0x2000111c
 800d210:	20000c88 	.word	0x20000c88
 800d214:	20001170 	.word	0x20001170

0800d218 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d218:	b480      	push	{r7}
 800d21a:	b083      	sub	sp, #12
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d220:	4b06      	ldr	r3, [pc, #24]	; (800d23c <vTaskInternalSetTimeOutState+0x24>)
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d228:	4b05      	ldr	r3, [pc, #20]	; (800d240 <vTaskInternalSetTimeOutState+0x28>)
 800d22a:	681a      	ldr	r2, [r3, #0]
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	605a      	str	r2, [r3, #4]
}
 800d230:	bf00      	nop
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr
 800d23c:	20001174 	.word	0x20001174
 800d240:	20001160 	.word	0x20001160

0800d244 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b088      	sub	sp, #32
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d10a      	bne.n	800d26a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d258:	f383 8811 	msr	BASEPRI, r3
 800d25c:	f3bf 8f6f 	isb	sy
 800d260:	f3bf 8f4f 	dsb	sy
 800d264:	613b      	str	r3, [r7, #16]
}
 800d266:	bf00      	nop
 800d268:	e7fe      	b.n	800d268 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d10a      	bne.n	800d286 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d274:	f383 8811 	msr	BASEPRI, r3
 800d278:	f3bf 8f6f 	isb	sy
 800d27c:	f3bf 8f4f 	dsb	sy
 800d280:	60fb      	str	r3, [r7, #12]
}
 800d282:	bf00      	nop
 800d284:	e7fe      	b.n	800d284 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d286:	f000 fe7d 	bl	800df84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d28a:	4b1d      	ldr	r3, [pc, #116]	; (800d300 <xTaskCheckForTimeOut+0xbc>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	69ba      	ldr	r2, [r7, #24]
 800d296:	1ad3      	subs	r3, r2, r3
 800d298:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2a2:	d102      	bne.n	800d2aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	61fb      	str	r3, [r7, #28]
 800d2a8:	e023      	b.n	800d2f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	4b15      	ldr	r3, [pc, #84]	; (800d304 <xTaskCheckForTimeOut+0xc0>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d007      	beq.n	800d2c6 <xTaskCheckForTimeOut+0x82>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	69ba      	ldr	r2, [r7, #24]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d302      	bcc.n	800d2c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	61fb      	str	r3, [r7, #28]
 800d2c4:	e015      	b.n	800d2f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	697a      	ldr	r2, [r7, #20]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d20b      	bcs.n	800d2e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	1ad2      	subs	r2, r2, r3
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7ff ff9b 	bl	800d218 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	61fb      	str	r3, [r7, #28]
 800d2e6:	e004      	b.n	800d2f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d2f2:	f000 fe77 	bl	800dfe4 <vPortExitCritical>

	return xReturn;
 800d2f6:	69fb      	ldr	r3, [r7, #28]
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3720      	adds	r7, #32
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	20001160 	.word	0x20001160
 800d304:	20001174 	.word	0x20001174

0800d308 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d308:	b480      	push	{r7}
 800d30a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d30c:	4b03      	ldr	r3, [pc, #12]	; (800d31c <vTaskMissedYield+0x14>)
 800d30e:	2201      	movs	r2, #1
 800d310:	601a      	str	r2, [r3, #0]
}
 800d312:	bf00      	nop
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr
 800d31c:	20001170 	.word	0x20001170

0800d320 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d328:	f000 f852 	bl	800d3d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d32c:	4b06      	ldr	r3, [pc, #24]	; (800d348 <prvIdleTask+0x28>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2b01      	cmp	r3, #1
 800d332:	d9f9      	bls.n	800d328 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d334:	4b05      	ldr	r3, [pc, #20]	; (800d34c <prvIdleTask+0x2c>)
 800d336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d33a:	601a      	str	r2, [r3, #0]
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d344:	e7f0      	b.n	800d328 <prvIdleTask+0x8>
 800d346:	bf00      	nop
 800d348:	20000c8c 	.word	0x20000c8c
 800d34c:	e000ed04 	.word	0xe000ed04

0800d350 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d356:	2300      	movs	r3, #0
 800d358:	607b      	str	r3, [r7, #4]
 800d35a:	e00c      	b.n	800d376 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	4613      	mov	r3, r2
 800d360:	009b      	lsls	r3, r3, #2
 800d362:	4413      	add	r3, r2
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	4a12      	ldr	r2, [pc, #72]	; (800d3b0 <prvInitialiseTaskLists+0x60>)
 800d368:	4413      	add	r3, r2
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7fe fcf0 	bl	800bd50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	3301      	adds	r3, #1
 800d374:	607b      	str	r3, [r7, #4]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2b37      	cmp	r3, #55	; 0x37
 800d37a:	d9ef      	bls.n	800d35c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d37c:	480d      	ldr	r0, [pc, #52]	; (800d3b4 <prvInitialiseTaskLists+0x64>)
 800d37e:	f7fe fce7 	bl	800bd50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d382:	480d      	ldr	r0, [pc, #52]	; (800d3b8 <prvInitialiseTaskLists+0x68>)
 800d384:	f7fe fce4 	bl	800bd50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d388:	480c      	ldr	r0, [pc, #48]	; (800d3bc <prvInitialiseTaskLists+0x6c>)
 800d38a:	f7fe fce1 	bl	800bd50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d38e:	480c      	ldr	r0, [pc, #48]	; (800d3c0 <prvInitialiseTaskLists+0x70>)
 800d390:	f7fe fcde 	bl	800bd50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d394:	480b      	ldr	r0, [pc, #44]	; (800d3c4 <prvInitialiseTaskLists+0x74>)
 800d396:	f7fe fcdb 	bl	800bd50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d39a:	4b0b      	ldr	r3, [pc, #44]	; (800d3c8 <prvInitialiseTaskLists+0x78>)
 800d39c:	4a05      	ldr	r2, [pc, #20]	; (800d3b4 <prvInitialiseTaskLists+0x64>)
 800d39e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d3a0:	4b0a      	ldr	r3, [pc, #40]	; (800d3cc <prvInitialiseTaskLists+0x7c>)
 800d3a2:	4a05      	ldr	r2, [pc, #20]	; (800d3b8 <prvInitialiseTaskLists+0x68>)
 800d3a4:	601a      	str	r2, [r3, #0]
}
 800d3a6:	bf00      	nop
 800d3a8:	3708      	adds	r7, #8
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	20000c8c 	.word	0x20000c8c
 800d3b4:	200010ec 	.word	0x200010ec
 800d3b8:	20001100 	.word	0x20001100
 800d3bc:	2000111c 	.word	0x2000111c
 800d3c0:	20001130 	.word	0x20001130
 800d3c4:	20001148 	.word	0x20001148
 800d3c8:	20001114 	.word	0x20001114
 800d3cc:	20001118 	.word	0x20001118

0800d3d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3d6:	e019      	b.n	800d40c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d3d8:	f000 fdd4 	bl	800df84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3dc:	4b10      	ldr	r3, [pc, #64]	; (800d420 <prvCheckTasksWaitingTermination+0x50>)
 800d3de:	68db      	ldr	r3, [r3, #12]
 800d3e0:	68db      	ldr	r3, [r3, #12]
 800d3e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	3304      	adds	r3, #4
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7fe fd3b 	bl	800be64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d3ee:	4b0d      	ldr	r3, [pc, #52]	; (800d424 <prvCheckTasksWaitingTermination+0x54>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	3b01      	subs	r3, #1
 800d3f4:	4a0b      	ldr	r2, [pc, #44]	; (800d424 <prvCheckTasksWaitingTermination+0x54>)
 800d3f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d3f8:	4b0b      	ldr	r3, [pc, #44]	; (800d428 <prvCheckTasksWaitingTermination+0x58>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	3b01      	subs	r3, #1
 800d3fe:	4a0a      	ldr	r2, [pc, #40]	; (800d428 <prvCheckTasksWaitingTermination+0x58>)
 800d400:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d402:	f000 fdef 	bl	800dfe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 f810 	bl	800d42c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d40c:	4b06      	ldr	r3, [pc, #24]	; (800d428 <prvCheckTasksWaitingTermination+0x58>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d1e1      	bne.n	800d3d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d414:	bf00      	nop
 800d416:	bf00      	nop
 800d418:	3708      	adds	r7, #8
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	20001130 	.word	0x20001130
 800d424:	2000115c 	.word	0x2000115c
 800d428:	20001144 	.word	0x20001144

0800d42c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d108      	bne.n	800d450 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d442:	4618      	mov	r0, r3
 800d444:	f000 ff8c 	bl	800e360 <vPortFree>
				vPortFree( pxTCB );
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f000 ff89 	bl	800e360 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d44e:	e018      	b.n	800d482 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d456:	2b01      	cmp	r3, #1
 800d458:	d103      	bne.n	800d462 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 ff80 	bl	800e360 <vPortFree>
	}
 800d460:	e00f      	b.n	800d482 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d468:	2b02      	cmp	r3, #2
 800d46a:	d00a      	beq.n	800d482 <prvDeleteTCB+0x56>
	__asm volatile
 800d46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d470:	f383 8811 	msr	BASEPRI, r3
 800d474:	f3bf 8f6f 	isb	sy
 800d478:	f3bf 8f4f 	dsb	sy
 800d47c:	60fb      	str	r3, [r7, #12]
}
 800d47e:	bf00      	nop
 800d480:	e7fe      	b.n	800d480 <prvDeleteTCB+0x54>
	}
 800d482:	bf00      	nop
 800d484:	3710      	adds	r7, #16
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
	...

0800d48c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d48c:	b480      	push	{r7}
 800d48e:	b083      	sub	sp, #12
 800d490:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d492:	4b0c      	ldr	r3, [pc, #48]	; (800d4c4 <prvResetNextTaskUnblockTime+0x38>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d104      	bne.n	800d4a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d49c:	4b0a      	ldr	r3, [pc, #40]	; (800d4c8 <prvResetNextTaskUnblockTime+0x3c>)
 800d49e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d4a4:	e008      	b.n	800d4b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4a6:	4b07      	ldr	r3, [pc, #28]	; (800d4c4 <prvResetNextTaskUnblockTime+0x38>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	68db      	ldr	r3, [r3, #12]
 800d4ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	4a04      	ldr	r2, [pc, #16]	; (800d4c8 <prvResetNextTaskUnblockTime+0x3c>)
 800d4b6:	6013      	str	r3, [r2, #0]
}
 800d4b8:	bf00      	nop
 800d4ba:	370c      	adds	r7, #12
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr
 800d4c4:	20001114 	.word	0x20001114
 800d4c8:	2000117c 	.word	0x2000117c

0800d4cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d4d2:	4b0b      	ldr	r3, [pc, #44]	; (800d500 <xTaskGetSchedulerState+0x34>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d102      	bne.n	800d4e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d4da:	2301      	movs	r3, #1
 800d4dc:	607b      	str	r3, [r7, #4]
 800d4de:	e008      	b.n	800d4f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4e0:	4b08      	ldr	r3, [pc, #32]	; (800d504 <xTaskGetSchedulerState+0x38>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d102      	bne.n	800d4ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d4e8:	2302      	movs	r3, #2
 800d4ea:	607b      	str	r3, [r7, #4]
 800d4ec:	e001      	b.n	800d4f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d4f2:	687b      	ldr	r3, [r7, #4]
	}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr
 800d500:	20001168 	.word	0x20001168
 800d504:	20001184 	.word	0x20001184

0800d508 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b086      	sub	sp, #24
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d514:	2300      	movs	r3, #0
 800d516:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d056      	beq.n	800d5cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d51e:	4b2e      	ldr	r3, [pc, #184]	; (800d5d8 <xTaskPriorityDisinherit+0xd0>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	693a      	ldr	r2, [r7, #16]
 800d524:	429a      	cmp	r2, r3
 800d526:	d00a      	beq.n	800d53e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52c:	f383 8811 	msr	BASEPRI, r3
 800d530:	f3bf 8f6f 	isb	sy
 800d534:	f3bf 8f4f 	dsb	sy
 800d538:	60fb      	str	r3, [r7, #12]
}
 800d53a:	bf00      	nop
 800d53c:	e7fe      	b.n	800d53c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d542:	2b00      	cmp	r3, #0
 800d544:	d10a      	bne.n	800d55c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54a:	f383 8811 	msr	BASEPRI, r3
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f3bf 8f4f 	dsb	sy
 800d556:	60bb      	str	r3, [r7, #8]
}
 800d558:	bf00      	nop
 800d55a:	e7fe      	b.n	800d55a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d560:	1e5a      	subs	r2, r3, #1
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d56e:	429a      	cmp	r2, r3
 800d570:	d02c      	beq.n	800d5cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d576:	2b00      	cmp	r3, #0
 800d578:	d128      	bne.n	800d5cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	3304      	adds	r3, #4
 800d57e:	4618      	mov	r0, r3
 800d580:	f7fe fc70 	bl	800be64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d590:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d59c:	4b0f      	ldr	r3, [pc, #60]	; (800d5dc <xTaskPriorityDisinherit+0xd4>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d903      	bls.n	800d5ac <xTaskPriorityDisinherit+0xa4>
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a8:	4a0c      	ldr	r2, [pc, #48]	; (800d5dc <xTaskPriorityDisinherit+0xd4>)
 800d5aa:	6013      	str	r3, [r2, #0]
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	4413      	add	r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	4a09      	ldr	r2, [pc, #36]	; (800d5e0 <xTaskPriorityDisinherit+0xd8>)
 800d5ba:	441a      	add	r2, r3
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	3304      	adds	r3, #4
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	4610      	mov	r0, r2
 800d5c4:	f7fe fbf1 	bl	800bdaa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d5cc:	697b      	ldr	r3, [r7, #20]
	}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3718      	adds	r7, #24
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	20000c88 	.word	0x20000c88
 800d5dc:	20001164 	.word	0x20001164
 800d5e0:	20000c8c 	.word	0x20000c8c

0800d5e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d5ee:	4b21      	ldr	r3, [pc, #132]	; (800d674 <prvAddCurrentTaskToDelayedList+0x90>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5f4:	4b20      	ldr	r3, [pc, #128]	; (800d678 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	3304      	adds	r3, #4
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7fe fc32 	bl	800be64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d606:	d10a      	bne.n	800d61e <prvAddCurrentTaskToDelayedList+0x3a>
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d007      	beq.n	800d61e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d60e:	4b1a      	ldr	r3, [pc, #104]	; (800d678 <prvAddCurrentTaskToDelayedList+0x94>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	3304      	adds	r3, #4
 800d614:	4619      	mov	r1, r3
 800d616:	4819      	ldr	r0, [pc, #100]	; (800d67c <prvAddCurrentTaskToDelayedList+0x98>)
 800d618:	f7fe fbc7 	bl	800bdaa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d61c:	e026      	b.n	800d66c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d61e:	68fa      	ldr	r2, [r7, #12]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4413      	add	r3, r2
 800d624:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d626:	4b14      	ldr	r3, [pc, #80]	; (800d678 <prvAddCurrentTaskToDelayedList+0x94>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	68ba      	ldr	r2, [r7, #8]
 800d62c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d62e:	68ba      	ldr	r2, [r7, #8]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	429a      	cmp	r2, r3
 800d634:	d209      	bcs.n	800d64a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d636:	4b12      	ldr	r3, [pc, #72]	; (800d680 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	4b0f      	ldr	r3, [pc, #60]	; (800d678 <prvAddCurrentTaskToDelayedList+0x94>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	3304      	adds	r3, #4
 800d640:	4619      	mov	r1, r3
 800d642:	4610      	mov	r0, r2
 800d644:	f7fe fbd5 	bl	800bdf2 <vListInsert>
}
 800d648:	e010      	b.n	800d66c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d64a:	4b0e      	ldr	r3, [pc, #56]	; (800d684 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	4b0a      	ldr	r3, [pc, #40]	; (800d678 <prvAddCurrentTaskToDelayedList+0x94>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	3304      	adds	r3, #4
 800d654:	4619      	mov	r1, r3
 800d656:	4610      	mov	r0, r2
 800d658:	f7fe fbcb 	bl	800bdf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d65c:	4b0a      	ldr	r3, [pc, #40]	; (800d688 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	68ba      	ldr	r2, [r7, #8]
 800d662:	429a      	cmp	r2, r3
 800d664:	d202      	bcs.n	800d66c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d666:	4a08      	ldr	r2, [pc, #32]	; (800d688 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	6013      	str	r3, [r2, #0]
}
 800d66c:	bf00      	nop
 800d66e:	3710      	adds	r7, #16
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	20001160 	.word	0x20001160
 800d678:	20000c88 	.word	0x20000c88
 800d67c:	20001148 	.word	0x20001148
 800d680:	20001118 	.word	0x20001118
 800d684:	20001114 	.word	0x20001114
 800d688:	2000117c 	.word	0x2000117c

0800d68c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b08a      	sub	sp, #40	; 0x28
 800d690:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d692:	2300      	movs	r3, #0
 800d694:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d696:	f000 fb07 	bl	800dca8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d69a:	4b1c      	ldr	r3, [pc, #112]	; (800d70c <xTimerCreateTimerTask+0x80>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d021      	beq.n	800d6e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d6aa:	1d3a      	adds	r2, r7, #4
 800d6ac:	f107 0108 	add.w	r1, r7, #8
 800d6b0:	f107 030c 	add.w	r3, r7, #12
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7fe fb31 	bl	800bd1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d6ba:	6879      	ldr	r1, [r7, #4]
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	9202      	str	r2, [sp, #8]
 800d6c2:	9301      	str	r3, [sp, #4]
 800d6c4:	2302      	movs	r3, #2
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	460a      	mov	r2, r1
 800d6cc:	4910      	ldr	r1, [pc, #64]	; (800d710 <xTimerCreateTimerTask+0x84>)
 800d6ce:	4811      	ldr	r0, [pc, #68]	; (800d714 <xTimerCreateTimerTask+0x88>)
 800d6d0:	f7ff f8de 	bl	800c890 <xTaskCreateStatic>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	4a10      	ldr	r2, [pc, #64]	; (800d718 <xTimerCreateTimerTask+0x8c>)
 800d6d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d6da:	4b0f      	ldr	r3, [pc, #60]	; (800d718 <xTimerCreateTimerTask+0x8c>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d10a      	bne.n	800d702 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	613b      	str	r3, [r7, #16]
}
 800d6fe:	bf00      	nop
 800d700:	e7fe      	b.n	800d700 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d702:	697b      	ldr	r3, [r7, #20]
}
 800d704:	4618      	mov	r0, r3
 800d706:	3718      	adds	r7, #24
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	200011b8 	.word	0x200011b8
 800d710:	08010248 	.word	0x08010248
 800d714:	0800d851 	.word	0x0800d851
 800d718:	200011bc 	.word	0x200011bc

0800d71c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b08a      	sub	sp, #40	; 0x28
 800d720:	af00      	add	r7, sp, #0
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
 800d728:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d72a:	2300      	movs	r3, #0
 800d72c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10a      	bne.n	800d74a <xTimerGenericCommand+0x2e>
	__asm volatile
 800d734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	623b      	str	r3, [r7, #32]
}
 800d746:	bf00      	nop
 800d748:	e7fe      	b.n	800d748 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d74a:	4b1a      	ldr	r3, [pc, #104]	; (800d7b4 <xTimerGenericCommand+0x98>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d02a      	beq.n	800d7a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	2b05      	cmp	r3, #5
 800d762:	dc18      	bgt.n	800d796 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d764:	f7ff feb2 	bl	800d4cc <xTaskGetSchedulerState>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b02      	cmp	r3, #2
 800d76c:	d109      	bne.n	800d782 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d76e:	4b11      	ldr	r3, [pc, #68]	; (800d7b4 <xTimerGenericCommand+0x98>)
 800d770:	6818      	ldr	r0, [r3, #0]
 800d772:	f107 0110 	add.w	r1, r7, #16
 800d776:	2300      	movs	r3, #0
 800d778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d77a:	f7fe fca1 	bl	800c0c0 <xQueueGenericSend>
 800d77e:	6278      	str	r0, [r7, #36]	; 0x24
 800d780:	e012      	b.n	800d7a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d782:	4b0c      	ldr	r3, [pc, #48]	; (800d7b4 <xTimerGenericCommand+0x98>)
 800d784:	6818      	ldr	r0, [r3, #0]
 800d786:	f107 0110 	add.w	r1, r7, #16
 800d78a:	2300      	movs	r3, #0
 800d78c:	2200      	movs	r2, #0
 800d78e:	f7fe fc97 	bl	800c0c0 <xQueueGenericSend>
 800d792:	6278      	str	r0, [r7, #36]	; 0x24
 800d794:	e008      	b.n	800d7a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d796:	4b07      	ldr	r3, [pc, #28]	; (800d7b4 <xTimerGenericCommand+0x98>)
 800d798:	6818      	ldr	r0, [r3, #0]
 800d79a:	f107 0110 	add.w	r1, r7, #16
 800d79e:	2300      	movs	r3, #0
 800d7a0:	683a      	ldr	r2, [r7, #0]
 800d7a2:	f7fe fd8b 	bl	800c2bc <xQueueGenericSendFromISR>
 800d7a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3728      	adds	r7, #40	; 0x28
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	200011b8 	.word	0x200011b8

0800d7b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b088      	sub	sp, #32
 800d7bc:	af02      	add	r7, sp, #8
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7c2:	4b22      	ldr	r3, [pc, #136]	; (800d84c <prvProcessExpiredTimer+0x94>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	68db      	ldr	r3, [r3, #12]
 800d7c8:	68db      	ldr	r3, [r3, #12]
 800d7ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	3304      	adds	r3, #4
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7fe fb47 	bl	800be64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7dc:	f003 0304 	and.w	r3, r3, #4
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d022      	beq.n	800d82a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	699a      	ldr	r2, [r3, #24]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	18d1      	adds	r1, r2, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	683a      	ldr	r2, [r7, #0]
 800d7f0:	6978      	ldr	r0, [r7, #20]
 800d7f2:	f000 f8d1 	bl	800d998 <prvInsertTimerInActiveList>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d01f      	beq.n	800d83c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	9300      	str	r3, [sp, #0]
 800d800:	2300      	movs	r3, #0
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	2100      	movs	r1, #0
 800d806:	6978      	ldr	r0, [r7, #20]
 800d808:	f7ff ff88 	bl	800d71c <xTimerGenericCommand>
 800d80c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d113      	bne.n	800d83c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d818:	f383 8811 	msr	BASEPRI, r3
 800d81c:	f3bf 8f6f 	isb	sy
 800d820:	f3bf 8f4f 	dsb	sy
 800d824:	60fb      	str	r3, [r7, #12]
}
 800d826:	bf00      	nop
 800d828:	e7fe      	b.n	800d828 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d830:	f023 0301 	bic.w	r3, r3, #1
 800d834:	b2da      	uxtb	r2, r3
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	6a1b      	ldr	r3, [r3, #32]
 800d840:	6978      	ldr	r0, [r7, #20]
 800d842:	4798      	blx	r3
}
 800d844:	bf00      	nop
 800d846:	3718      	adds	r7, #24
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	200011b0 	.word	0x200011b0

0800d850 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d858:	f107 0308 	add.w	r3, r7, #8
 800d85c:	4618      	mov	r0, r3
 800d85e:	f000 f857 	bl	800d910 <prvGetNextExpireTime>
 800d862:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	4619      	mov	r1, r3
 800d868:	68f8      	ldr	r0, [r7, #12]
 800d86a:	f000 f803 	bl	800d874 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d86e:	f000 f8d5 	bl	800da1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d872:	e7f1      	b.n	800d858 <prvTimerTask+0x8>

0800d874 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d87e:	f7ff fa43 	bl	800cd08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d882:	f107 0308 	add.w	r3, r7, #8
 800d886:	4618      	mov	r0, r3
 800d888:	f000 f866 	bl	800d958 <prvSampleTimeNow>
 800d88c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d130      	bne.n	800d8f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d10a      	bne.n	800d8b0 <prvProcessTimerOrBlockTask+0x3c>
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d806      	bhi.n	800d8b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d8a2:	f7ff fa3f 	bl	800cd24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d8a6:	68f9      	ldr	r1, [r7, #12]
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f7ff ff85 	bl	800d7b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d8ae:	e024      	b.n	800d8fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d008      	beq.n	800d8c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d8b6:	4b13      	ldr	r3, [pc, #76]	; (800d904 <prvProcessTimerOrBlockTask+0x90>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d101      	bne.n	800d8c4 <prvProcessTimerOrBlockTask+0x50>
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e000      	b.n	800d8c6 <prvProcessTimerOrBlockTask+0x52>
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d8c8:	4b0f      	ldr	r3, [pc, #60]	; (800d908 <prvProcessTimerOrBlockTask+0x94>)
 800d8ca:	6818      	ldr	r0, [r3, #0]
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	1ad3      	subs	r3, r2, r3
 800d8d2:	683a      	ldr	r2, [r7, #0]
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	f7fe ffa7 	bl	800c828 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d8da:	f7ff fa23 	bl	800cd24 <xTaskResumeAll>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d10a      	bne.n	800d8fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d8e4:	4b09      	ldr	r3, [pc, #36]	; (800d90c <prvProcessTimerOrBlockTask+0x98>)
 800d8e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8ea:	601a      	str	r2, [r3, #0]
 800d8ec:	f3bf 8f4f 	dsb	sy
 800d8f0:	f3bf 8f6f 	isb	sy
}
 800d8f4:	e001      	b.n	800d8fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d8f6:	f7ff fa15 	bl	800cd24 <xTaskResumeAll>
}
 800d8fa:	bf00      	nop
 800d8fc:	3710      	adds	r7, #16
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	200011b4 	.word	0x200011b4
 800d908:	200011b8 	.word	0x200011b8
 800d90c:	e000ed04 	.word	0xe000ed04

0800d910 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d910:	b480      	push	{r7}
 800d912:	b085      	sub	sp, #20
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d918:	4b0e      	ldr	r3, [pc, #56]	; (800d954 <prvGetNextExpireTime+0x44>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d101      	bne.n	800d926 <prvGetNextExpireTime+0x16>
 800d922:	2201      	movs	r2, #1
 800d924:	e000      	b.n	800d928 <prvGetNextExpireTime+0x18>
 800d926:	2200      	movs	r2, #0
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d105      	bne.n	800d940 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d934:	4b07      	ldr	r3, [pc, #28]	; (800d954 <prvGetNextExpireTime+0x44>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	68db      	ldr	r3, [r3, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	60fb      	str	r3, [r7, #12]
 800d93e:	e001      	b.n	800d944 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d940:	2300      	movs	r3, #0
 800d942:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d944:	68fb      	ldr	r3, [r7, #12]
}
 800d946:	4618      	mov	r0, r3
 800d948:	3714      	adds	r7, #20
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	200011b0 	.word	0x200011b0

0800d958 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d960:	f7ff fa7e 	bl	800ce60 <xTaskGetTickCount>
 800d964:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d966:	4b0b      	ldr	r3, [pc, #44]	; (800d994 <prvSampleTimeNow+0x3c>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	68fa      	ldr	r2, [r7, #12]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d205      	bcs.n	800d97c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d970:	f000 f936 	bl	800dbe0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2201      	movs	r2, #1
 800d978:	601a      	str	r2, [r3, #0]
 800d97a:	e002      	b.n	800d982 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d982:	4a04      	ldr	r2, [pc, #16]	; (800d994 <prvSampleTimeNow+0x3c>)
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d988:	68fb      	ldr	r3, [r7, #12]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	200011c0 	.word	0x200011c0

0800d998 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b086      	sub	sp, #24
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	607a      	str	r2, [r7, #4]
 800d9a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	68ba      	ldr	r2, [r7, #8]
 800d9ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	68fa      	ldr	r2, [r7, #12]
 800d9b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d812      	bhi.n	800d9e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	1ad2      	subs	r2, r2, r3
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	699b      	ldr	r3, [r3, #24]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d302      	bcc.n	800d9d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	617b      	str	r3, [r7, #20]
 800d9d0:	e01b      	b.n	800da0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d9d2:	4b10      	ldr	r3, [pc, #64]	; (800da14 <prvInsertTimerInActiveList+0x7c>)
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	3304      	adds	r3, #4
 800d9da:	4619      	mov	r1, r3
 800d9dc:	4610      	mov	r0, r2
 800d9de:	f7fe fa08 	bl	800bdf2 <vListInsert>
 800d9e2:	e012      	b.n	800da0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d206      	bcs.n	800d9fa <prvInsertTimerInActiveList+0x62>
 800d9ec:	68ba      	ldr	r2, [r7, #8]
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d302      	bcc.n	800d9fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	617b      	str	r3, [r7, #20]
 800d9f8:	e007      	b.n	800da0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d9fa:	4b07      	ldr	r3, [pc, #28]	; (800da18 <prvInsertTimerInActiveList+0x80>)
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	3304      	adds	r3, #4
 800da02:	4619      	mov	r1, r3
 800da04:	4610      	mov	r0, r2
 800da06:	f7fe f9f4 	bl	800bdf2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800da0a:	697b      	ldr	r3, [r7, #20]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3718      	adds	r7, #24
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	200011b4 	.word	0x200011b4
 800da18:	200011b0 	.word	0x200011b0

0800da1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b08e      	sub	sp, #56	; 0x38
 800da20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800da22:	e0ca      	b.n	800dbba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	da18      	bge.n	800da5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800da2a:	1d3b      	adds	r3, r7, #4
 800da2c:	3304      	adds	r3, #4
 800da2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800da30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da32:	2b00      	cmp	r3, #0
 800da34:	d10a      	bne.n	800da4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800da36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3a:	f383 8811 	msr	BASEPRI, r3
 800da3e:	f3bf 8f6f 	isb	sy
 800da42:	f3bf 8f4f 	dsb	sy
 800da46:	61fb      	str	r3, [r7, #28]
}
 800da48:	bf00      	nop
 800da4a:	e7fe      	b.n	800da4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800da4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da52:	6850      	ldr	r0, [r2, #4]
 800da54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da56:	6892      	ldr	r2, [r2, #8]
 800da58:	4611      	mov	r1, r2
 800da5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	f2c0 80ab 	blt.w	800dbba <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800da68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6a:	695b      	ldr	r3, [r3, #20]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d004      	beq.n	800da7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da72:	3304      	adds	r3, #4
 800da74:	4618      	mov	r0, r3
 800da76:	f7fe f9f5 	bl	800be64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da7a:	463b      	mov	r3, r7
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7ff ff6b 	bl	800d958 <prvSampleTimeNow>
 800da82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b09      	cmp	r3, #9
 800da88:	f200 8096 	bhi.w	800dbb8 <prvProcessReceivedCommands+0x19c>
 800da8c:	a201      	add	r2, pc, #4	; (adr r2, 800da94 <prvProcessReceivedCommands+0x78>)
 800da8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da92:	bf00      	nop
 800da94:	0800dabd 	.word	0x0800dabd
 800da98:	0800dabd 	.word	0x0800dabd
 800da9c:	0800dabd 	.word	0x0800dabd
 800daa0:	0800db31 	.word	0x0800db31
 800daa4:	0800db45 	.word	0x0800db45
 800daa8:	0800db8f 	.word	0x0800db8f
 800daac:	0800dabd 	.word	0x0800dabd
 800dab0:	0800dabd 	.word	0x0800dabd
 800dab4:	0800db31 	.word	0x0800db31
 800dab8:	0800db45 	.word	0x0800db45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dac2:	f043 0301 	orr.w	r3, r3, #1
 800dac6:	b2da      	uxtb	r2, r3
 800dac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad2:	699b      	ldr	r3, [r3, #24]
 800dad4:	18d1      	adds	r1, r2, r3
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dadc:	f7ff ff5c 	bl	800d998 <prvInsertTimerInActiveList>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d069      	beq.n	800dbba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae8:	6a1b      	ldr	r3, [r3, #32]
 800daea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800daee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800daf4:	f003 0304 	and.w	r3, r3, #4
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d05e      	beq.n	800dbba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dafc:	68ba      	ldr	r2, [r7, #8]
 800dafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db00:	699b      	ldr	r3, [r3, #24]
 800db02:	441a      	add	r2, r3
 800db04:	2300      	movs	r3, #0
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	2300      	movs	r3, #0
 800db0a:	2100      	movs	r1, #0
 800db0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db0e:	f7ff fe05 	bl	800d71c <xTimerGenericCommand>
 800db12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800db14:	6a3b      	ldr	r3, [r7, #32]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d14f      	bne.n	800dbba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800db1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1e:	f383 8811 	msr	BASEPRI, r3
 800db22:	f3bf 8f6f 	isb	sy
 800db26:	f3bf 8f4f 	dsb	sy
 800db2a:	61bb      	str	r3, [r7, #24]
}
 800db2c:	bf00      	nop
 800db2e:	e7fe      	b.n	800db2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db36:	f023 0301 	bic.w	r3, r3, #1
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800db42:	e03a      	b.n	800dbba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800db44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db4a:	f043 0301 	orr.w	r3, r3, #1
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800db56:	68ba      	ldr	r2, [r7, #8]
 800db58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800db5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5e:	699b      	ldr	r3, [r3, #24]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d10a      	bne.n	800db7a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800db64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db68:	f383 8811 	msr	BASEPRI, r3
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	617b      	str	r3, [r7, #20]
}
 800db76:	bf00      	nop
 800db78:	e7fe      	b.n	800db78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800db7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7c:	699a      	ldr	r2, [r3, #24]
 800db7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db80:	18d1      	adds	r1, r2, r3
 800db82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db88:	f7ff ff06 	bl	800d998 <prvInsertTimerInActiveList>
					break;
 800db8c:	e015      	b.n	800dbba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800db8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db94:	f003 0302 	and.w	r3, r3, #2
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d103      	bne.n	800dba4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800db9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db9e:	f000 fbdf 	bl	800e360 <vPortFree>
 800dba2:	e00a      	b.n	800dbba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbaa:	f023 0301 	bic.w	r3, r3, #1
 800dbae:	b2da      	uxtb	r2, r3
 800dbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dbb6:	e000      	b.n	800dbba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800dbb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dbba:	4b08      	ldr	r3, [pc, #32]	; (800dbdc <prvProcessReceivedCommands+0x1c0>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	1d39      	adds	r1, r7, #4
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fe fc16 	bl	800c3f4 <xQueueReceive>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f47f af2a 	bne.w	800da24 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dbd0:	bf00      	nop
 800dbd2:	bf00      	nop
 800dbd4:	3730      	adds	r7, #48	; 0x30
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	200011b8 	.word	0x200011b8

0800dbe0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b088      	sub	sp, #32
 800dbe4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dbe6:	e048      	b.n	800dc7a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dbe8:	4b2d      	ldr	r3, [pc, #180]	; (800dca0 <prvSwitchTimerLists+0xc0>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbf2:	4b2b      	ldr	r3, [pc, #172]	; (800dca0 <prvSwitchTimerLists+0xc0>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	68db      	ldr	r3, [r3, #12]
 800dbfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	3304      	adds	r3, #4
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7fe f92f 	bl	800be64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	6a1b      	ldr	r3, [r3, #32]
 800dc0a:	68f8      	ldr	r0, [r7, #12]
 800dc0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc14:	f003 0304 	and.w	r3, r3, #4
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d02e      	beq.n	800dc7a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	699b      	ldr	r3, [r3, #24]
 800dc20:	693a      	ldr	r2, [r7, #16]
 800dc22:	4413      	add	r3, r2
 800dc24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dc26:	68ba      	ldr	r2, [r7, #8]
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d90e      	bls.n	800dc4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	68ba      	ldr	r2, [r7, #8]
 800dc32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	68fa      	ldr	r2, [r7, #12]
 800dc38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc3a:	4b19      	ldr	r3, [pc, #100]	; (800dca0 <prvSwitchTimerLists+0xc0>)
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	3304      	adds	r3, #4
 800dc42:	4619      	mov	r1, r3
 800dc44:	4610      	mov	r0, r2
 800dc46:	f7fe f8d4 	bl	800bdf2 <vListInsert>
 800dc4a:	e016      	b.n	800dc7a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	9300      	str	r3, [sp, #0]
 800dc50:	2300      	movs	r3, #0
 800dc52:	693a      	ldr	r2, [r7, #16]
 800dc54:	2100      	movs	r1, #0
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f7ff fd60 	bl	800d71c <xTimerGenericCommand>
 800dc5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d10a      	bne.n	800dc7a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc68:	f383 8811 	msr	BASEPRI, r3
 800dc6c:	f3bf 8f6f 	isb	sy
 800dc70:	f3bf 8f4f 	dsb	sy
 800dc74:	603b      	str	r3, [r7, #0]
}
 800dc76:	bf00      	nop
 800dc78:	e7fe      	b.n	800dc78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc7a:	4b09      	ldr	r3, [pc, #36]	; (800dca0 <prvSwitchTimerLists+0xc0>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d1b1      	bne.n	800dbe8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dc84:	4b06      	ldr	r3, [pc, #24]	; (800dca0 <prvSwitchTimerLists+0xc0>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dc8a:	4b06      	ldr	r3, [pc, #24]	; (800dca4 <prvSwitchTimerLists+0xc4>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4a04      	ldr	r2, [pc, #16]	; (800dca0 <prvSwitchTimerLists+0xc0>)
 800dc90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dc92:	4a04      	ldr	r2, [pc, #16]	; (800dca4 <prvSwitchTimerLists+0xc4>)
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	6013      	str	r3, [r2, #0]
}
 800dc98:	bf00      	nop
 800dc9a:	3718      	adds	r7, #24
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	200011b0 	.word	0x200011b0
 800dca4:	200011b4 	.word	0x200011b4

0800dca8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dcae:	f000 f969 	bl	800df84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dcb2:	4b15      	ldr	r3, [pc, #84]	; (800dd08 <prvCheckForValidListAndQueue+0x60>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d120      	bne.n	800dcfc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dcba:	4814      	ldr	r0, [pc, #80]	; (800dd0c <prvCheckForValidListAndQueue+0x64>)
 800dcbc:	f7fe f848 	bl	800bd50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dcc0:	4813      	ldr	r0, [pc, #76]	; (800dd10 <prvCheckForValidListAndQueue+0x68>)
 800dcc2:	f7fe f845 	bl	800bd50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dcc6:	4b13      	ldr	r3, [pc, #76]	; (800dd14 <prvCheckForValidListAndQueue+0x6c>)
 800dcc8:	4a10      	ldr	r2, [pc, #64]	; (800dd0c <prvCheckForValidListAndQueue+0x64>)
 800dcca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dccc:	4b12      	ldr	r3, [pc, #72]	; (800dd18 <prvCheckForValidListAndQueue+0x70>)
 800dcce:	4a10      	ldr	r2, [pc, #64]	; (800dd10 <prvCheckForValidListAndQueue+0x68>)
 800dcd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	9300      	str	r3, [sp, #0]
 800dcd6:	4b11      	ldr	r3, [pc, #68]	; (800dd1c <prvCheckForValidListAndQueue+0x74>)
 800dcd8:	4a11      	ldr	r2, [pc, #68]	; (800dd20 <prvCheckForValidListAndQueue+0x78>)
 800dcda:	2110      	movs	r1, #16
 800dcdc:	200a      	movs	r0, #10
 800dcde:	f7fe f953 	bl	800bf88 <xQueueGenericCreateStatic>
 800dce2:	4603      	mov	r3, r0
 800dce4:	4a08      	ldr	r2, [pc, #32]	; (800dd08 <prvCheckForValidListAndQueue+0x60>)
 800dce6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dce8:	4b07      	ldr	r3, [pc, #28]	; (800dd08 <prvCheckForValidListAndQueue+0x60>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d005      	beq.n	800dcfc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dcf0:	4b05      	ldr	r3, [pc, #20]	; (800dd08 <prvCheckForValidListAndQueue+0x60>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	490b      	ldr	r1, [pc, #44]	; (800dd24 <prvCheckForValidListAndQueue+0x7c>)
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fe fd6c 	bl	800c7d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dcfc:	f000 f972 	bl	800dfe4 <vPortExitCritical>
}
 800dd00:	bf00      	nop
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	200011b8 	.word	0x200011b8
 800dd0c:	20001188 	.word	0x20001188
 800dd10:	2000119c 	.word	0x2000119c
 800dd14:	200011b0 	.word	0x200011b0
 800dd18:	200011b4 	.word	0x200011b4
 800dd1c:	20001264 	.word	0x20001264
 800dd20:	200011c4 	.word	0x200011c4
 800dd24:	08010250 	.word	0x08010250

0800dd28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	60b9      	str	r1, [r7, #8]
 800dd32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	3b04      	subs	r3, #4
 800dd38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dd40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	3b04      	subs	r3, #4
 800dd46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	f023 0201 	bic.w	r2, r3, #1
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	3b04      	subs	r3, #4
 800dd56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dd58:	4a0c      	ldr	r2, [pc, #48]	; (800dd8c <pxPortInitialiseStack+0x64>)
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	3b14      	subs	r3, #20
 800dd62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	3b04      	subs	r3, #4
 800dd6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f06f 0202 	mvn.w	r2, #2
 800dd76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	3b20      	subs	r3, #32
 800dd7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3714      	adds	r7, #20
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr
 800dd8c:	0800dd91 	.word	0x0800dd91

0800dd90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dd90:	b480      	push	{r7}
 800dd92:	b085      	sub	sp, #20
 800dd94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dd96:	2300      	movs	r3, #0
 800dd98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dd9a:	4b12      	ldr	r3, [pc, #72]	; (800dde4 <prvTaskExitError+0x54>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dda2:	d00a      	beq.n	800ddba <prvTaskExitError+0x2a>
	__asm volatile
 800dda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda8:	f383 8811 	msr	BASEPRI, r3
 800ddac:	f3bf 8f6f 	isb	sy
 800ddb0:	f3bf 8f4f 	dsb	sy
 800ddb4:	60fb      	str	r3, [r7, #12]
}
 800ddb6:	bf00      	nop
 800ddb8:	e7fe      	b.n	800ddb8 <prvTaskExitError+0x28>
	__asm volatile
 800ddba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddbe:	f383 8811 	msr	BASEPRI, r3
 800ddc2:	f3bf 8f6f 	isb	sy
 800ddc6:	f3bf 8f4f 	dsb	sy
 800ddca:	60bb      	str	r3, [r7, #8]
}
 800ddcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ddce:	bf00      	nop
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d0fc      	beq.n	800ddd0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ddd6:	bf00      	nop
 800ddd8:	bf00      	nop
 800ddda:	3714      	adds	r7, #20
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr
 800dde4:	2000014c 	.word	0x2000014c
	...

0800ddf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ddf0:	4b07      	ldr	r3, [pc, #28]	; (800de10 <pxCurrentTCBConst2>)
 800ddf2:	6819      	ldr	r1, [r3, #0]
 800ddf4:	6808      	ldr	r0, [r1, #0]
 800ddf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddfa:	f380 8809 	msr	PSP, r0
 800ddfe:	f3bf 8f6f 	isb	sy
 800de02:	f04f 0000 	mov.w	r0, #0
 800de06:	f380 8811 	msr	BASEPRI, r0
 800de0a:	4770      	bx	lr
 800de0c:	f3af 8000 	nop.w

0800de10 <pxCurrentTCBConst2>:
 800de10:	20000c88 	.word	0x20000c88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800de14:	bf00      	nop
 800de16:	bf00      	nop

0800de18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800de18:	4808      	ldr	r0, [pc, #32]	; (800de3c <prvPortStartFirstTask+0x24>)
 800de1a:	6800      	ldr	r0, [r0, #0]
 800de1c:	6800      	ldr	r0, [r0, #0]
 800de1e:	f380 8808 	msr	MSP, r0
 800de22:	f04f 0000 	mov.w	r0, #0
 800de26:	f380 8814 	msr	CONTROL, r0
 800de2a:	b662      	cpsie	i
 800de2c:	b661      	cpsie	f
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	f3bf 8f6f 	isb	sy
 800de36:	df00      	svc	0
 800de38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800de3a:	bf00      	nop
 800de3c:	e000ed08 	.word	0xe000ed08

0800de40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b086      	sub	sp, #24
 800de44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800de46:	4b46      	ldr	r3, [pc, #280]	; (800df60 <xPortStartScheduler+0x120>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	4a46      	ldr	r2, [pc, #280]	; (800df64 <xPortStartScheduler+0x124>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d10a      	bne.n	800de66 <xPortStartScheduler+0x26>
	__asm volatile
 800de50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de54:	f383 8811 	msr	BASEPRI, r3
 800de58:	f3bf 8f6f 	isb	sy
 800de5c:	f3bf 8f4f 	dsb	sy
 800de60:	613b      	str	r3, [r7, #16]
}
 800de62:	bf00      	nop
 800de64:	e7fe      	b.n	800de64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800de66:	4b3e      	ldr	r3, [pc, #248]	; (800df60 <xPortStartScheduler+0x120>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a3f      	ldr	r2, [pc, #252]	; (800df68 <xPortStartScheduler+0x128>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d10a      	bne.n	800de86 <xPortStartScheduler+0x46>
	__asm volatile
 800de70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de74:	f383 8811 	msr	BASEPRI, r3
 800de78:	f3bf 8f6f 	isb	sy
 800de7c:	f3bf 8f4f 	dsb	sy
 800de80:	60fb      	str	r3, [r7, #12]
}
 800de82:	bf00      	nop
 800de84:	e7fe      	b.n	800de84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800de86:	4b39      	ldr	r3, [pc, #228]	; (800df6c <xPortStartScheduler+0x12c>)
 800de88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	22ff      	movs	r2, #255	; 0xff
 800de96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dea0:	78fb      	ldrb	r3, [r7, #3]
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	4b31      	ldr	r3, [pc, #196]	; (800df70 <xPortStartScheduler+0x130>)
 800deac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800deae:	4b31      	ldr	r3, [pc, #196]	; (800df74 <xPortStartScheduler+0x134>)
 800deb0:	2207      	movs	r2, #7
 800deb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800deb4:	e009      	b.n	800deca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800deb6:	4b2f      	ldr	r3, [pc, #188]	; (800df74 <xPortStartScheduler+0x134>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	3b01      	subs	r3, #1
 800debc:	4a2d      	ldr	r2, [pc, #180]	; (800df74 <xPortStartScheduler+0x134>)
 800debe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dec0:	78fb      	ldrb	r3, [r7, #3]
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	005b      	lsls	r3, r3, #1
 800dec6:	b2db      	uxtb	r3, r3
 800dec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800deca:	78fb      	ldrb	r3, [r7, #3]
 800decc:	b2db      	uxtb	r3, r3
 800dece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ded2:	2b80      	cmp	r3, #128	; 0x80
 800ded4:	d0ef      	beq.n	800deb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ded6:	4b27      	ldr	r3, [pc, #156]	; (800df74 <xPortStartScheduler+0x134>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f1c3 0307 	rsb	r3, r3, #7
 800dede:	2b04      	cmp	r3, #4
 800dee0:	d00a      	beq.n	800def8 <xPortStartScheduler+0xb8>
	__asm volatile
 800dee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee6:	f383 8811 	msr	BASEPRI, r3
 800deea:	f3bf 8f6f 	isb	sy
 800deee:	f3bf 8f4f 	dsb	sy
 800def2:	60bb      	str	r3, [r7, #8]
}
 800def4:	bf00      	nop
 800def6:	e7fe      	b.n	800def6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800def8:	4b1e      	ldr	r3, [pc, #120]	; (800df74 <xPortStartScheduler+0x134>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	021b      	lsls	r3, r3, #8
 800defe:	4a1d      	ldr	r2, [pc, #116]	; (800df74 <xPortStartScheduler+0x134>)
 800df00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800df02:	4b1c      	ldr	r3, [pc, #112]	; (800df74 <xPortStartScheduler+0x134>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800df0a:	4a1a      	ldr	r2, [pc, #104]	; (800df74 <xPortStartScheduler+0x134>)
 800df0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	b2da      	uxtb	r2, r3
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800df16:	4b18      	ldr	r3, [pc, #96]	; (800df78 <xPortStartScheduler+0x138>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4a17      	ldr	r2, [pc, #92]	; (800df78 <xPortStartScheduler+0x138>)
 800df1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800df20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800df22:	4b15      	ldr	r3, [pc, #84]	; (800df78 <xPortStartScheduler+0x138>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	4a14      	ldr	r2, [pc, #80]	; (800df78 <xPortStartScheduler+0x138>)
 800df28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800df2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800df2e:	f000 f8dd 	bl	800e0ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800df32:	4b12      	ldr	r3, [pc, #72]	; (800df7c <xPortStartScheduler+0x13c>)
 800df34:	2200      	movs	r2, #0
 800df36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800df38:	f000 f8fc 	bl	800e134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800df3c:	4b10      	ldr	r3, [pc, #64]	; (800df80 <xPortStartScheduler+0x140>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4a0f      	ldr	r2, [pc, #60]	; (800df80 <xPortStartScheduler+0x140>)
 800df42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800df46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800df48:	f7ff ff66 	bl	800de18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800df4c:	f7ff f852 	bl	800cff4 <vTaskSwitchContext>
	prvTaskExitError();
 800df50:	f7ff ff1e 	bl	800dd90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800df54:	2300      	movs	r3, #0
}
 800df56:	4618      	mov	r0, r3
 800df58:	3718      	adds	r7, #24
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}
 800df5e:	bf00      	nop
 800df60:	e000ed00 	.word	0xe000ed00
 800df64:	410fc271 	.word	0x410fc271
 800df68:	410fc270 	.word	0x410fc270
 800df6c:	e000e400 	.word	0xe000e400
 800df70:	200012b4 	.word	0x200012b4
 800df74:	200012b8 	.word	0x200012b8
 800df78:	e000ed20 	.word	0xe000ed20
 800df7c:	2000014c 	.word	0x2000014c
 800df80:	e000ef34 	.word	0xe000ef34

0800df84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
	__asm volatile
 800df8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df8e:	f383 8811 	msr	BASEPRI, r3
 800df92:	f3bf 8f6f 	isb	sy
 800df96:	f3bf 8f4f 	dsb	sy
 800df9a:	607b      	str	r3, [r7, #4]
}
 800df9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800df9e:	4b0f      	ldr	r3, [pc, #60]	; (800dfdc <vPortEnterCritical+0x58>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	4a0d      	ldr	r2, [pc, #52]	; (800dfdc <vPortEnterCritical+0x58>)
 800dfa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dfa8:	4b0c      	ldr	r3, [pc, #48]	; (800dfdc <vPortEnterCritical+0x58>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	d10f      	bne.n	800dfd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dfb0:	4b0b      	ldr	r3, [pc, #44]	; (800dfe0 <vPortEnterCritical+0x5c>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	b2db      	uxtb	r3, r3
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d00a      	beq.n	800dfd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800dfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfbe:	f383 8811 	msr	BASEPRI, r3
 800dfc2:	f3bf 8f6f 	isb	sy
 800dfc6:	f3bf 8f4f 	dsb	sy
 800dfca:	603b      	str	r3, [r7, #0]
}
 800dfcc:	bf00      	nop
 800dfce:	e7fe      	b.n	800dfce <vPortEnterCritical+0x4a>
	}
}
 800dfd0:	bf00      	nop
 800dfd2:	370c      	adds	r7, #12
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr
 800dfdc:	2000014c 	.word	0x2000014c
 800dfe0:	e000ed04 	.word	0xe000ed04

0800dfe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dfea:	4b12      	ldr	r3, [pc, #72]	; (800e034 <vPortExitCritical+0x50>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d10a      	bne.n	800e008 <vPortExitCritical+0x24>
	__asm volatile
 800dff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff6:	f383 8811 	msr	BASEPRI, r3
 800dffa:	f3bf 8f6f 	isb	sy
 800dffe:	f3bf 8f4f 	dsb	sy
 800e002:	607b      	str	r3, [r7, #4]
}
 800e004:	bf00      	nop
 800e006:	e7fe      	b.n	800e006 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e008:	4b0a      	ldr	r3, [pc, #40]	; (800e034 <vPortExitCritical+0x50>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	3b01      	subs	r3, #1
 800e00e:	4a09      	ldr	r2, [pc, #36]	; (800e034 <vPortExitCritical+0x50>)
 800e010:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e012:	4b08      	ldr	r3, [pc, #32]	; (800e034 <vPortExitCritical+0x50>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d105      	bne.n	800e026 <vPortExitCritical+0x42>
 800e01a:	2300      	movs	r3, #0
 800e01c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	f383 8811 	msr	BASEPRI, r3
}
 800e024:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e026:	bf00      	nop
 800e028:	370c      	adds	r7, #12
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	2000014c 	.word	0x2000014c
	...

0800e040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e040:	f3ef 8009 	mrs	r0, PSP
 800e044:	f3bf 8f6f 	isb	sy
 800e048:	4b15      	ldr	r3, [pc, #84]	; (800e0a0 <pxCurrentTCBConst>)
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	f01e 0f10 	tst.w	lr, #16
 800e050:	bf08      	it	eq
 800e052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05a:	6010      	str	r0, [r2, #0]
 800e05c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e060:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e064:	f380 8811 	msr	BASEPRI, r0
 800e068:	f3bf 8f4f 	dsb	sy
 800e06c:	f3bf 8f6f 	isb	sy
 800e070:	f7fe ffc0 	bl	800cff4 <vTaskSwitchContext>
 800e074:	f04f 0000 	mov.w	r0, #0
 800e078:	f380 8811 	msr	BASEPRI, r0
 800e07c:	bc09      	pop	{r0, r3}
 800e07e:	6819      	ldr	r1, [r3, #0]
 800e080:	6808      	ldr	r0, [r1, #0]
 800e082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e086:	f01e 0f10 	tst.w	lr, #16
 800e08a:	bf08      	it	eq
 800e08c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e090:	f380 8809 	msr	PSP, r0
 800e094:	f3bf 8f6f 	isb	sy
 800e098:	4770      	bx	lr
 800e09a:	bf00      	nop
 800e09c:	f3af 8000 	nop.w

0800e0a0 <pxCurrentTCBConst>:
 800e0a0:	20000c88 	.word	0x20000c88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e0a4:	bf00      	nop
 800e0a6:	bf00      	nop

0800e0a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
	__asm volatile
 800e0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b2:	f383 8811 	msr	BASEPRI, r3
 800e0b6:	f3bf 8f6f 	isb	sy
 800e0ba:	f3bf 8f4f 	dsb	sy
 800e0be:	607b      	str	r3, [r7, #4]
}
 800e0c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e0c2:	f7fe fedd 	bl	800ce80 <xTaskIncrementTick>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d003      	beq.n	800e0d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e0cc:	4b06      	ldr	r3, [pc, #24]	; (800e0e8 <xPortSysTickHandler+0x40>)
 800e0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0d2:	601a      	str	r2, [r3, #0]
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	f383 8811 	msr	BASEPRI, r3
}
 800e0de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e0e0:	bf00      	nop
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	e000ed04 	.word	0xe000ed04

0800e0ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e0f0:	4b0b      	ldr	r3, [pc, #44]	; (800e120 <vPortSetupTimerInterrupt+0x34>)
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e0f6:	4b0b      	ldr	r3, [pc, #44]	; (800e124 <vPortSetupTimerInterrupt+0x38>)
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e0fc:	4b0a      	ldr	r3, [pc, #40]	; (800e128 <vPortSetupTimerInterrupt+0x3c>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a0a      	ldr	r2, [pc, #40]	; (800e12c <vPortSetupTimerInterrupt+0x40>)
 800e102:	fba2 2303 	umull	r2, r3, r2, r3
 800e106:	099b      	lsrs	r3, r3, #6
 800e108:	4a09      	ldr	r2, [pc, #36]	; (800e130 <vPortSetupTimerInterrupt+0x44>)
 800e10a:	3b01      	subs	r3, #1
 800e10c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e10e:	4b04      	ldr	r3, [pc, #16]	; (800e120 <vPortSetupTimerInterrupt+0x34>)
 800e110:	2207      	movs	r2, #7
 800e112:	601a      	str	r2, [r3, #0]
}
 800e114:	bf00      	nop
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop
 800e120:	e000e010 	.word	0xe000e010
 800e124:	e000e018 	.word	0xe000e018
 800e128:	20000140 	.word	0x20000140
 800e12c:	10624dd3 	.word	0x10624dd3
 800e130:	e000e014 	.word	0xe000e014

0800e134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e144 <vPortEnableVFP+0x10>
 800e138:	6801      	ldr	r1, [r0, #0]
 800e13a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e13e:	6001      	str	r1, [r0, #0]
 800e140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e142:	bf00      	nop
 800e144:	e000ed88 	.word	0xe000ed88

0800e148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e148:	b480      	push	{r7}
 800e14a:	b085      	sub	sp, #20
 800e14c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e14e:	f3ef 8305 	mrs	r3, IPSR
 800e152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2b0f      	cmp	r3, #15
 800e158:	d914      	bls.n	800e184 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e15a:	4a17      	ldr	r2, [pc, #92]	; (800e1b8 <vPortValidateInterruptPriority+0x70>)
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	4413      	add	r3, r2
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e164:	4b15      	ldr	r3, [pc, #84]	; (800e1bc <vPortValidateInterruptPriority+0x74>)
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	7afa      	ldrb	r2, [r7, #11]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d20a      	bcs.n	800e184 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e172:	f383 8811 	msr	BASEPRI, r3
 800e176:	f3bf 8f6f 	isb	sy
 800e17a:	f3bf 8f4f 	dsb	sy
 800e17e:	607b      	str	r3, [r7, #4]
}
 800e180:	bf00      	nop
 800e182:	e7fe      	b.n	800e182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e184:	4b0e      	ldr	r3, [pc, #56]	; (800e1c0 <vPortValidateInterruptPriority+0x78>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e18c:	4b0d      	ldr	r3, [pc, #52]	; (800e1c4 <vPortValidateInterruptPriority+0x7c>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	429a      	cmp	r2, r3
 800e192:	d90a      	bls.n	800e1aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e198:	f383 8811 	msr	BASEPRI, r3
 800e19c:	f3bf 8f6f 	isb	sy
 800e1a0:	f3bf 8f4f 	dsb	sy
 800e1a4:	603b      	str	r3, [r7, #0]
}
 800e1a6:	bf00      	nop
 800e1a8:	e7fe      	b.n	800e1a8 <vPortValidateInterruptPriority+0x60>
	}
 800e1aa:	bf00      	nop
 800e1ac:	3714      	adds	r7, #20
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr
 800e1b6:	bf00      	nop
 800e1b8:	e000e3f0 	.word	0xe000e3f0
 800e1bc:	200012b4 	.word	0x200012b4
 800e1c0:	e000ed0c 	.word	0xe000ed0c
 800e1c4:	200012b8 	.word	0x200012b8

0800e1c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b08a      	sub	sp, #40	; 0x28
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e1d4:	f7fe fd98 	bl	800cd08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e1d8:	4b5b      	ldr	r3, [pc, #364]	; (800e348 <pvPortMalloc+0x180>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d101      	bne.n	800e1e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e1e0:	f000 f920 	bl	800e424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e1e4:	4b59      	ldr	r3, [pc, #356]	; (800e34c <pvPortMalloc+0x184>)
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	4013      	ands	r3, r2
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	f040 8093 	bne.w	800e318 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d01d      	beq.n	800e234 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e1f8:	2208      	movs	r2, #8
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f003 0307 	and.w	r3, r3, #7
 800e206:	2b00      	cmp	r3, #0
 800e208:	d014      	beq.n	800e234 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f023 0307 	bic.w	r3, r3, #7
 800e210:	3308      	adds	r3, #8
 800e212:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f003 0307 	and.w	r3, r3, #7
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00a      	beq.n	800e234 <pvPortMalloc+0x6c>
	__asm volatile
 800e21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e222:	f383 8811 	msr	BASEPRI, r3
 800e226:	f3bf 8f6f 	isb	sy
 800e22a:	f3bf 8f4f 	dsb	sy
 800e22e:	617b      	str	r3, [r7, #20]
}
 800e230:	bf00      	nop
 800e232:	e7fe      	b.n	800e232 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d06e      	beq.n	800e318 <pvPortMalloc+0x150>
 800e23a:	4b45      	ldr	r3, [pc, #276]	; (800e350 <pvPortMalloc+0x188>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	429a      	cmp	r2, r3
 800e242:	d869      	bhi.n	800e318 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e244:	4b43      	ldr	r3, [pc, #268]	; (800e354 <pvPortMalloc+0x18c>)
 800e246:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e248:	4b42      	ldr	r3, [pc, #264]	; (800e354 <pvPortMalloc+0x18c>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e24e:	e004      	b.n	800e25a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e252:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	429a      	cmp	r2, r3
 800e262:	d903      	bls.n	800e26c <pvPortMalloc+0xa4>
 800e264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1f1      	bne.n	800e250 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e26c:	4b36      	ldr	r3, [pc, #216]	; (800e348 <pvPortMalloc+0x180>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e272:	429a      	cmp	r2, r3
 800e274:	d050      	beq.n	800e318 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e276:	6a3b      	ldr	r3, [r7, #32]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	2208      	movs	r2, #8
 800e27c:	4413      	add	r3, r2
 800e27e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	6a3b      	ldr	r3, [r7, #32]
 800e286:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28a:	685a      	ldr	r2, [r3, #4]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	1ad2      	subs	r2, r2, r3
 800e290:	2308      	movs	r3, #8
 800e292:	005b      	lsls	r3, r3, #1
 800e294:	429a      	cmp	r2, r3
 800e296:	d91f      	bls.n	800e2d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4413      	add	r3, r2
 800e29e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2a0:	69bb      	ldr	r3, [r7, #24]
 800e2a2:	f003 0307 	and.w	r3, r3, #7
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00a      	beq.n	800e2c0 <pvPortMalloc+0xf8>
	__asm volatile
 800e2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ae:	f383 8811 	msr	BASEPRI, r3
 800e2b2:	f3bf 8f6f 	isb	sy
 800e2b6:	f3bf 8f4f 	dsb	sy
 800e2ba:	613b      	str	r3, [r7, #16]
}
 800e2bc:	bf00      	nop
 800e2be:	e7fe      	b.n	800e2be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c2:	685a      	ldr	r2, [r3, #4]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	1ad2      	subs	r2, r2, r3
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e2d2:	69b8      	ldr	r0, [r7, #24]
 800e2d4:	f000 f908 	bl	800e4e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e2d8:	4b1d      	ldr	r3, [pc, #116]	; (800e350 <pvPortMalloc+0x188>)
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	1ad3      	subs	r3, r2, r3
 800e2e2:	4a1b      	ldr	r2, [pc, #108]	; (800e350 <pvPortMalloc+0x188>)
 800e2e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e2e6:	4b1a      	ldr	r3, [pc, #104]	; (800e350 <pvPortMalloc+0x188>)
 800e2e8:	681a      	ldr	r2, [r3, #0]
 800e2ea:	4b1b      	ldr	r3, [pc, #108]	; (800e358 <pvPortMalloc+0x190>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d203      	bcs.n	800e2fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e2f2:	4b17      	ldr	r3, [pc, #92]	; (800e350 <pvPortMalloc+0x188>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	4a18      	ldr	r2, [pc, #96]	; (800e358 <pvPortMalloc+0x190>)
 800e2f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fc:	685a      	ldr	r2, [r3, #4]
 800e2fe:	4b13      	ldr	r3, [pc, #76]	; (800e34c <pvPortMalloc+0x184>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	431a      	orrs	r2, r3
 800e304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e306:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30a:	2200      	movs	r2, #0
 800e30c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e30e:	4b13      	ldr	r3, [pc, #76]	; (800e35c <pvPortMalloc+0x194>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	3301      	adds	r3, #1
 800e314:	4a11      	ldr	r2, [pc, #68]	; (800e35c <pvPortMalloc+0x194>)
 800e316:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e318:	f7fe fd04 	bl	800cd24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e31c:	69fb      	ldr	r3, [r7, #28]
 800e31e:	f003 0307 	and.w	r3, r3, #7
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00a      	beq.n	800e33c <pvPortMalloc+0x174>
	__asm volatile
 800e326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32a:	f383 8811 	msr	BASEPRI, r3
 800e32e:	f3bf 8f6f 	isb	sy
 800e332:	f3bf 8f4f 	dsb	sy
 800e336:	60fb      	str	r3, [r7, #12]
}
 800e338:	bf00      	nop
 800e33a:	e7fe      	b.n	800e33a <pvPortMalloc+0x172>
	return pvReturn;
 800e33c:	69fb      	ldr	r3, [r7, #28]
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3728      	adds	r7, #40	; 0x28
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	20004ec4 	.word	0x20004ec4
 800e34c:	20004ed8 	.word	0x20004ed8
 800e350:	20004ec8 	.word	0x20004ec8
 800e354:	20004ebc 	.word	0x20004ebc
 800e358:	20004ecc 	.word	0x20004ecc
 800e35c:	20004ed0 	.word	0x20004ed0

0800e360 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b086      	sub	sp, #24
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d04d      	beq.n	800e40e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e372:	2308      	movs	r3, #8
 800e374:	425b      	negs	r3, r3
 800e376:	697a      	ldr	r2, [r7, #20]
 800e378:	4413      	add	r3, r2
 800e37a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	685a      	ldr	r2, [r3, #4]
 800e384:	4b24      	ldr	r3, [pc, #144]	; (800e418 <vPortFree+0xb8>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4013      	ands	r3, r2
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d10a      	bne.n	800e3a4 <vPortFree+0x44>
	__asm volatile
 800e38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e392:	f383 8811 	msr	BASEPRI, r3
 800e396:	f3bf 8f6f 	isb	sy
 800e39a:	f3bf 8f4f 	dsb	sy
 800e39e:	60fb      	str	r3, [r7, #12]
}
 800e3a0:	bf00      	nop
 800e3a2:	e7fe      	b.n	800e3a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d00a      	beq.n	800e3c2 <vPortFree+0x62>
	__asm volatile
 800e3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b0:	f383 8811 	msr	BASEPRI, r3
 800e3b4:	f3bf 8f6f 	isb	sy
 800e3b8:	f3bf 8f4f 	dsb	sy
 800e3bc:	60bb      	str	r3, [r7, #8]
}
 800e3be:	bf00      	nop
 800e3c0:	e7fe      	b.n	800e3c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	685a      	ldr	r2, [r3, #4]
 800e3c6:	4b14      	ldr	r3, [pc, #80]	; (800e418 <vPortFree+0xb8>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	4013      	ands	r3, r2
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d01e      	beq.n	800e40e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d11a      	bne.n	800e40e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	685a      	ldr	r2, [r3, #4]
 800e3dc:	4b0e      	ldr	r3, [pc, #56]	; (800e418 <vPortFree+0xb8>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	43db      	mvns	r3, r3
 800e3e2:	401a      	ands	r2, r3
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e3e8:	f7fe fc8e 	bl	800cd08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	685a      	ldr	r2, [r3, #4]
 800e3f0:	4b0a      	ldr	r3, [pc, #40]	; (800e41c <vPortFree+0xbc>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	4a09      	ldr	r2, [pc, #36]	; (800e41c <vPortFree+0xbc>)
 800e3f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e3fa:	6938      	ldr	r0, [r7, #16]
 800e3fc:	f000 f874 	bl	800e4e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e400:	4b07      	ldr	r3, [pc, #28]	; (800e420 <vPortFree+0xc0>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	3301      	adds	r3, #1
 800e406:	4a06      	ldr	r2, [pc, #24]	; (800e420 <vPortFree+0xc0>)
 800e408:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e40a:	f7fe fc8b 	bl	800cd24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e40e:	bf00      	nop
 800e410:	3718      	adds	r7, #24
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	20004ed8 	.word	0x20004ed8
 800e41c:	20004ec8 	.word	0x20004ec8
 800e420:	20004ed4 	.word	0x20004ed4

0800e424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e424:	b480      	push	{r7}
 800e426:	b085      	sub	sp, #20
 800e428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e42a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e42e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e430:	4b27      	ldr	r3, [pc, #156]	; (800e4d0 <prvHeapInit+0xac>)
 800e432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f003 0307 	and.w	r3, r3, #7
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d00c      	beq.n	800e458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	3307      	adds	r3, #7
 800e442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f023 0307 	bic.w	r3, r3, #7
 800e44a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e44c:	68ba      	ldr	r2, [r7, #8]
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	1ad3      	subs	r3, r2, r3
 800e452:	4a1f      	ldr	r2, [pc, #124]	; (800e4d0 <prvHeapInit+0xac>)
 800e454:	4413      	add	r3, r2
 800e456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e45c:	4a1d      	ldr	r2, [pc, #116]	; (800e4d4 <prvHeapInit+0xb0>)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e462:	4b1c      	ldr	r3, [pc, #112]	; (800e4d4 <prvHeapInit+0xb0>)
 800e464:	2200      	movs	r2, #0
 800e466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	68ba      	ldr	r2, [r7, #8]
 800e46c:	4413      	add	r3, r2
 800e46e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e470:	2208      	movs	r2, #8
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	1a9b      	subs	r3, r3, r2
 800e476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f023 0307 	bic.w	r3, r3, #7
 800e47e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	4a15      	ldr	r2, [pc, #84]	; (800e4d8 <prvHeapInit+0xb4>)
 800e484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e486:	4b14      	ldr	r3, [pc, #80]	; (800e4d8 <prvHeapInit+0xb4>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2200      	movs	r2, #0
 800e48c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e48e:	4b12      	ldr	r3, [pc, #72]	; (800e4d8 <prvHeapInit+0xb4>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	2200      	movs	r2, #0
 800e494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	68fa      	ldr	r2, [r7, #12]
 800e49e:	1ad2      	subs	r2, r2, r3
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e4a4:	4b0c      	ldr	r3, [pc, #48]	; (800e4d8 <prvHeapInit+0xb4>)
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	4a0a      	ldr	r2, [pc, #40]	; (800e4dc <prvHeapInit+0xb8>)
 800e4b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	685b      	ldr	r3, [r3, #4]
 800e4b8:	4a09      	ldr	r2, [pc, #36]	; (800e4e0 <prvHeapInit+0xbc>)
 800e4ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e4bc:	4b09      	ldr	r3, [pc, #36]	; (800e4e4 <prvHeapInit+0xc0>)
 800e4be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e4c2:	601a      	str	r2, [r3, #0]
}
 800e4c4:	bf00      	nop
 800e4c6:	3714      	adds	r7, #20
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ce:	4770      	bx	lr
 800e4d0:	200012bc 	.word	0x200012bc
 800e4d4:	20004ebc 	.word	0x20004ebc
 800e4d8:	20004ec4 	.word	0x20004ec4
 800e4dc:	20004ecc 	.word	0x20004ecc
 800e4e0:	20004ec8 	.word	0x20004ec8
 800e4e4:	20004ed8 	.word	0x20004ed8

0800e4e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b085      	sub	sp, #20
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e4f0:	4b28      	ldr	r3, [pc, #160]	; (800e594 <prvInsertBlockIntoFreeList+0xac>)
 800e4f2:	60fb      	str	r3, [r7, #12]
 800e4f4:	e002      	b.n	800e4fc <prvInsertBlockIntoFreeList+0x14>
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	60fb      	str	r3, [r7, #12]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	429a      	cmp	r2, r3
 800e504:	d8f7      	bhi.n	800e4f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	68ba      	ldr	r2, [r7, #8]
 800e510:	4413      	add	r3, r2
 800e512:	687a      	ldr	r2, [r7, #4]
 800e514:	429a      	cmp	r2, r3
 800e516:	d108      	bne.n	800e52a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	685a      	ldr	r2, [r3, #4]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	441a      	add	r2, r3
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	68ba      	ldr	r2, [r7, #8]
 800e534:	441a      	add	r2, r3
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d118      	bne.n	800e570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	4b15      	ldr	r3, [pc, #84]	; (800e598 <prvInsertBlockIntoFreeList+0xb0>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	429a      	cmp	r2, r3
 800e548:	d00d      	beq.n	800e566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	685a      	ldr	r2, [r3, #4]
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	441a      	add	r2, r3
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	681a      	ldr	r2, [r3, #0]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	601a      	str	r2, [r3, #0]
 800e564:	e008      	b.n	800e578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e566:	4b0c      	ldr	r3, [pc, #48]	; (800e598 <prvInsertBlockIntoFreeList+0xb0>)
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	601a      	str	r2, [r3, #0]
 800e56e:	e003      	b.n	800e578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e578:	68fa      	ldr	r2, [r7, #12]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d002      	beq.n	800e586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	687a      	ldr	r2, [r7, #4]
 800e584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e586:	bf00      	nop
 800e588:	3714      	adds	r7, #20
 800e58a:	46bd      	mov	sp, r7
 800e58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e590:	4770      	bx	lr
 800e592:	bf00      	nop
 800e594:	20004ebc 	.word	0x20004ebc
 800e598:	20004ec4 	.word	0x20004ec4

0800e59c <_ICM20948_SelectUserBank>:
#define ICM20948_ENABLE_SENSORS 0x3F
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b08a      	sub	sp, #40	; 0x28
 800e5a0:	af04      	add	r7, sp, #16
 800e5a2:	60f8      	str	r0, [r7, #12]
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	607a      	str	r2, [r7, #4]
 800e5a8:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	011b      	lsls	r3, r3, #4
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800e5b8:	7afb      	ldrb	r3, [r7, #11]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d101      	bne.n	800e5c2 <_ICM20948_SelectUserBank+0x26>
 800e5be:	2368      	movs	r3, #104	; 0x68
 800e5c0:	e000      	b.n	800e5c4 <_ICM20948_SelectUserBank+0x28>
 800e5c2:	2369      	movs	r3, #105	; 0x69
 800e5c4:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800e5c6:	7dbb      	ldrb	r3, [r7, #22]
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	005b      	lsls	r3, r3, #1
 800e5cc:	b299      	uxth	r1, r3
 800e5ce:	230a      	movs	r3, #10
 800e5d0:	9302      	str	r3, [sp, #8]
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	9301      	str	r3, [sp, #4]
 800e5d6:	f107 0315 	add.w	r3, r7, #21
 800e5da:	9300      	str	r3, [sp, #0]
 800e5dc:	2301      	movs	r3, #1
 800e5de:	227f      	movs	r2, #127	; 0x7f
 800e5e0:	68f8      	ldr	r0, [r7, #12]
 800e5e2:	f7f9 f965 	bl	80078b0 <HAL_I2C_Mem_Write>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800e5ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3718      	adds	r7, #24
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b088      	sub	sp, #32
 800e5f8:	af04      	add	r7, sp, #16
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	4608      	mov	r0, r1
 800e5fe:	4611      	mov	r1, r2
 800e600:	461a      	mov	r2, r3
 800e602:	4603      	mov	r3, r0
 800e604:	70fb      	strb	r3, [r7, #3]
 800e606:	460b      	mov	r3, r1
 800e608:	70bb      	strb	r3, [r7, #2]
 800e60a:	4613      	mov	r3, r2
 800e60c:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800e60e:	2300      	movs	r3, #0
 800e610:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800e612:	78fb      	ldrb	r3, [r7, #3]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d101      	bne.n	800e61c <_ICM20948_WriteByte+0x28>
 800e618:	2368      	movs	r3, #104	; 0x68
 800e61a:	e000      	b.n	800e61e <_ICM20948_WriteByte+0x2a>
 800e61c:	2369      	movs	r3, #105	; 0x69
 800e61e:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 800e620:	7bbb      	ldrb	r3, [r7, #14]
 800e622:	b29b      	uxth	r3, r3
 800e624:	005b      	lsls	r3, r3, #1
 800e626:	b299      	uxth	r1, r3
 800e628:	78bb      	ldrb	r3, [r7, #2]
 800e62a:	b29a      	uxth	r2, r3
 800e62c:	230a      	movs	r3, #10
 800e62e:	9302      	str	r3, [sp, #8]
 800e630:	2301      	movs	r3, #1
 800e632:	9301      	str	r3, [sp, #4]
 800e634:	1c7b      	adds	r3, r7, #1
 800e636:	9300      	str	r3, [sp, #0]
 800e638:	2301      	movs	r3, #1
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f7f9 f938 	bl	80078b0 <HAL_I2C_Mem_Write>
 800e640:	4603      	mov	r3, r0
 800e642:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800e644:	7bfb      	ldrb	r3, [r7, #15]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3710      	adds	r7, #16
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity) {
 800e64e:	b580      	push	{r7, lr}
 800e650:	b084      	sub	sp, #16
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
 800e656:	460b      	mov	r3, r1
 800e658:	70fb      	strb	r3, [r7, #3]
 800e65a:	4613      	mov	r3, r2
 800e65c:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800e65e:	2300      	movs	r3, #0
 800e660:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800e662:	78fb      	ldrb	r3, [r7, #3]
 800e664:	2200      	movs	r2, #0
 800e666:	4619      	mov	r1, r3
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f7ff ff97 	bl	800e59c <_ICM20948_SelectUserBank>
 800e66e:	4603      	mov	r3, r0
 800e670:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800e672:	78f9      	ldrb	r1, [r7, #3]
 800e674:	2380      	movs	r3, #128	; 0x80
 800e676:	2206      	movs	r2, #6
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f7ff ffbb 	bl	800e5f4 <_ICM20948_WriteByte>
 800e67e:	4603      	mov	r3, r0
 800e680:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 800e682:	20c8      	movs	r0, #200	; 0xc8
 800e684:	f7f8 f83a 	bl	80066fc <HAL_Delay>

	status = _ICM20948_WriteByte(
 800e688:	78f9      	ldrb	r1, [r7, #3]
 800e68a:	2301      	movs	r3, #1
 800e68c:	2206      	movs	r2, #6
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f7ff ffb0 	bl	800e5f4 <_ICM20948_WriteByte>
 800e694:	4603      	mov	r3, r0
 800e696:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); */ // For some reason this needs to be tested

	// disable accelerometer
	status = _ICM20948_WriteByte(
 800e698:	78f9      	ldrb	r1, [r7, #3]
 800e69a:	2338      	movs	r3, #56	; 0x38
 800e69c:	2207      	movs	r2, #7
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7ff ffa8 	bl	800e5f4 <_ICM20948_WriteByte>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	73fb      	strb	r3, [r7, #15]
				hi2c,
				selectI2cAddress,
				ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
				0x38);

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 800e6a8:	78fb      	ldrb	r3, [r7, #3]
 800e6aa:	2202      	movs	r2, #2
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f7ff ff74 	bl	800e59c <_ICM20948_SelectUserBank>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			3 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << BIT_1|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 800e6b8:	78bb      	ldrb	r3, [r7, #2]
 800e6ba:	005b      	lsls	r3, r3, #1
 800e6bc:	b25b      	sxtb	r3, r3
 800e6be:	f043 0319 	orr.w	r3, r3, #25
 800e6c2:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800e6c4:	b2db      	uxtb	r3, r3
 800e6c6:	78f9      	ldrb	r1, [r7, #3]
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f7ff ff92 	bl	800e5f4 <_ICM20948_WriteByte>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	73fb      	strb	r3, [r7, #15]
//			hi2c,
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
//			0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 800e6d4:	78f9      	ldrb	r1, [r7, #3]
 800e6d6:	2304      	movs	r3, #4
 800e6d8:	2200      	movs	r2, #0
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f7ff ff8a 	bl	800e5f4 <_ICM20948_WriteByte>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	73fb      	strb	r3, [r7, #15]
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
//			0x04); // Don't understand how this works


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800e6e4:	78fb      	ldrb	r3, [r7, #3]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f7ff ff56 	bl	800e59c <_ICM20948_SelectUserBank>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	73fb      	strb	r3, [r7, #15]
//
	status = _ICM20948_WriteByte(
 800e6f4:	78f9      	ldrb	r1, [r7, #3]
 800e6f6:	2302      	movs	r3, #2
 800e6f8:	220f      	movs	r2, #15
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f7ff ff7a 	bl	800e5f4 <_ICM20948_WriteByte>
 800e700:	4603      	mov	r3, r0
 800e702:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

//	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
}
 800e704:	bf00      	nop
 800e706:	3710      	adds	r7, #16
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}

0800e70c <OLED_Refresh_Gram>:
#include "oledfont.h"

uint8_t OLED_GRAM[128][8];

void OLED_Refresh_Gram(void)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b082      	sub	sp, #8
 800e710:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<CHAR_W;i++)
 800e712:	2300      	movs	r3, #0
 800e714:	71fb      	strb	r3, [r7, #7]
 800e716:	e026      	b.n	800e766 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 800e718:	79fb      	ldrb	r3, [r7, #7]
 800e71a:	3b50      	subs	r3, #80	; 0x50
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	2100      	movs	r1, #0
 800e720:	4618      	mov	r0, r3
 800e722:	f000 f82b 	bl	800e77c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 800e726:	2100      	movs	r1, #0
 800e728:	2000      	movs	r0, #0
 800e72a:	f000 f827 	bl	800e77c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 800e72e:	2100      	movs	r1, #0
 800e730:	2010      	movs	r0, #16
 800e732:	f000 f823 	bl	800e77c <OLED_WR_Byte>
		for(n=0;n<SCREEN_W;n++) OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 800e736:	2300      	movs	r3, #0
 800e738:	71bb      	strb	r3, [r7, #6]
 800e73a:	e00d      	b.n	800e758 <OLED_Refresh_Gram+0x4c>
 800e73c:	79ba      	ldrb	r2, [r7, #6]
 800e73e:	79fb      	ldrb	r3, [r7, #7]
 800e740:	490d      	ldr	r1, [pc, #52]	; (800e778 <OLED_Refresh_Gram+0x6c>)
 800e742:	00d2      	lsls	r2, r2, #3
 800e744:	440a      	add	r2, r1
 800e746:	4413      	add	r3, r2
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	2101      	movs	r1, #1
 800e74c:	4618      	mov	r0, r3
 800e74e:	f000 f815 	bl	800e77c <OLED_WR_Byte>
 800e752:	79bb      	ldrb	r3, [r7, #6]
 800e754:	3301      	adds	r3, #1
 800e756:	71bb      	strb	r3, [r7, #6]
 800e758:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	daed      	bge.n	800e73c <OLED_Refresh_Gram+0x30>
	for(i=0;i<CHAR_W;i++)
 800e760:	79fb      	ldrb	r3, [r7, #7]
 800e762:	3301      	adds	r3, #1
 800e764:	71fb      	strb	r3, [r7, #7]
 800e766:	79fb      	ldrb	r3, [r7, #7]
 800e768:	2b07      	cmp	r3, #7
 800e76a:	d9d5      	bls.n	800e718 <OLED_Refresh_Gram+0xc>
	}
}
 800e76c:	bf00      	nop
 800e76e:	bf00      	nop
 800e770:	3708      	adds	r7, #8
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	20004edc 	.word	0x20004edc

0800e77c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b084      	sub	sp, #16
 800e780:	af00      	add	r7, sp, #0
 800e782:	4603      	mov	r3, r0
 800e784:	460a      	mov	r2, r1
 800e786:	71fb      	strb	r3, [r7, #7]
 800e788:	4613      	mov	r3, r2
 800e78a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
    if(cmd)  OLED_RS_Set(); //CHANGE: OLED_RS_H
 800e78c:	79bb      	ldrb	r3, [r7, #6]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d006      	beq.n	800e7a0 <OLED_WR_Byte+0x24>
 800e792:	2201      	movs	r2, #1
 800e794:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e798:	481c      	ldr	r0, [pc, #112]	; (800e80c <OLED_WR_Byte+0x90>)
 800e79a:	f7f8 ff13 	bl	80075c4 <HAL_GPIO_WritePin>
 800e79e:	e005      	b.n	800e7ac <OLED_WR_Byte+0x30>
    else OLED_RS_Clr(); //CHANGE: OLED_RS_L
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e7a6:	4819      	ldr	r0, [pc, #100]	; (800e80c <OLED_WR_Byte+0x90>)
 800e7a8:	f7f8 ff0c 	bl	80075c4 <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	73fb      	strb	r3, [r7, #15]
 800e7b0:	e01e      	b.n	800e7f0 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();//CHANGE: OLED_SCLK_L
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	2120      	movs	r1, #32
 800e7b6:	4815      	ldr	r0, [pc, #84]	; (800e80c <OLED_WR_Byte+0x90>)
 800e7b8:	f7f8 ff04 	bl	80075c4 <HAL_GPIO_WritePin>
		if(dat&0x80)OLED_SDIN_Set(); //CHANGE: OLED_SDIN_H
 800e7bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	da05      	bge.n	800e7d0 <OLED_WR_Byte+0x54>
 800e7c4:	2201      	movs	r2, #1
 800e7c6:	2140      	movs	r1, #64	; 0x40
 800e7c8:	4810      	ldr	r0, [pc, #64]	; (800e80c <OLED_WR_Byte+0x90>)
 800e7ca:	f7f8 fefb 	bl	80075c4 <HAL_GPIO_WritePin>
 800e7ce:	e004      	b.n	800e7da <OLED_WR_Byte+0x5e>
		else OLED_SDIN_Clr(); //CHANGE: OLED_SDIN_L
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	2140      	movs	r1, #64	; 0x40
 800e7d4:	480d      	ldr	r0, [pc, #52]	; (800e80c <OLED_WR_Byte+0x90>)
 800e7d6:	f7f8 fef5 	bl	80075c4 <HAL_GPIO_WritePin>
		OLED_SCLK_Set(); //CHANGE: OLED_SCLK_H
 800e7da:	2201      	movs	r2, #1
 800e7dc:	2120      	movs	r1, #32
 800e7de:	480b      	ldr	r0, [pc, #44]	; (800e80c <OLED_WR_Byte+0x90>)
 800e7e0:	f7f8 fef0 	bl	80075c4 <HAL_GPIO_WritePin>
		dat<<=1;
 800e7e4:	79fb      	ldrb	r3, [r7, #7]
 800e7e6:	005b      	lsls	r3, r3, #1
 800e7e8:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800e7ea:	7bfb      	ldrb	r3, [r7, #15]
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	73fb      	strb	r3, [r7, #15]
 800e7f0:	7bfb      	ldrb	r3, [r7, #15]
 800e7f2:	2b07      	cmp	r3, #7
 800e7f4:	d9dd      	bls.n	800e7b2 <OLED_WR_Byte+0x36>
	}
	OLED_RS_Set();  //CHANGE: OLED_RS_H
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e7fc:	4803      	ldr	r0, [pc, #12]	; (800e80c <OLED_WR_Byte+0x90>)
 800e7fe:	f7f8 fee1 	bl	80075c4 <HAL_GPIO_WritePin>
}
 800e802:	bf00      	nop
 800e804:	3710      	adds	r7, #16
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	40021000 	.word	0x40021000

0800e810 <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);
	OLED_WR_Byte(0XAE,OLED_CMD);
}

void OLED_Clear(void)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<CHAR_W;i++)
 800e816:	2300      	movs	r3, #0
 800e818:	71fb      	strb	r3, [r7, #7]
 800e81a:	e014      	b.n	800e846 <OLED_Clear+0x36>
	for(n=0;n<SCREEN_W;n++)
 800e81c:	2300      	movs	r3, #0
 800e81e:	71bb      	strb	r3, [r7, #6]
 800e820:	e00a      	b.n	800e838 <OLED_Clear+0x28>
	OLED_GRAM[n][i]=0x00;
 800e822:	79ba      	ldrb	r2, [r7, #6]
 800e824:	79fb      	ldrb	r3, [r7, #7]
 800e826:	490c      	ldr	r1, [pc, #48]	; (800e858 <OLED_Clear+0x48>)
 800e828:	00d2      	lsls	r2, r2, #3
 800e82a:	440a      	add	r2, r1
 800e82c:	4413      	add	r3, r2
 800e82e:	2200      	movs	r2, #0
 800e830:	701a      	strb	r2, [r3, #0]
	for(n=0;n<SCREEN_W;n++)
 800e832:	79bb      	ldrb	r3, [r7, #6]
 800e834:	3301      	adds	r3, #1
 800e836:	71bb      	strb	r3, [r7, #6]
 800e838:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	daf0      	bge.n	800e822 <OLED_Clear+0x12>
	for(i=0;i<CHAR_W;i++)
 800e840:	79fb      	ldrb	r3, [r7, #7]
 800e842:	3301      	adds	r3, #1
 800e844:	71fb      	strb	r3, [r7, #7]
 800e846:	79fb      	ldrb	r3, [r7, #7]
 800e848:	2b07      	cmp	r3, #7
 800e84a:	d9e7      	bls.n	800e81c <OLED_Clear+0xc>
	OLED_Refresh_Gram();
 800e84c:	f7ff ff5e 	bl	800e70c <OLED_Refresh_Gram>
}
 800e850:	bf00      	nop
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	20004edc 	.word	0x20004edc

0800e85c <OLED_DrawPoint>:

void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b085      	sub	sp, #20
 800e860:	af00      	add	r7, sp, #0
 800e862:	4603      	mov	r3, r0
 800e864:	71fb      	strb	r3, [r7, #7]
 800e866:	460b      	mov	r3, r1
 800e868:	71bb      	strb	r3, [r7, #6]
 800e86a:	4613      	mov	r3, r2
 800e86c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800e86e:	2300      	movs	r3, #0
 800e870:	73fb      	strb	r3, [r7, #15]
	if(x>=SCREEN_W||y>=SCREEN_H)return;
 800e872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e876:	2b00      	cmp	r3, #0
 800e878:	db41      	blt.n	800e8fe <OLED_DrawPoint+0xa2>
 800e87a:	79bb      	ldrb	r3, [r7, #6]
 800e87c:	2b3b      	cmp	r3, #59	; 0x3b
 800e87e:	d83e      	bhi.n	800e8fe <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800e880:	79bb      	ldrb	r3, [r7, #6]
 800e882:	08db      	lsrs	r3, r3, #3
 800e884:	b2db      	uxtb	r3, r3
 800e886:	f1c3 0307 	rsb	r3, r3, #7
 800e88a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800e88c:	79bb      	ldrb	r3, [r7, #6]
 800e88e:	f003 0307 	and.w	r3, r3, #7
 800e892:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800e894:	7b7b      	ldrb	r3, [r7, #13]
 800e896:	f1c3 0307 	rsb	r3, r3, #7
 800e89a:	2201      	movs	r2, #1
 800e89c:	fa02 f303 	lsl.w	r3, r2, r3
 800e8a0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800e8a2:	797b      	ldrb	r3, [r7, #5]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d012      	beq.n	800e8ce <OLED_DrawPoint+0x72>
 800e8a8:	79fa      	ldrb	r2, [r7, #7]
 800e8aa:	7bbb      	ldrb	r3, [r7, #14]
 800e8ac:	4917      	ldr	r1, [pc, #92]	; (800e90c <OLED_DrawPoint+0xb0>)
 800e8ae:	00d2      	lsls	r2, r2, #3
 800e8b0:	440a      	add	r2, r1
 800e8b2:	4413      	add	r3, r2
 800e8b4:	7818      	ldrb	r0, [r3, #0]
 800e8b6:	79fa      	ldrb	r2, [r7, #7]
 800e8b8:	7bbb      	ldrb	r3, [r7, #14]
 800e8ba:	7bf9      	ldrb	r1, [r7, #15]
 800e8bc:	4301      	orrs	r1, r0
 800e8be:	b2c8      	uxtb	r0, r1
 800e8c0:	4912      	ldr	r1, [pc, #72]	; (800e90c <OLED_DrawPoint+0xb0>)
 800e8c2:	00d2      	lsls	r2, r2, #3
 800e8c4:	440a      	add	r2, r1
 800e8c6:	4413      	add	r3, r2
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	701a      	strb	r2, [r3, #0]
 800e8cc:	e018      	b.n	800e900 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;
 800e8ce:	79fa      	ldrb	r2, [r7, #7]
 800e8d0:	7bbb      	ldrb	r3, [r7, #14]
 800e8d2:	490e      	ldr	r1, [pc, #56]	; (800e90c <OLED_DrawPoint+0xb0>)
 800e8d4:	00d2      	lsls	r2, r2, #3
 800e8d6:	440a      	add	r2, r1
 800e8d8:	4413      	add	r3, r2
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	b25a      	sxtb	r2, r3
 800e8de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8e2:	43db      	mvns	r3, r3
 800e8e4:	b25b      	sxtb	r3, r3
 800e8e6:	4013      	ands	r3, r2
 800e8e8:	b259      	sxtb	r1, r3
 800e8ea:	79fa      	ldrb	r2, [r7, #7]
 800e8ec:	7bbb      	ldrb	r3, [r7, #14]
 800e8ee:	b2c8      	uxtb	r0, r1
 800e8f0:	4906      	ldr	r1, [pc, #24]	; (800e90c <OLED_DrawPoint+0xb0>)
 800e8f2:	00d2      	lsls	r2, r2, #3
 800e8f4:	440a      	add	r2, r1
 800e8f6:	4413      	add	r3, r2
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	701a      	strb	r2, [r3, #0]
 800e8fc:	e000      	b.n	800e900 <OLED_DrawPoint+0xa4>
	if(x>=SCREEN_W||y>=SCREEN_H)return;
 800e8fe:	bf00      	nop
}
 800e900:	3714      	adds	r7, #20
 800e902:	46bd      	mov	sp, r7
 800e904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e908:	4770      	bx	lr
 800e90a:	bf00      	nop
 800e90c:	20004edc 	.word	0x20004edc

0800e910 <OLED_ShowChar>:
	}
	OLED_Refresh_Gram();
}

void OLED_ShowChar(uint8_t x,uint8_t y,char chr,uint8_t size,uint8_t mode)
{
 800e910:	b590      	push	{r4, r7, lr}
 800e912:	b085      	sub	sp, #20
 800e914:	af00      	add	r7, sp, #0
 800e916:	4604      	mov	r4, r0
 800e918:	4608      	mov	r0, r1
 800e91a:	4611      	mov	r1, r2
 800e91c:	461a      	mov	r2, r3
 800e91e:	4623      	mov	r3, r4
 800e920:	71fb      	strb	r3, [r7, #7]
 800e922:	4603      	mov	r3, r0
 800e924:	71bb      	strb	r3, [r7, #6]
 800e926:	460b      	mov	r3, r1
 800e928:	717b      	strb	r3, [r7, #5]
 800e92a:	4613      	mov	r3, r2
 800e92c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800e92e:	79bb      	ldrb	r3, [r7, #6]
 800e930:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';
 800e932:	797b      	ldrb	r3, [r7, #5]
 800e934:	3b20      	subs	r3, #32
 800e936:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800e938:	2300      	movs	r3, #0
 800e93a:	73bb      	strb	r3, [r7, #14]
 800e93c:	e041      	b.n	800e9c2 <OLED_ShowChar+0xb2>
    {
		//CHANGE: if(size==16)//temp=oled_asc2_1206[chr][t];
		//else
	//	if (size ==12) temp=oled_asc2_1206[chr][t];
	//	else temp=oled_asc2_1608[chr][t];
	temp=oled_asc2_1206[chr][t];
 800e93e:	797a      	ldrb	r2, [r7, #5]
 800e940:	7bb9      	ldrb	r1, [r7, #14]
 800e942:	4825      	ldr	r0, [pc, #148]	; (800e9d8 <OLED_ShowChar+0xc8>)
 800e944:	4613      	mov	r3, r2
 800e946:	005b      	lsls	r3, r3, #1
 800e948:	4413      	add	r3, r2
 800e94a:	009b      	lsls	r3, r3, #2
 800e94c:	4403      	add	r3, r0
 800e94e:	440b      	add	r3, r1
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	73fb      	strb	r3, [r7, #15]
    for(t1=0;t1<CHAR_W;t1++)
 800e954:	2300      	movs	r3, #0
 800e956:	737b      	strb	r3, [r7, #13]
 800e958:	e02d      	b.n	800e9b6 <OLED_ShowChar+0xa6>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800e95a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	da07      	bge.n	800e972 <OLED_ShowChar+0x62>
 800e962:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e966:	79b9      	ldrb	r1, [r7, #6]
 800e968:	79fb      	ldrb	r3, [r7, #7]
 800e96a:	4618      	mov	r0, r3
 800e96c:	f7ff ff76 	bl	800e85c <OLED_DrawPoint>
 800e970:	e00c      	b.n	800e98c <OLED_ShowChar+0x7c>
			else OLED_DrawPoint(x,y,!mode);
 800e972:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e976:	2b00      	cmp	r3, #0
 800e978:	bf0c      	ite	eq
 800e97a:	2301      	moveq	r3, #1
 800e97c:	2300      	movne	r3, #0
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	461a      	mov	r2, r3
 800e982:	79b9      	ldrb	r1, [r7, #6]
 800e984:	79fb      	ldrb	r3, [r7, #7]
 800e986:	4618      	mov	r0, r3
 800e988:	f7ff ff68 	bl	800e85c <OLED_DrawPoint>
			temp<<=1;
 800e98c:	7bfb      	ldrb	r3, [r7, #15]
 800e98e:	005b      	lsls	r3, r3, #1
 800e990:	73fb      	strb	r3, [r7, #15]
			y++;
 800e992:	79bb      	ldrb	r3, [r7, #6]
 800e994:	3301      	adds	r3, #1
 800e996:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800e998:	79ba      	ldrb	r2, [r7, #6]
 800e99a:	7b3b      	ldrb	r3, [r7, #12]
 800e99c:	1ad2      	subs	r2, r2, r3
 800e99e:	793b      	ldrb	r3, [r7, #4]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d105      	bne.n	800e9b0 <OLED_ShowChar+0xa0>
			{
				y=y0;
 800e9a4:	7b3b      	ldrb	r3, [r7, #12]
 800e9a6:	71bb      	strb	r3, [r7, #6]
				x++;
 800e9a8:	79fb      	ldrb	r3, [r7, #7]
 800e9aa:	3301      	adds	r3, #1
 800e9ac:	71fb      	strb	r3, [r7, #7]
				break;
 800e9ae:	e005      	b.n	800e9bc <OLED_ShowChar+0xac>
    for(t1=0;t1<CHAR_W;t1++)
 800e9b0:	7b7b      	ldrb	r3, [r7, #13]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	737b      	strb	r3, [r7, #13]
 800e9b6:	7b7b      	ldrb	r3, [r7, #13]
 800e9b8:	2b07      	cmp	r3, #7
 800e9ba:	d9ce      	bls.n	800e95a <OLED_ShowChar+0x4a>
    for(t=0;t<size;t++)
 800e9bc:	7bbb      	ldrb	r3, [r7, #14]
 800e9be:	3301      	adds	r3, #1
 800e9c0:	73bb      	strb	r3, [r7, #14]
 800e9c2:	7bba      	ldrb	r2, [r7, #14]
 800e9c4:	793b      	ldrb	r3, [r7, #4]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d3b9      	bcc.n	800e93e <OLED_ShowChar+0x2e>
			}
		}
    }
	OLED_Refresh_Gram();
 800e9ca:	f7ff fe9f 	bl	800e70c <OLED_Refresh_Gram>
}
 800e9ce:	bf00      	nop
 800e9d0:	3714      	adds	r7, #20
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd90      	pop	{r4, r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	08010444 	.word	0x08010444

0800e9dc <OLED_ShowString>:
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0',size,1);
	}
}

void OLED_ShowString(uint8_t x,uint8_t y,const char *p)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b084      	sub	sp, #16
 800e9e0:	af02      	add	r7, sp, #8
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	603a      	str	r2, [r7, #0]
 800e9e6:	71fb      	strb	r3, [r7, #7]
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	71bb      	strb	r3, [r7, #6]
    while(*p!='\0')
 800e9ec:	e01f      	b.n	800ea2e <OLED_ShowString+0x52>
    {
        if(x>MAX_CHAR_POSX){x=0;y+=CHAR_H;}
 800e9ee:	79fb      	ldrb	r3, [r7, #7]
 800e9f0:	2b78      	cmp	r3, #120	; 0x78
 800e9f2:	d904      	bls.n	800e9fe <OLED_ShowString+0x22>
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	71fb      	strb	r3, [r7, #7]
 800e9f8:	79bb      	ldrb	r3, [r7, #6]
 800e9fa:	330c      	adds	r3, #12
 800e9fc:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800e9fe:	79bb      	ldrb	r3, [r7, #6]
 800ea00:	2b3c      	cmp	r3, #60	; 0x3c
 800ea02:	d905      	bls.n	800ea10 <OLED_ShowString+0x34>
 800ea04:	2300      	movs	r3, #0
 800ea06:	71fb      	strb	r3, [r7, #7]
 800ea08:	79fb      	ldrb	r3, [r7, #7]
 800ea0a:	71bb      	strb	r3, [r7, #6]
 800ea0c:	f7ff ff00 	bl	800e810 <OLED_Clear>
        //CHANGE: OLED_ShowChar(x,y,*p,16,1);
		OLED_ShowChar(x,y,*p,CHAR_H,1);
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	781a      	ldrb	r2, [r3, #0]
 800ea14:	79b9      	ldrb	r1, [r7, #6]
 800ea16:	79f8      	ldrb	r0, [r7, #7]
 800ea18:	2301      	movs	r3, #1
 800ea1a:	9300      	str	r3, [sp, #0]
 800ea1c:	230c      	movs	r3, #12
 800ea1e:	f7ff ff77 	bl	800e910 <OLED_ShowChar>
        x+=CHAR_W;
 800ea22:	79fb      	ldrb	r3, [r7, #7]
 800ea24:	3308      	adds	r3, #8
 800ea26:	71fb      	strb	r3, [r7, #7]
        p++;
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d1db      	bne.n	800e9ee <OLED_ShowString+0x12>
    }
}
 800ea36:	bf00      	nop
 800ea38:	bf00      	nop
 800ea3a:	3708      	adds	r7, #8
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <OLED_Init>:
}
*/

//SSD1306
void OLED_Init(void)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	af00      	add	r7, sp, #0
	//ADD: 
	HAL_PWR_EnableBkUpAccess(); // Enable access to the RTC and Backup Register
 800ea44:	f7f9 fdb0 	bl	80085a8 <HAL_PWR_EnableBkUpAccess>
	//ADD:
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); 	//turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles
 800ea48:	4b41      	ldr	r3, [pc, #260]	; (800eb50 <OLED_Init+0x110>)
 800ea4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea4c:	4a40      	ldr	r2, [pc, #256]	; (800eb50 <OLED_Init+0x110>)
 800ea4e:	f023 0301 	bic.w	r3, r3, #1
 800ea52:	6713      	str	r3, [r2, #112]	; 0x70
 800ea54:	4b3e      	ldr	r3, [pc, #248]	; (800eb50 <OLED_Init+0x110>)
 800ea56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea58:	4a3d      	ldr	r2, [pc, #244]	; (800eb50 <OLED_Init+0x110>)
 800ea5a:	f023 0304 	bic.w	r3, r3, #4
 800ea5e:	6713      	str	r3, [r2, #112]	; 0x70
																			//LSE oscillator switch off to let PC13 PC14 PC15 be IO

	HAL_PWR_DisableBkUpAccess();
 800ea60:	f7f9 fdb6 	bl	80085d0 <HAL_PWR_DisableBkUpAccess>

	//CHANGE: OLED_RST_L;			  		//
	OLED_RST_Clr();
 800ea64:	2200      	movs	r2, #0
 800ea66:	2180      	movs	r1, #128	; 0x80
 800ea68:	483a      	ldr	r0, [pc, #232]	; (800eb54 <OLED_Init+0x114>)
 800ea6a:	f7f8 fdab 	bl	80075c4 <HAL_GPIO_WritePin>
	//CHANGE: LL_mDelay(100);
	HAL_Delay(100);
 800ea6e:	2064      	movs	r0, #100	; 0x64
 800ea70:	f7f7 fe44 	bl	80066fc <HAL_Delay>
	//CHANGE: OLED_RST_H;
	OLED_RST_Set();
 800ea74:	2201      	movs	r2, #1
 800ea76:	2180      	movs	r1, #128	; 0x80
 800ea78:	4836      	ldr	r0, [pc, #216]	; (800eb54 <OLED_Init+0x114>)
 800ea7a:	f7f8 fda3 	bl	80075c4 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE,OLED_CMD); // Off Display
 800ea7e:	2100      	movs	r1, #0
 800ea80:	20ae      	movs	r0, #174	; 0xae
 800ea82:	f7ff fe7b 	bl	800e77c <OLED_WR_Byte>

	OLED_WR_Byte(0xD5,OLED_CMD); // Set Oscillator Division
 800ea86:	2100      	movs	r1, #0
 800ea88:	20d5      	movs	r0, #213	; 0xd5
 800ea8a:	f7ff fe77 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);   //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800ea8e:	2100      	movs	r1, #0
 800ea90:	2050      	movs	r0, #80	; 0x50
 800ea92:	f7ff fe73 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); // multiple ratio
 800ea96:	2100      	movs	r1, #0
 800ea98:	20a8      	movs	r0, #168	; 0xa8
 800ea9a:	f7ff fe6f 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0x3F(1/64)
 800ea9e:	2100      	movs	r1, #0
 800eaa0:	203f      	movs	r0, #63	; 0x3f
 800eaa2:	f7ff fe6b 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD); //set display offset
 800eaa6:	2100      	movs	r1, #0
 800eaa8:	20d3      	movs	r0, #211	; 0xd3
 800eaaa:	f7ff fe67 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800eaae:	2100      	movs	r1, #0
 800eab0:	2000      	movs	r0, #0
 800eab2:	f7ff fe63 	bl	800e77c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD);//set display start line [5:0]- from 0-63. RESET
 800eab6:	2100      	movs	r1, #0
 800eab8:	2040      	movs	r0, #64	; 0x40
 800eaba:	f7ff fe5f 	bl	800e77c <OLED_WR_Byte>

	OLED_WR_Byte(0x8D,OLED_CMD);//Set charge pump
 800eabe:	2100      	movs	r1, #0
 800eac0:	208d      	movs	r0, #141	; 0x8d
 800eac2:	f7ff fe5b 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//Enable Charge pump. //  bit2，
 800eac6:	2100      	movs	r1, #0
 800eac8:	2014      	movs	r0, #20
 800eaca:	f7ff fe57 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//Set Memory Addressing Mode
 800eace:	2100      	movs	r1, #0
 800ead0:	2020      	movs	r0, #32
 800ead2:	f7ff fe53 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//Page Addressing Mode (RESET) //[1:0],;;1
 800ead6:	2100      	movs	r1, #0
 800ead8:	2002      	movs	r0, #2
 800eada:	f7ff fe4f 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//Set segment ??,bit0:0,0->0;1,0->127;
 800eade:	2100      	movs	r1, #0
 800eae0:	20a1      	movs	r0, #161	; 0xa1
 800eae2:	f7ff fe4b 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD);//Set COM Output Scan Direction //; bit3[N-;N:
 800eae6:	2100      	movs	r1, #0
 800eae8:	20c0      	movs	r0, #192	; 0xc0
 800eaea:	f7ff fe47 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//Set COM Pins
 800eaee:	2100      	movs	r1, #0
 800eaf0:	20da      	movs	r0, #218	; 0xda
 800eaf2:	f7ff fe43 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);//[5:4] setting
 800eaf6:	2100      	movs	r1, #0
 800eaf8:	2012      	movs	r0, #18
 800eafa:	f7ff fe3f 	bl	800e77c <OLED_WR_Byte>

	OLED_WR_Byte(0x81,OLED_CMD);//Contrast Control
 800eafe:	2100      	movs	r1, #0
 800eb00:	2081      	movs	r0, #129	; 0x81
 800eb02:	f7ff fe3b 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD);//1~256; Default: 0x7F
 800eb06:	2100      	movs	r1, #0
 800eb08:	20ef      	movs	r0, #239	; 0xef
 800eb0a:	f7ff fe37 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-charge Period
 800eb0e:	2100      	movs	r1, #0
 800eb10:	20d9      	movs	r0, #217	; 0xd9
 800eb12:	f7ff fe33 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD);//[3:0],PHASE 1;[7:4],PHASE 2;
 800eb16:	2100      	movs	r1, #0
 800eb18:	20f1      	movs	r0, #241	; 0xf1
 800eb1a:	f7ff fe2f 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//
 800eb1e:	2100      	movs	r1, #0
 800eb20:	20db      	movs	r0, #219	; 0xdb
 800eb22:	f7ff fe2b 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);//[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800eb26:	2100      	movs	r1, #0
 800eb28:	2030      	movs	r0, #48	; 0x30
 800eb2a:	f7ff fe27 	bl	800e77c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD);//Enable display outputs according to the ?? content //;bit0:1,;0,
 800eb2e:	2100      	movs	r1, #0
 800eb30:	20a4      	movs	r0, #164	; 0xa4
 800eb32:	f7ff fe23 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//Set normal display //;bit0:1,;0,
 800eb36:	2100      	movs	r1, #0
 800eb38:	20a6      	movs	r0, #166	; 0xa6
 800eb3a:	f7ff fe1f 	bl	800e77c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD);//Display ON
 800eb3e:	2100      	movs	r1, #0
 800eb40:	20af      	movs	r0, #175	; 0xaf
 800eb42:	f7ff fe1b 	bl	800e77c <OLED_WR_Byte>
	//REMOVE: LL_mDelay(100);
	OLED_Clear();
 800eb46:	f7ff fe63 	bl	800e810 <OLED_Clear>
}
 800eb4a:	bf00      	nop
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	40023800 	.word	0x40023800
 800eb54:	40021000 	.word	0x40021000

0800eb58 <sniprintf>:
 800eb58:	b40c      	push	{r2, r3}
 800eb5a:	b530      	push	{r4, r5, lr}
 800eb5c:	4b17      	ldr	r3, [pc, #92]	; (800ebbc <sniprintf+0x64>)
 800eb5e:	1e0c      	subs	r4, r1, #0
 800eb60:	681d      	ldr	r5, [r3, #0]
 800eb62:	b09d      	sub	sp, #116	; 0x74
 800eb64:	da08      	bge.n	800eb78 <sniprintf+0x20>
 800eb66:	238b      	movs	r3, #139	; 0x8b
 800eb68:	602b      	str	r3, [r5, #0]
 800eb6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb6e:	b01d      	add	sp, #116	; 0x74
 800eb70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb74:	b002      	add	sp, #8
 800eb76:	4770      	bx	lr
 800eb78:	f44f 7302 	mov.w	r3, #520	; 0x208
 800eb7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800eb80:	bf14      	ite	ne
 800eb82:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800eb86:	4623      	moveq	r3, r4
 800eb88:	9304      	str	r3, [sp, #16]
 800eb8a:	9307      	str	r3, [sp, #28]
 800eb8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb90:	9002      	str	r0, [sp, #8]
 800eb92:	9006      	str	r0, [sp, #24]
 800eb94:	f8ad 3016 	strh.w	r3, [sp, #22]
 800eb98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800eb9a:	ab21      	add	r3, sp, #132	; 0x84
 800eb9c:	a902      	add	r1, sp, #8
 800eb9e:	4628      	mov	r0, r5
 800eba0:	9301      	str	r3, [sp, #4]
 800eba2:	f000 f8a9 	bl	800ecf8 <_svfiprintf_r>
 800eba6:	1c43      	adds	r3, r0, #1
 800eba8:	bfbc      	itt	lt
 800ebaa:	238b      	movlt	r3, #139	; 0x8b
 800ebac:	602b      	strlt	r3, [r5, #0]
 800ebae:	2c00      	cmp	r4, #0
 800ebb0:	d0dd      	beq.n	800eb6e <sniprintf+0x16>
 800ebb2:	9b02      	ldr	r3, [sp, #8]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	701a      	strb	r2, [r3, #0]
 800ebb8:	e7d9      	b.n	800eb6e <sniprintf+0x16>
 800ebba:	bf00      	nop
 800ebbc:	2000019c 	.word	0x2000019c

0800ebc0 <memset>:
 800ebc0:	4402      	add	r2, r0
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d100      	bne.n	800ebca <memset+0xa>
 800ebc8:	4770      	bx	lr
 800ebca:	f803 1b01 	strb.w	r1, [r3], #1
 800ebce:	e7f9      	b.n	800ebc4 <memset+0x4>

0800ebd0 <__errno>:
 800ebd0:	4b01      	ldr	r3, [pc, #4]	; (800ebd8 <__errno+0x8>)
 800ebd2:	6818      	ldr	r0, [r3, #0]
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	2000019c 	.word	0x2000019c

0800ebdc <__libc_init_array>:
 800ebdc:	b570      	push	{r4, r5, r6, lr}
 800ebde:	4d0d      	ldr	r5, [pc, #52]	; (800ec14 <__libc_init_array+0x38>)
 800ebe0:	4c0d      	ldr	r4, [pc, #52]	; (800ec18 <__libc_init_array+0x3c>)
 800ebe2:	1b64      	subs	r4, r4, r5
 800ebe4:	10a4      	asrs	r4, r4, #2
 800ebe6:	2600      	movs	r6, #0
 800ebe8:	42a6      	cmp	r6, r4
 800ebea:	d109      	bne.n	800ec00 <__libc_init_array+0x24>
 800ebec:	4d0b      	ldr	r5, [pc, #44]	; (800ec1c <__libc_init_array+0x40>)
 800ebee:	4c0c      	ldr	r4, [pc, #48]	; (800ec20 <__libc_init_array+0x44>)
 800ebf0:	f001 faba 	bl	8010168 <_init>
 800ebf4:	1b64      	subs	r4, r4, r5
 800ebf6:	10a4      	asrs	r4, r4, #2
 800ebf8:	2600      	movs	r6, #0
 800ebfa:	42a6      	cmp	r6, r4
 800ebfc:	d105      	bne.n	800ec0a <__libc_init_array+0x2e>
 800ebfe:	bd70      	pop	{r4, r5, r6, pc}
 800ec00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec04:	4798      	blx	r3
 800ec06:	3601      	adds	r6, #1
 800ec08:	e7ee      	b.n	800ebe8 <__libc_init_array+0xc>
 800ec0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec0e:	4798      	blx	r3
 800ec10:	3601      	adds	r6, #1
 800ec12:	e7f2      	b.n	800ebfa <__libc_init_array+0x1e>
 800ec14:	08010ce4 	.word	0x08010ce4
 800ec18:	08010ce4 	.word	0x08010ce4
 800ec1c:	08010ce4 	.word	0x08010ce4
 800ec20:	08010ce8 	.word	0x08010ce8

0800ec24 <__retarget_lock_acquire_recursive>:
 800ec24:	4770      	bx	lr

0800ec26 <__retarget_lock_release_recursive>:
 800ec26:	4770      	bx	lr

0800ec28 <memcpy>:
 800ec28:	440a      	add	r2, r1
 800ec2a:	4291      	cmp	r1, r2
 800ec2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ec30:	d100      	bne.n	800ec34 <memcpy+0xc>
 800ec32:	4770      	bx	lr
 800ec34:	b510      	push	{r4, lr}
 800ec36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec3e:	4291      	cmp	r1, r2
 800ec40:	d1f9      	bne.n	800ec36 <memcpy+0xe>
 800ec42:	bd10      	pop	{r4, pc}

0800ec44 <__ssputs_r>:
 800ec44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec48:	688e      	ldr	r6, [r1, #8]
 800ec4a:	461f      	mov	r7, r3
 800ec4c:	42be      	cmp	r6, r7
 800ec4e:	680b      	ldr	r3, [r1, #0]
 800ec50:	4682      	mov	sl, r0
 800ec52:	460c      	mov	r4, r1
 800ec54:	4690      	mov	r8, r2
 800ec56:	d82c      	bhi.n	800ecb2 <__ssputs_r+0x6e>
 800ec58:	898a      	ldrh	r2, [r1, #12]
 800ec5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec5e:	d026      	beq.n	800ecae <__ssputs_r+0x6a>
 800ec60:	6965      	ldr	r5, [r4, #20]
 800ec62:	6909      	ldr	r1, [r1, #16]
 800ec64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec68:	eba3 0901 	sub.w	r9, r3, r1
 800ec6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec70:	1c7b      	adds	r3, r7, #1
 800ec72:	444b      	add	r3, r9
 800ec74:	106d      	asrs	r5, r5, #1
 800ec76:	429d      	cmp	r5, r3
 800ec78:	bf38      	it	cc
 800ec7a:	461d      	movcc	r5, r3
 800ec7c:	0553      	lsls	r3, r2, #21
 800ec7e:	d527      	bpl.n	800ecd0 <__ssputs_r+0x8c>
 800ec80:	4629      	mov	r1, r5
 800ec82:	f000 f957 	bl	800ef34 <_malloc_r>
 800ec86:	4606      	mov	r6, r0
 800ec88:	b360      	cbz	r0, 800ece4 <__ssputs_r+0xa0>
 800ec8a:	6921      	ldr	r1, [r4, #16]
 800ec8c:	464a      	mov	r2, r9
 800ec8e:	f7ff ffcb 	bl	800ec28 <memcpy>
 800ec92:	89a3      	ldrh	r3, [r4, #12]
 800ec94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ec98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec9c:	81a3      	strh	r3, [r4, #12]
 800ec9e:	6126      	str	r6, [r4, #16]
 800eca0:	6165      	str	r5, [r4, #20]
 800eca2:	444e      	add	r6, r9
 800eca4:	eba5 0509 	sub.w	r5, r5, r9
 800eca8:	6026      	str	r6, [r4, #0]
 800ecaa:	60a5      	str	r5, [r4, #8]
 800ecac:	463e      	mov	r6, r7
 800ecae:	42be      	cmp	r6, r7
 800ecb0:	d900      	bls.n	800ecb4 <__ssputs_r+0x70>
 800ecb2:	463e      	mov	r6, r7
 800ecb4:	6820      	ldr	r0, [r4, #0]
 800ecb6:	4632      	mov	r2, r6
 800ecb8:	4641      	mov	r1, r8
 800ecba:	f000 fb86 	bl	800f3ca <memmove>
 800ecbe:	68a3      	ldr	r3, [r4, #8]
 800ecc0:	1b9b      	subs	r3, r3, r6
 800ecc2:	60a3      	str	r3, [r4, #8]
 800ecc4:	6823      	ldr	r3, [r4, #0]
 800ecc6:	4433      	add	r3, r6
 800ecc8:	6023      	str	r3, [r4, #0]
 800ecca:	2000      	movs	r0, #0
 800eccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecd0:	462a      	mov	r2, r5
 800ecd2:	f000 fb4b 	bl	800f36c <_realloc_r>
 800ecd6:	4606      	mov	r6, r0
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	d1e0      	bne.n	800ec9e <__ssputs_r+0x5a>
 800ecdc:	6921      	ldr	r1, [r4, #16]
 800ecde:	4650      	mov	r0, sl
 800ece0:	f000 fb9e 	bl	800f420 <_free_r>
 800ece4:	230c      	movs	r3, #12
 800ece6:	f8ca 3000 	str.w	r3, [sl]
 800ecea:	89a3      	ldrh	r3, [r4, #12]
 800ecec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecf0:	81a3      	strh	r3, [r4, #12]
 800ecf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ecf6:	e7e9      	b.n	800eccc <__ssputs_r+0x88>

0800ecf8 <_svfiprintf_r>:
 800ecf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecfc:	4698      	mov	r8, r3
 800ecfe:	898b      	ldrh	r3, [r1, #12]
 800ed00:	061b      	lsls	r3, r3, #24
 800ed02:	b09d      	sub	sp, #116	; 0x74
 800ed04:	4607      	mov	r7, r0
 800ed06:	460d      	mov	r5, r1
 800ed08:	4614      	mov	r4, r2
 800ed0a:	d50e      	bpl.n	800ed2a <_svfiprintf_r+0x32>
 800ed0c:	690b      	ldr	r3, [r1, #16]
 800ed0e:	b963      	cbnz	r3, 800ed2a <_svfiprintf_r+0x32>
 800ed10:	2140      	movs	r1, #64	; 0x40
 800ed12:	f000 f90f 	bl	800ef34 <_malloc_r>
 800ed16:	6028      	str	r0, [r5, #0]
 800ed18:	6128      	str	r0, [r5, #16]
 800ed1a:	b920      	cbnz	r0, 800ed26 <_svfiprintf_r+0x2e>
 800ed1c:	230c      	movs	r3, #12
 800ed1e:	603b      	str	r3, [r7, #0]
 800ed20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed24:	e0d0      	b.n	800eec8 <_svfiprintf_r+0x1d0>
 800ed26:	2340      	movs	r3, #64	; 0x40
 800ed28:	616b      	str	r3, [r5, #20]
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ed2e:	2320      	movs	r3, #32
 800ed30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed34:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed38:	2330      	movs	r3, #48	; 0x30
 800ed3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800eee0 <_svfiprintf_r+0x1e8>
 800ed3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed42:	f04f 0901 	mov.w	r9, #1
 800ed46:	4623      	mov	r3, r4
 800ed48:	469a      	mov	sl, r3
 800ed4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed4e:	b10a      	cbz	r2, 800ed54 <_svfiprintf_r+0x5c>
 800ed50:	2a25      	cmp	r2, #37	; 0x25
 800ed52:	d1f9      	bne.n	800ed48 <_svfiprintf_r+0x50>
 800ed54:	ebba 0b04 	subs.w	fp, sl, r4
 800ed58:	d00b      	beq.n	800ed72 <_svfiprintf_r+0x7a>
 800ed5a:	465b      	mov	r3, fp
 800ed5c:	4622      	mov	r2, r4
 800ed5e:	4629      	mov	r1, r5
 800ed60:	4638      	mov	r0, r7
 800ed62:	f7ff ff6f 	bl	800ec44 <__ssputs_r>
 800ed66:	3001      	adds	r0, #1
 800ed68:	f000 80a9 	beq.w	800eebe <_svfiprintf_r+0x1c6>
 800ed6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed6e:	445a      	add	r2, fp
 800ed70:	9209      	str	r2, [sp, #36]	; 0x24
 800ed72:	f89a 3000 	ldrb.w	r3, [sl]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	f000 80a1 	beq.w	800eebe <_svfiprintf_r+0x1c6>
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed86:	f10a 0a01 	add.w	sl, sl, #1
 800ed8a:	9304      	str	r3, [sp, #16]
 800ed8c:	9307      	str	r3, [sp, #28]
 800ed8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed92:	931a      	str	r3, [sp, #104]	; 0x68
 800ed94:	4654      	mov	r4, sl
 800ed96:	2205      	movs	r2, #5
 800ed98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed9c:	4850      	ldr	r0, [pc, #320]	; (800eee0 <_svfiprintf_r+0x1e8>)
 800ed9e:	f7f1 fa17 	bl	80001d0 <memchr>
 800eda2:	9a04      	ldr	r2, [sp, #16]
 800eda4:	b9d8      	cbnz	r0, 800edde <_svfiprintf_r+0xe6>
 800eda6:	06d0      	lsls	r0, r2, #27
 800eda8:	bf44      	itt	mi
 800edaa:	2320      	movmi	r3, #32
 800edac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edb0:	0711      	lsls	r1, r2, #28
 800edb2:	bf44      	itt	mi
 800edb4:	232b      	movmi	r3, #43	; 0x2b
 800edb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edba:	f89a 3000 	ldrb.w	r3, [sl]
 800edbe:	2b2a      	cmp	r3, #42	; 0x2a
 800edc0:	d015      	beq.n	800edee <_svfiprintf_r+0xf6>
 800edc2:	9a07      	ldr	r2, [sp, #28]
 800edc4:	4654      	mov	r4, sl
 800edc6:	2000      	movs	r0, #0
 800edc8:	f04f 0c0a 	mov.w	ip, #10
 800edcc:	4621      	mov	r1, r4
 800edce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edd2:	3b30      	subs	r3, #48	; 0x30
 800edd4:	2b09      	cmp	r3, #9
 800edd6:	d94d      	bls.n	800ee74 <_svfiprintf_r+0x17c>
 800edd8:	b1b0      	cbz	r0, 800ee08 <_svfiprintf_r+0x110>
 800edda:	9207      	str	r2, [sp, #28]
 800eddc:	e014      	b.n	800ee08 <_svfiprintf_r+0x110>
 800edde:	eba0 0308 	sub.w	r3, r0, r8
 800ede2:	fa09 f303 	lsl.w	r3, r9, r3
 800ede6:	4313      	orrs	r3, r2
 800ede8:	9304      	str	r3, [sp, #16]
 800edea:	46a2      	mov	sl, r4
 800edec:	e7d2      	b.n	800ed94 <_svfiprintf_r+0x9c>
 800edee:	9b03      	ldr	r3, [sp, #12]
 800edf0:	1d19      	adds	r1, r3, #4
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	9103      	str	r1, [sp, #12]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	bfbb      	ittet	lt
 800edfa:	425b      	neglt	r3, r3
 800edfc:	f042 0202 	orrlt.w	r2, r2, #2
 800ee00:	9307      	strge	r3, [sp, #28]
 800ee02:	9307      	strlt	r3, [sp, #28]
 800ee04:	bfb8      	it	lt
 800ee06:	9204      	strlt	r2, [sp, #16]
 800ee08:	7823      	ldrb	r3, [r4, #0]
 800ee0a:	2b2e      	cmp	r3, #46	; 0x2e
 800ee0c:	d10c      	bne.n	800ee28 <_svfiprintf_r+0x130>
 800ee0e:	7863      	ldrb	r3, [r4, #1]
 800ee10:	2b2a      	cmp	r3, #42	; 0x2a
 800ee12:	d134      	bne.n	800ee7e <_svfiprintf_r+0x186>
 800ee14:	9b03      	ldr	r3, [sp, #12]
 800ee16:	1d1a      	adds	r2, r3, #4
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	9203      	str	r2, [sp, #12]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	bfb8      	it	lt
 800ee20:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ee24:	3402      	adds	r4, #2
 800ee26:	9305      	str	r3, [sp, #20]
 800ee28:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800eef0 <_svfiprintf_r+0x1f8>
 800ee2c:	7821      	ldrb	r1, [r4, #0]
 800ee2e:	2203      	movs	r2, #3
 800ee30:	4650      	mov	r0, sl
 800ee32:	f7f1 f9cd 	bl	80001d0 <memchr>
 800ee36:	b138      	cbz	r0, 800ee48 <_svfiprintf_r+0x150>
 800ee38:	9b04      	ldr	r3, [sp, #16]
 800ee3a:	eba0 000a 	sub.w	r0, r0, sl
 800ee3e:	2240      	movs	r2, #64	; 0x40
 800ee40:	4082      	lsls	r2, r0
 800ee42:	4313      	orrs	r3, r2
 800ee44:	3401      	adds	r4, #1
 800ee46:	9304      	str	r3, [sp, #16]
 800ee48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee4c:	4825      	ldr	r0, [pc, #148]	; (800eee4 <_svfiprintf_r+0x1ec>)
 800ee4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee52:	2206      	movs	r2, #6
 800ee54:	f7f1 f9bc 	bl	80001d0 <memchr>
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	d038      	beq.n	800eece <_svfiprintf_r+0x1d6>
 800ee5c:	4b22      	ldr	r3, [pc, #136]	; (800eee8 <_svfiprintf_r+0x1f0>)
 800ee5e:	bb1b      	cbnz	r3, 800eea8 <_svfiprintf_r+0x1b0>
 800ee60:	9b03      	ldr	r3, [sp, #12]
 800ee62:	3307      	adds	r3, #7
 800ee64:	f023 0307 	bic.w	r3, r3, #7
 800ee68:	3308      	adds	r3, #8
 800ee6a:	9303      	str	r3, [sp, #12]
 800ee6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee6e:	4433      	add	r3, r6
 800ee70:	9309      	str	r3, [sp, #36]	; 0x24
 800ee72:	e768      	b.n	800ed46 <_svfiprintf_r+0x4e>
 800ee74:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee78:	460c      	mov	r4, r1
 800ee7a:	2001      	movs	r0, #1
 800ee7c:	e7a6      	b.n	800edcc <_svfiprintf_r+0xd4>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	3401      	adds	r4, #1
 800ee82:	9305      	str	r3, [sp, #20]
 800ee84:	4619      	mov	r1, r3
 800ee86:	f04f 0c0a 	mov.w	ip, #10
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee90:	3a30      	subs	r2, #48	; 0x30
 800ee92:	2a09      	cmp	r2, #9
 800ee94:	d903      	bls.n	800ee9e <_svfiprintf_r+0x1a6>
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d0c6      	beq.n	800ee28 <_svfiprintf_r+0x130>
 800ee9a:	9105      	str	r1, [sp, #20]
 800ee9c:	e7c4      	b.n	800ee28 <_svfiprintf_r+0x130>
 800ee9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800eea2:	4604      	mov	r4, r0
 800eea4:	2301      	movs	r3, #1
 800eea6:	e7f0      	b.n	800ee8a <_svfiprintf_r+0x192>
 800eea8:	ab03      	add	r3, sp, #12
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	462a      	mov	r2, r5
 800eeae:	4b0f      	ldr	r3, [pc, #60]	; (800eeec <_svfiprintf_r+0x1f4>)
 800eeb0:	a904      	add	r1, sp, #16
 800eeb2:	4638      	mov	r0, r7
 800eeb4:	f3af 8000 	nop.w
 800eeb8:	1c42      	adds	r2, r0, #1
 800eeba:	4606      	mov	r6, r0
 800eebc:	d1d6      	bne.n	800ee6c <_svfiprintf_r+0x174>
 800eebe:	89ab      	ldrh	r3, [r5, #12]
 800eec0:	065b      	lsls	r3, r3, #25
 800eec2:	f53f af2d 	bmi.w	800ed20 <_svfiprintf_r+0x28>
 800eec6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eec8:	b01d      	add	sp, #116	; 0x74
 800eeca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eece:	ab03      	add	r3, sp, #12
 800eed0:	9300      	str	r3, [sp, #0]
 800eed2:	462a      	mov	r2, r5
 800eed4:	4b05      	ldr	r3, [pc, #20]	; (800eeec <_svfiprintf_r+0x1f4>)
 800eed6:	a904      	add	r1, sp, #16
 800eed8:	4638      	mov	r0, r7
 800eeda:	f000 f919 	bl	800f110 <_printf_i>
 800eede:	e7eb      	b.n	800eeb8 <_svfiprintf_r+0x1c0>
 800eee0:	080108b8 	.word	0x080108b8
 800eee4:	080108c2 	.word	0x080108c2
 800eee8:	00000000 	.word	0x00000000
 800eeec:	0800ec45 	.word	0x0800ec45
 800eef0:	080108be 	.word	0x080108be

0800eef4 <sbrk_aligned>:
 800eef4:	b570      	push	{r4, r5, r6, lr}
 800eef6:	4e0e      	ldr	r6, [pc, #56]	; (800ef30 <sbrk_aligned+0x3c>)
 800eef8:	460c      	mov	r4, r1
 800eefa:	6831      	ldr	r1, [r6, #0]
 800eefc:	4605      	mov	r5, r0
 800eefe:	b911      	cbnz	r1, 800ef06 <sbrk_aligned+0x12>
 800ef00:	f000 fa7e 	bl	800f400 <_sbrk_r>
 800ef04:	6030      	str	r0, [r6, #0]
 800ef06:	4621      	mov	r1, r4
 800ef08:	4628      	mov	r0, r5
 800ef0a:	f000 fa79 	bl	800f400 <_sbrk_r>
 800ef0e:	1c43      	adds	r3, r0, #1
 800ef10:	d00a      	beq.n	800ef28 <sbrk_aligned+0x34>
 800ef12:	1cc4      	adds	r4, r0, #3
 800ef14:	f024 0403 	bic.w	r4, r4, #3
 800ef18:	42a0      	cmp	r0, r4
 800ef1a:	d007      	beq.n	800ef2c <sbrk_aligned+0x38>
 800ef1c:	1a21      	subs	r1, r4, r0
 800ef1e:	4628      	mov	r0, r5
 800ef20:	f000 fa6e 	bl	800f400 <_sbrk_r>
 800ef24:	3001      	adds	r0, #1
 800ef26:	d101      	bne.n	800ef2c <sbrk_aligned+0x38>
 800ef28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	bd70      	pop	{r4, r5, r6, pc}
 800ef30:	2000541c 	.word	0x2000541c

0800ef34 <_malloc_r>:
 800ef34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef38:	1ccd      	adds	r5, r1, #3
 800ef3a:	f025 0503 	bic.w	r5, r5, #3
 800ef3e:	3508      	adds	r5, #8
 800ef40:	2d0c      	cmp	r5, #12
 800ef42:	bf38      	it	cc
 800ef44:	250c      	movcc	r5, #12
 800ef46:	2d00      	cmp	r5, #0
 800ef48:	4607      	mov	r7, r0
 800ef4a:	db01      	blt.n	800ef50 <_malloc_r+0x1c>
 800ef4c:	42a9      	cmp	r1, r5
 800ef4e:	d905      	bls.n	800ef5c <_malloc_r+0x28>
 800ef50:	230c      	movs	r3, #12
 800ef52:	603b      	str	r3, [r7, #0]
 800ef54:	2600      	movs	r6, #0
 800ef56:	4630      	mov	r0, r6
 800ef58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f030 <_malloc_r+0xfc>
 800ef60:	f000 f9f8 	bl	800f354 <__malloc_lock>
 800ef64:	f8d8 3000 	ldr.w	r3, [r8]
 800ef68:	461c      	mov	r4, r3
 800ef6a:	bb5c      	cbnz	r4, 800efc4 <_malloc_r+0x90>
 800ef6c:	4629      	mov	r1, r5
 800ef6e:	4638      	mov	r0, r7
 800ef70:	f7ff ffc0 	bl	800eef4 <sbrk_aligned>
 800ef74:	1c43      	adds	r3, r0, #1
 800ef76:	4604      	mov	r4, r0
 800ef78:	d155      	bne.n	800f026 <_malloc_r+0xf2>
 800ef7a:	f8d8 4000 	ldr.w	r4, [r8]
 800ef7e:	4626      	mov	r6, r4
 800ef80:	2e00      	cmp	r6, #0
 800ef82:	d145      	bne.n	800f010 <_malloc_r+0xdc>
 800ef84:	2c00      	cmp	r4, #0
 800ef86:	d048      	beq.n	800f01a <_malloc_r+0xe6>
 800ef88:	6823      	ldr	r3, [r4, #0]
 800ef8a:	4631      	mov	r1, r6
 800ef8c:	4638      	mov	r0, r7
 800ef8e:	eb04 0903 	add.w	r9, r4, r3
 800ef92:	f000 fa35 	bl	800f400 <_sbrk_r>
 800ef96:	4581      	cmp	r9, r0
 800ef98:	d13f      	bne.n	800f01a <_malloc_r+0xe6>
 800ef9a:	6821      	ldr	r1, [r4, #0]
 800ef9c:	1a6d      	subs	r5, r5, r1
 800ef9e:	4629      	mov	r1, r5
 800efa0:	4638      	mov	r0, r7
 800efa2:	f7ff ffa7 	bl	800eef4 <sbrk_aligned>
 800efa6:	3001      	adds	r0, #1
 800efa8:	d037      	beq.n	800f01a <_malloc_r+0xe6>
 800efaa:	6823      	ldr	r3, [r4, #0]
 800efac:	442b      	add	r3, r5
 800efae:	6023      	str	r3, [r4, #0]
 800efb0:	f8d8 3000 	ldr.w	r3, [r8]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d038      	beq.n	800f02a <_malloc_r+0xf6>
 800efb8:	685a      	ldr	r2, [r3, #4]
 800efba:	42a2      	cmp	r2, r4
 800efbc:	d12b      	bne.n	800f016 <_malloc_r+0xe2>
 800efbe:	2200      	movs	r2, #0
 800efc0:	605a      	str	r2, [r3, #4]
 800efc2:	e00f      	b.n	800efe4 <_malloc_r+0xb0>
 800efc4:	6822      	ldr	r2, [r4, #0]
 800efc6:	1b52      	subs	r2, r2, r5
 800efc8:	d41f      	bmi.n	800f00a <_malloc_r+0xd6>
 800efca:	2a0b      	cmp	r2, #11
 800efcc:	d917      	bls.n	800effe <_malloc_r+0xca>
 800efce:	1961      	adds	r1, r4, r5
 800efd0:	42a3      	cmp	r3, r4
 800efd2:	6025      	str	r5, [r4, #0]
 800efd4:	bf18      	it	ne
 800efd6:	6059      	strne	r1, [r3, #4]
 800efd8:	6863      	ldr	r3, [r4, #4]
 800efda:	bf08      	it	eq
 800efdc:	f8c8 1000 	streq.w	r1, [r8]
 800efe0:	5162      	str	r2, [r4, r5]
 800efe2:	604b      	str	r3, [r1, #4]
 800efe4:	4638      	mov	r0, r7
 800efe6:	f104 060b 	add.w	r6, r4, #11
 800efea:	f000 f9b9 	bl	800f360 <__malloc_unlock>
 800efee:	f026 0607 	bic.w	r6, r6, #7
 800eff2:	1d23      	adds	r3, r4, #4
 800eff4:	1af2      	subs	r2, r6, r3
 800eff6:	d0ae      	beq.n	800ef56 <_malloc_r+0x22>
 800eff8:	1b9b      	subs	r3, r3, r6
 800effa:	50a3      	str	r3, [r4, r2]
 800effc:	e7ab      	b.n	800ef56 <_malloc_r+0x22>
 800effe:	42a3      	cmp	r3, r4
 800f000:	6862      	ldr	r2, [r4, #4]
 800f002:	d1dd      	bne.n	800efc0 <_malloc_r+0x8c>
 800f004:	f8c8 2000 	str.w	r2, [r8]
 800f008:	e7ec      	b.n	800efe4 <_malloc_r+0xb0>
 800f00a:	4623      	mov	r3, r4
 800f00c:	6864      	ldr	r4, [r4, #4]
 800f00e:	e7ac      	b.n	800ef6a <_malloc_r+0x36>
 800f010:	4634      	mov	r4, r6
 800f012:	6876      	ldr	r6, [r6, #4]
 800f014:	e7b4      	b.n	800ef80 <_malloc_r+0x4c>
 800f016:	4613      	mov	r3, r2
 800f018:	e7cc      	b.n	800efb4 <_malloc_r+0x80>
 800f01a:	230c      	movs	r3, #12
 800f01c:	603b      	str	r3, [r7, #0]
 800f01e:	4638      	mov	r0, r7
 800f020:	f000 f99e 	bl	800f360 <__malloc_unlock>
 800f024:	e797      	b.n	800ef56 <_malloc_r+0x22>
 800f026:	6025      	str	r5, [r4, #0]
 800f028:	e7dc      	b.n	800efe4 <_malloc_r+0xb0>
 800f02a:	605b      	str	r3, [r3, #4]
 800f02c:	deff      	udf	#255	; 0xff
 800f02e:	bf00      	nop
 800f030:	20005418 	.word	0x20005418

0800f034 <_printf_common>:
 800f034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f038:	4616      	mov	r6, r2
 800f03a:	4699      	mov	r9, r3
 800f03c:	688a      	ldr	r2, [r1, #8]
 800f03e:	690b      	ldr	r3, [r1, #16]
 800f040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f044:	4293      	cmp	r3, r2
 800f046:	bfb8      	it	lt
 800f048:	4613      	movlt	r3, r2
 800f04a:	6033      	str	r3, [r6, #0]
 800f04c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f050:	4607      	mov	r7, r0
 800f052:	460c      	mov	r4, r1
 800f054:	b10a      	cbz	r2, 800f05a <_printf_common+0x26>
 800f056:	3301      	adds	r3, #1
 800f058:	6033      	str	r3, [r6, #0]
 800f05a:	6823      	ldr	r3, [r4, #0]
 800f05c:	0699      	lsls	r1, r3, #26
 800f05e:	bf42      	ittt	mi
 800f060:	6833      	ldrmi	r3, [r6, #0]
 800f062:	3302      	addmi	r3, #2
 800f064:	6033      	strmi	r3, [r6, #0]
 800f066:	6825      	ldr	r5, [r4, #0]
 800f068:	f015 0506 	ands.w	r5, r5, #6
 800f06c:	d106      	bne.n	800f07c <_printf_common+0x48>
 800f06e:	f104 0a19 	add.w	sl, r4, #25
 800f072:	68e3      	ldr	r3, [r4, #12]
 800f074:	6832      	ldr	r2, [r6, #0]
 800f076:	1a9b      	subs	r3, r3, r2
 800f078:	42ab      	cmp	r3, r5
 800f07a:	dc26      	bgt.n	800f0ca <_printf_common+0x96>
 800f07c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f080:	1e13      	subs	r3, r2, #0
 800f082:	6822      	ldr	r2, [r4, #0]
 800f084:	bf18      	it	ne
 800f086:	2301      	movne	r3, #1
 800f088:	0692      	lsls	r2, r2, #26
 800f08a:	d42b      	bmi.n	800f0e4 <_printf_common+0xb0>
 800f08c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f090:	4649      	mov	r1, r9
 800f092:	4638      	mov	r0, r7
 800f094:	47c0      	blx	r8
 800f096:	3001      	adds	r0, #1
 800f098:	d01e      	beq.n	800f0d8 <_printf_common+0xa4>
 800f09a:	6823      	ldr	r3, [r4, #0]
 800f09c:	6922      	ldr	r2, [r4, #16]
 800f09e:	f003 0306 	and.w	r3, r3, #6
 800f0a2:	2b04      	cmp	r3, #4
 800f0a4:	bf02      	ittt	eq
 800f0a6:	68e5      	ldreq	r5, [r4, #12]
 800f0a8:	6833      	ldreq	r3, [r6, #0]
 800f0aa:	1aed      	subeq	r5, r5, r3
 800f0ac:	68a3      	ldr	r3, [r4, #8]
 800f0ae:	bf0c      	ite	eq
 800f0b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f0b4:	2500      	movne	r5, #0
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	bfc4      	itt	gt
 800f0ba:	1a9b      	subgt	r3, r3, r2
 800f0bc:	18ed      	addgt	r5, r5, r3
 800f0be:	2600      	movs	r6, #0
 800f0c0:	341a      	adds	r4, #26
 800f0c2:	42b5      	cmp	r5, r6
 800f0c4:	d11a      	bne.n	800f0fc <_printf_common+0xc8>
 800f0c6:	2000      	movs	r0, #0
 800f0c8:	e008      	b.n	800f0dc <_printf_common+0xa8>
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	4652      	mov	r2, sl
 800f0ce:	4649      	mov	r1, r9
 800f0d0:	4638      	mov	r0, r7
 800f0d2:	47c0      	blx	r8
 800f0d4:	3001      	adds	r0, #1
 800f0d6:	d103      	bne.n	800f0e0 <_printf_common+0xac>
 800f0d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0e0:	3501      	adds	r5, #1
 800f0e2:	e7c6      	b.n	800f072 <_printf_common+0x3e>
 800f0e4:	18e1      	adds	r1, r4, r3
 800f0e6:	1c5a      	adds	r2, r3, #1
 800f0e8:	2030      	movs	r0, #48	; 0x30
 800f0ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f0ee:	4422      	add	r2, r4
 800f0f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f0f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f0f8:	3302      	adds	r3, #2
 800f0fa:	e7c7      	b.n	800f08c <_printf_common+0x58>
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	4622      	mov	r2, r4
 800f100:	4649      	mov	r1, r9
 800f102:	4638      	mov	r0, r7
 800f104:	47c0      	blx	r8
 800f106:	3001      	adds	r0, #1
 800f108:	d0e6      	beq.n	800f0d8 <_printf_common+0xa4>
 800f10a:	3601      	adds	r6, #1
 800f10c:	e7d9      	b.n	800f0c2 <_printf_common+0x8e>
	...

0800f110 <_printf_i>:
 800f110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f114:	7e0f      	ldrb	r7, [r1, #24]
 800f116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f118:	2f78      	cmp	r7, #120	; 0x78
 800f11a:	4691      	mov	r9, r2
 800f11c:	4680      	mov	r8, r0
 800f11e:	460c      	mov	r4, r1
 800f120:	469a      	mov	sl, r3
 800f122:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f126:	d807      	bhi.n	800f138 <_printf_i+0x28>
 800f128:	2f62      	cmp	r7, #98	; 0x62
 800f12a:	d80a      	bhi.n	800f142 <_printf_i+0x32>
 800f12c:	2f00      	cmp	r7, #0
 800f12e:	f000 80d4 	beq.w	800f2da <_printf_i+0x1ca>
 800f132:	2f58      	cmp	r7, #88	; 0x58
 800f134:	f000 80c0 	beq.w	800f2b8 <_printf_i+0x1a8>
 800f138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f13c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f140:	e03a      	b.n	800f1b8 <_printf_i+0xa8>
 800f142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f146:	2b15      	cmp	r3, #21
 800f148:	d8f6      	bhi.n	800f138 <_printf_i+0x28>
 800f14a:	a101      	add	r1, pc, #4	; (adr r1, 800f150 <_printf_i+0x40>)
 800f14c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f150:	0800f1a9 	.word	0x0800f1a9
 800f154:	0800f1bd 	.word	0x0800f1bd
 800f158:	0800f139 	.word	0x0800f139
 800f15c:	0800f139 	.word	0x0800f139
 800f160:	0800f139 	.word	0x0800f139
 800f164:	0800f139 	.word	0x0800f139
 800f168:	0800f1bd 	.word	0x0800f1bd
 800f16c:	0800f139 	.word	0x0800f139
 800f170:	0800f139 	.word	0x0800f139
 800f174:	0800f139 	.word	0x0800f139
 800f178:	0800f139 	.word	0x0800f139
 800f17c:	0800f2c1 	.word	0x0800f2c1
 800f180:	0800f1e9 	.word	0x0800f1e9
 800f184:	0800f27b 	.word	0x0800f27b
 800f188:	0800f139 	.word	0x0800f139
 800f18c:	0800f139 	.word	0x0800f139
 800f190:	0800f2e3 	.word	0x0800f2e3
 800f194:	0800f139 	.word	0x0800f139
 800f198:	0800f1e9 	.word	0x0800f1e9
 800f19c:	0800f139 	.word	0x0800f139
 800f1a0:	0800f139 	.word	0x0800f139
 800f1a4:	0800f283 	.word	0x0800f283
 800f1a8:	682b      	ldr	r3, [r5, #0]
 800f1aa:	1d1a      	adds	r2, r3, #4
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	602a      	str	r2, [r5, #0]
 800f1b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f1b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	e09f      	b.n	800f2fc <_printf_i+0x1ec>
 800f1bc:	6820      	ldr	r0, [r4, #0]
 800f1be:	682b      	ldr	r3, [r5, #0]
 800f1c0:	0607      	lsls	r7, r0, #24
 800f1c2:	f103 0104 	add.w	r1, r3, #4
 800f1c6:	6029      	str	r1, [r5, #0]
 800f1c8:	d501      	bpl.n	800f1ce <_printf_i+0xbe>
 800f1ca:	681e      	ldr	r6, [r3, #0]
 800f1cc:	e003      	b.n	800f1d6 <_printf_i+0xc6>
 800f1ce:	0646      	lsls	r6, r0, #25
 800f1d0:	d5fb      	bpl.n	800f1ca <_printf_i+0xba>
 800f1d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f1d6:	2e00      	cmp	r6, #0
 800f1d8:	da03      	bge.n	800f1e2 <_printf_i+0xd2>
 800f1da:	232d      	movs	r3, #45	; 0x2d
 800f1dc:	4276      	negs	r6, r6
 800f1de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1e2:	485a      	ldr	r0, [pc, #360]	; (800f34c <_printf_i+0x23c>)
 800f1e4:	230a      	movs	r3, #10
 800f1e6:	e012      	b.n	800f20e <_printf_i+0xfe>
 800f1e8:	682b      	ldr	r3, [r5, #0]
 800f1ea:	6820      	ldr	r0, [r4, #0]
 800f1ec:	1d19      	adds	r1, r3, #4
 800f1ee:	6029      	str	r1, [r5, #0]
 800f1f0:	0605      	lsls	r5, r0, #24
 800f1f2:	d501      	bpl.n	800f1f8 <_printf_i+0xe8>
 800f1f4:	681e      	ldr	r6, [r3, #0]
 800f1f6:	e002      	b.n	800f1fe <_printf_i+0xee>
 800f1f8:	0641      	lsls	r1, r0, #25
 800f1fa:	d5fb      	bpl.n	800f1f4 <_printf_i+0xe4>
 800f1fc:	881e      	ldrh	r6, [r3, #0]
 800f1fe:	4853      	ldr	r0, [pc, #332]	; (800f34c <_printf_i+0x23c>)
 800f200:	2f6f      	cmp	r7, #111	; 0x6f
 800f202:	bf0c      	ite	eq
 800f204:	2308      	moveq	r3, #8
 800f206:	230a      	movne	r3, #10
 800f208:	2100      	movs	r1, #0
 800f20a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f20e:	6865      	ldr	r5, [r4, #4]
 800f210:	60a5      	str	r5, [r4, #8]
 800f212:	2d00      	cmp	r5, #0
 800f214:	bfa2      	ittt	ge
 800f216:	6821      	ldrge	r1, [r4, #0]
 800f218:	f021 0104 	bicge.w	r1, r1, #4
 800f21c:	6021      	strge	r1, [r4, #0]
 800f21e:	b90e      	cbnz	r6, 800f224 <_printf_i+0x114>
 800f220:	2d00      	cmp	r5, #0
 800f222:	d04b      	beq.n	800f2bc <_printf_i+0x1ac>
 800f224:	4615      	mov	r5, r2
 800f226:	fbb6 f1f3 	udiv	r1, r6, r3
 800f22a:	fb03 6711 	mls	r7, r3, r1, r6
 800f22e:	5dc7      	ldrb	r7, [r0, r7]
 800f230:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f234:	4637      	mov	r7, r6
 800f236:	42bb      	cmp	r3, r7
 800f238:	460e      	mov	r6, r1
 800f23a:	d9f4      	bls.n	800f226 <_printf_i+0x116>
 800f23c:	2b08      	cmp	r3, #8
 800f23e:	d10b      	bne.n	800f258 <_printf_i+0x148>
 800f240:	6823      	ldr	r3, [r4, #0]
 800f242:	07de      	lsls	r6, r3, #31
 800f244:	d508      	bpl.n	800f258 <_printf_i+0x148>
 800f246:	6923      	ldr	r3, [r4, #16]
 800f248:	6861      	ldr	r1, [r4, #4]
 800f24a:	4299      	cmp	r1, r3
 800f24c:	bfde      	ittt	le
 800f24e:	2330      	movle	r3, #48	; 0x30
 800f250:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f254:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f258:	1b52      	subs	r2, r2, r5
 800f25a:	6122      	str	r2, [r4, #16]
 800f25c:	f8cd a000 	str.w	sl, [sp]
 800f260:	464b      	mov	r3, r9
 800f262:	aa03      	add	r2, sp, #12
 800f264:	4621      	mov	r1, r4
 800f266:	4640      	mov	r0, r8
 800f268:	f7ff fee4 	bl	800f034 <_printf_common>
 800f26c:	3001      	adds	r0, #1
 800f26e:	d14a      	bne.n	800f306 <_printf_i+0x1f6>
 800f270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f274:	b004      	add	sp, #16
 800f276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f27a:	6823      	ldr	r3, [r4, #0]
 800f27c:	f043 0320 	orr.w	r3, r3, #32
 800f280:	6023      	str	r3, [r4, #0]
 800f282:	4833      	ldr	r0, [pc, #204]	; (800f350 <_printf_i+0x240>)
 800f284:	2778      	movs	r7, #120	; 0x78
 800f286:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f28a:	6823      	ldr	r3, [r4, #0]
 800f28c:	6829      	ldr	r1, [r5, #0]
 800f28e:	061f      	lsls	r7, r3, #24
 800f290:	f851 6b04 	ldr.w	r6, [r1], #4
 800f294:	d402      	bmi.n	800f29c <_printf_i+0x18c>
 800f296:	065f      	lsls	r7, r3, #25
 800f298:	bf48      	it	mi
 800f29a:	b2b6      	uxthmi	r6, r6
 800f29c:	07df      	lsls	r7, r3, #31
 800f29e:	bf48      	it	mi
 800f2a0:	f043 0320 	orrmi.w	r3, r3, #32
 800f2a4:	6029      	str	r1, [r5, #0]
 800f2a6:	bf48      	it	mi
 800f2a8:	6023      	strmi	r3, [r4, #0]
 800f2aa:	b91e      	cbnz	r6, 800f2b4 <_printf_i+0x1a4>
 800f2ac:	6823      	ldr	r3, [r4, #0]
 800f2ae:	f023 0320 	bic.w	r3, r3, #32
 800f2b2:	6023      	str	r3, [r4, #0]
 800f2b4:	2310      	movs	r3, #16
 800f2b6:	e7a7      	b.n	800f208 <_printf_i+0xf8>
 800f2b8:	4824      	ldr	r0, [pc, #144]	; (800f34c <_printf_i+0x23c>)
 800f2ba:	e7e4      	b.n	800f286 <_printf_i+0x176>
 800f2bc:	4615      	mov	r5, r2
 800f2be:	e7bd      	b.n	800f23c <_printf_i+0x12c>
 800f2c0:	682b      	ldr	r3, [r5, #0]
 800f2c2:	6826      	ldr	r6, [r4, #0]
 800f2c4:	6961      	ldr	r1, [r4, #20]
 800f2c6:	1d18      	adds	r0, r3, #4
 800f2c8:	6028      	str	r0, [r5, #0]
 800f2ca:	0635      	lsls	r5, r6, #24
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	d501      	bpl.n	800f2d4 <_printf_i+0x1c4>
 800f2d0:	6019      	str	r1, [r3, #0]
 800f2d2:	e002      	b.n	800f2da <_printf_i+0x1ca>
 800f2d4:	0670      	lsls	r0, r6, #25
 800f2d6:	d5fb      	bpl.n	800f2d0 <_printf_i+0x1c0>
 800f2d8:	8019      	strh	r1, [r3, #0]
 800f2da:	2300      	movs	r3, #0
 800f2dc:	6123      	str	r3, [r4, #16]
 800f2de:	4615      	mov	r5, r2
 800f2e0:	e7bc      	b.n	800f25c <_printf_i+0x14c>
 800f2e2:	682b      	ldr	r3, [r5, #0]
 800f2e4:	1d1a      	adds	r2, r3, #4
 800f2e6:	602a      	str	r2, [r5, #0]
 800f2e8:	681d      	ldr	r5, [r3, #0]
 800f2ea:	6862      	ldr	r2, [r4, #4]
 800f2ec:	2100      	movs	r1, #0
 800f2ee:	4628      	mov	r0, r5
 800f2f0:	f7f0 ff6e 	bl	80001d0 <memchr>
 800f2f4:	b108      	cbz	r0, 800f2fa <_printf_i+0x1ea>
 800f2f6:	1b40      	subs	r0, r0, r5
 800f2f8:	6060      	str	r0, [r4, #4]
 800f2fa:	6863      	ldr	r3, [r4, #4]
 800f2fc:	6123      	str	r3, [r4, #16]
 800f2fe:	2300      	movs	r3, #0
 800f300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f304:	e7aa      	b.n	800f25c <_printf_i+0x14c>
 800f306:	6923      	ldr	r3, [r4, #16]
 800f308:	462a      	mov	r2, r5
 800f30a:	4649      	mov	r1, r9
 800f30c:	4640      	mov	r0, r8
 800f30e:	47d0      	blx	sl
 800f310:	3001      	adds	r0, #1
 800f312:	d0ad      	beq.n	800f270 <_printf_i+0x160>
 800f314:	6823      	ldr	r3, [r4, #0]
 800f316:	079b      	lsls	r3, r3, #30
 800f318:	d413      	bmi.n	800f342 <_printf_i+0x232>
 800f31a:	68e0      	ldr	r0, [r4, #12]
 800f31c:	9b03      	ldr	r3, [sp, #12]
 800f31e:	4298      	cmp	r0, r3
 800f320:	bfb8      	it	lt
 800f322:	4618      	movlt	r0, r3
 800f324:	e7a6      	b.n	800f274 <_printf_i+0x164>
 800f326:	2301      	movs	r3, #1
 800f328:	4632      	mov	r2, r6
 800f32a:	4649      	mov	r1, r9
 800f32c:	4640      	mov	r0, r8
 800f32e:	47d0      	blx	sl
 800f330:	3001      	adds	r0, #1
 800f332:	d09d      	beq.n	800f270 <_printf_i+0x160>
 800f334:	3501      	adds	r5, #1
 800f336:	68e3      	ldr	r3, [r4, #12]
 800f338:	9903      	ldr	r1, [sp, #12]
 800f33a:	1a5b      	subs	r3, r3, r1
 800f33c:	42ab      	cmp	r3, r5
 800f33e:	dcf2      	bgt.n	800f326 <_printf_i+0x216>
 800f340:	e7eb      	b.n	800f31a <_printf_i+0x20a>
 800f342:	2500      	movs	r5, #0
 800f344:	f104 0619 	add.w	r6, r4, #25
 800f348:	e7f5      	b.n	800f336 <_printf_i+0x226>
 800f34a:	bf00      	nop
 800f34c:	080108c9 	.word	0x080108c9
 800f350:	080108da 	.word	0x080108da

0800f354 <__malloc_lock>:
 800f354:	4801      	ldr	r0, [pc, #4]	; (800f35c <__malloc_lock+0x8>)
 800f356:	f7ff bc65 	b.w	800ec24 <__retarget_lock_acquire_recursive>
 800f35a:	bf00      	nop
 800f35c:	20005414 	.word	0x20005414

0800f360 <__malloc_unlock>:
 800f360:	4801      	ldr	r0, [pc, #4]	; (800f368 <__malloc_unlock+0x8>)
 800f362:	f7ff bc60 	b.w	800ec26 <__retarget_lock_release_recursive>
 800f366:	bf00      	nop
 800f368:	20005414 	.word	0x20005414

0800f36c <_realloc_r>:
 800f36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f370:	4680      	mov	r8, r0
 800f372:	4614      	mov	r4, r2
 800f374:	460e      	mov	r6, r1
 800f376:	b921      	cbnz	r1, 800f382 <_realloc_r+0x16>
 800f378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f37c:	4611      	mov	r1, r2
 800f37e:	f7ff bdd9 	b.w	800ef34 <_malloc_r>
 800f382:	b92a      	cbnz	r2, 800f390 <_realloc_r+0x24>
 800f384:	f000 f84c 	bl	800f420 <_free_r>
 800f388:	4625      	mov	r5, r4
 800f38a:	4628      	mov	r0, r5
 800f38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f390:	f000 f892 	bl	800f4b8 <_malloc_usable_size_r>
 800f394:	4284      	cmp	r4, r0
 800f396:	4607      	mov	r7, r0
 800f398:	d802      	bhi.n	800f3a0 <_realloc_r+0x34>
 800f39a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f39e:	d812      	bhi.n	800f3c6 <_realloc_r+0x5a>
 800f3a0:	4621      	mov	r1, r4
 800f3a2:	4640      	mov	r0, r8
 800f3a4:	f7ff fdc6 	bl	800ef34 <_malloc_r>
 800f3a8:	4605      	mov	r5, r0
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	d0ed      	beq.n	800f38a <_realloc_r+0x1e>
 800f3ae:	42bc      	cmp	r4, r7
 800f3b0:	4622      	mov	r2, r4
 800f3b2:	4631      	mov	r1, r6
 800f3b4:	bf28      	it	cs
 800f3b6:	463a      	movcs	r2, r7
 800f3b8:	f7ff fc36 	bl	800ec28 <memcpy>
 800f3bc:	4631      	mov	r1, r6
 800f3be:	4640      	mov	r0, r8
 800f3c0:	f000 f82e 	bl	800f420 <_free_r>
 800f3c4:	e7e1      	b.n	800f38a <_realloc_r+0x1e>
 800f3c6:	4635      	mov	r5, r6
 800f3c8:	e7df      	b.n	800f38a <_realloc_r+0x1e>

0800f3ca <memmove>:
 800f3ca:	4288      	cmp	r0, r1
 800f3cc:	b510      	push	{r4, lr}
 800f3ce:	eb01 0402 	add.w	r4, r1, r2
 800f3d2:	d902      	bls.n	800f3da <memmove+0x10>
 800f3d4:	4284      	cmp	r4, r0
 800f3d6:	4623      	mov	r3, r4
 800f3d8:	d807      	bhi.n	800f3ea <memmove+0x20>
 800f3da:	1e43      	subs	r3, r0, #1
 800f3dc:	42a1      	cmp	r1, r4
 800f3de:	d008      	beq.n	800f3f2 <memmove+0x28>
 800f3e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f3e8:	e7f8      	b.n	800f3dc <memmove+0x12>
 800f3ea:	4402      	add	r2, r0
 800f3ec:	4601      	mov	r1, r0
 800f3ee:	428a      	cmp	r2, r1
 800f3f0:	d100      	bne.n	800f3f4 <memmove+0x2a>
 800f3f2:	bd10      	pop	{r4, pc}
 800f3f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f3f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f3fc:	e7f7      	b.n	800f3ee <memmove+0x24>
	...

0800f400 <_sbrk_r>:
 800f400:	b538      	push	{r3, r4, r5, lr}
 800f402:	4d06      	ldr	r5, [pc, #24]	; (800f41c <_sbrk_r+0x1c>)
 800f404:	2300      	movs	r3, #0
 800f406:	4604      	mov	r4, r0
 800f408:	4608      	mov	r0, r1
 800f40a:	602b      	str	r3, [r5, #0]
 800f40c:	f7f7 f892 	bl	8006534 <_sbrk>
 800f410:	1c43      	adds	r3, r0, #1
 800f412:	d102      	bne.n	800f41a <_sbrk_r+0x1a>
 800f414:	682b      	ldr	r3, [r5, #0]
 800f416:	b103      	cbz	r3, 800f41a <_sbrk_r+0x1a>
 800f418:	6023      	str	r3, [r4, #0]
 800f41a:	bd38      	pop	{r3, r4, r5, pc}
 800f41c:	20005420 	.word	0x20005420

0800f420 <_free_r>:
 800f420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f422:	2900      	cmp	r1, #0
 800f424:	d044      	beq.n	800f4b0 <_free_r+0x90>
 800f426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f42a:	9001      	str	r0, [sp, #4]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	f1a1 0404 	sub.w	r4, r1, #4
 800f432:	bfb8      	it	lt
 800f434:	18e4      	addlt	r4, r4, r3
 800f436:	f7ff ff8d 	bl	800f354 <__malloc_lock>
 800f43a:	4a1e      	ldr	r2, [pc, #120]	; (800f4b4 <_free_r+0x94>)
 800f43c:	9801      	ldr	r0, [sp, #4]
 800f43e:	6813      	ldr	r3, [r2, #0]
 800f440:	b933      	cbnz	r3, 800f450 <_free_r+0x30>
 800f442:	6063      	str	r3, [r4, #4]
 800f444:	6014      	str	r4, [r2, #0]
 800f446:	b003      	add	sp, #12
 800f448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f44c:	f7ff bf88 	b.w	800f360 <__malloc_unlock>
 800f450:	42a3      	cmp	r3, r4
 800f452:	d908      	bls.n	800f466 <_free_r+0x46>
 800f454:	6825      	ldr	r5, [r4, #0]
 800f456:	1961      	adds	r1, r4, r5
 800f458:	428b      	cmp	r3, r1
 800f45a:	bf01      	itttt	eq
 800f45c:	6819      	ldreq	r1, [r3, #0]
 800f45e:	685b      	ldreq	r3, [r3, #4]
 800f460:	1949      	addeq	r1, r1, r5
 800f462:	6021      	streq	r1, [r4, #0]
 800f464:	e7ed      	b.n	800f442 <_free_r+0x22>
 800f466:	461a      	mov	r2, r3
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	b10b      	cbz	r3, 800f470 <_free_r+0x50>
 800f46c:	42a3      	cmp	r3, r4
 800f46e:	d9fa      	bls.n	800f466 <_free_r+0x46>
 800f470:	6811      	ldr	r1, [r2, #0]
 800f472:	1855      	adds	r5, r2, r1
 800f474:	42a5      	cmp	r5, r4
 800f476:	d10b      	bne.n	800f490 <_free_r+0x70>
 800f478:	6824      	ldr	r4, [r4, #0]
 800f47a:	4421      	add	r1, r4
 800f47c:	1854      	adds	r4, r2, r1
 800f47e:	42a3      	cmp	r3, r4
 800f480:	6011      	str	r1, [r2, #0]
 800f482:	d1e0      	bne.n	800f446 <_free_r+0x26>
 800f484:	681c      	ldr	r4, [r3, #0]
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	6053      	str	r3, [r2, #4]
 800f48a:	440c      	add	r4, r1
 800f48c:	6014      	str	r4, [r2, #0]
 800f48e:	e7da      	b.n	800f446 <_free_r+0x26>
 800f490:	d902      	bls.n	800f498 <_free_r+0x78>
 800f492:	230c      	movs	r3, #12
 800f494:	6003      	str	r3, [r0, #0]
 800f496:	e7d6      	b.n	800f446 <_free_r+0x26>
 800f498:	6825      	ldr	r5, [r4, #0]
 800f49a:	1961      	adds	r1, r4, r5
 800f49c:	428b      	cmp	r3, r1
 800f49e:	bf04      	itt	eq
 800f4a0:	6819      	ldreq	r1, [r3, #0]
 800f4a2:	685b      	ldreq	r3, [r3, #4]
 800f4a4:	6063      	str	r3, [r4, #4]
 800f4a6:	bf04      	itt	eq
 800f4a8:	1949      	addeq	r1, r1, r5
 800f4aa:	6021      	streq	r1, [r4, #0]
 800f4ac:	6054      	str	r4, [r2, #4]
 800f4ae:	e7ca      	b.n	800f446 <_free_r+0x26>
 800f4b0:	b003      	add	sp, #12
 800f4b2:	bd30      	pop	{r4, r5, pc}
 800f4b4:	20005418 	.word	0x20005418

0800f4b8 <_malloc_usable_size_r>:
 800f4b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4bc:	1f18      	subs	r0, r3, #4
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	bfbc      	itt	lt
 800f4c2:	580b      	ldrlt	r3, [r1, r0]
 800f4c4:	18c0      	addlt	r0, r0, r3
 800f4c6:	4770      	bx	lr

0800f4c8 <sqrtf>:
 800f4c8:	b508      	push	{r3, lr}
 800f4ca:	ed2d 8b02 	vpush	{d8}
 800f4ce:	eeb0 8a40 	vmov.f32	s16, s0
 800f4d2:	f000 f9ff 	bl	800f8d4 <__ieee754_sqrtf>
 800f4d6:	eeb4 8a48 	vcmp.f32	s16, s16
 800f4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4de:	d60c      	bvs.n	800f4fa <sqrtf+0x32>
 800f4e0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f500 <sqrtf+0x38>
 800f4e4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ec:	d505      	bpl.n	800f4fa <sqrtf+0x32>
 800f4ee:	f7ff fb6f 	bl	800ebd0 <__errno>
 800f4f2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f4f6:	2321      	movs	r3, #33	; 0x21
 800f4f8:	6003      	str	r3, [r0, #0]
 800f4fa:	ecbd 8b02 	vpop	{d8}
 800f4fe:	bd08      	pop	{r3, pc}
 800f500:	00000000 	.word	0x00000000

0800f504 <atanf>:
 800f504:	b538      	push	{r3, r4, r5, lr}
 800f506:	ee10 5a10 	vmov	r5, s0
 800f50a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f50e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800f512:	eef0 7a40 	vmov.f32	s15, s0
 800f516:	db10      	blt.n	800f53a <atanf+0x36>
 800f518:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f51c:	dd04      	ble.n	800f528 <atanf+0x24>
 800f51e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800f522:	eeb0 0a67 	vmov.f32	s0, s15
 800f526:	bd38      	pop	{r3, r4, r5, pc}
 800f528:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800f660 <atanf+0x15c>
 800f52c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800f664 <atanf+0x160>
 800f530:	2d00      	cmp	r5, #0
 800f532:	bfd8      	it	le
 800f534:	eef0 7a47 	vmovle.f32	s15, s14
 800f538:	e7f3      	b.n	800f522 <atanf+0x1e>
 800f53a:	4b4b      	ldr	r3, [pc, #300]	; (800f668 <atanf+0x164>)
 800f53c:	429c      	cmp	r4, r3
 800f53e:	dc10      	bgt.n	800f562 <atanf+0x5e>
 800f540:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800f544:	da0a      	bge.n	800f55c <atanf+0x58>
 800f546:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800f66c <atanf+0x168>
 800f54a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f54e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f552:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f55a:	dce2      	bgt.n	800f522 <atanf+0x1e>
 800f55c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f560:	e013      	b.n	800f58a <atanf+0x86>
 800f562:	f000 f8a3 	bl	800f6ac <fabsf>
 800f566:	4b42      	ldr	r3, [pc, #264]	; (800f670 <atanf+0x16c>)
 800f568:	429c      	cmp	r4, r3
 800f56a:	dc4f      	bgt.n	800f60c <atanf+0x108>
 800f56c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800f570:	429c      	cmp	r4, r3
 800f572:	dc41      	bgt.n	800f5f8 <atanf+0xf4>
 800f574:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f578:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f57c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f580:	2300      	movs	r3, #0
 800f582:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f586:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f58a:	1c5a      	adds	r2, r3, #1
 800f58c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f590:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f674 <atanf+0x170>
 800f594:	eddf 5a38 	vldr	s11, [pc, #224]	; 800f678 <atanf+0x174>
 800f598:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800f67c <atanf+0x178>
 800f59c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800f5a0:	eee6 5a87 	vfma.f32	s11, s13, s14
 800f5a4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800f680 <atanf+0x17c>
 800f5a8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f5ac:	eddf 5a35 	vldr	s11, [pc, #212]	; 800f684 <atanf+0x180>
 800f5b0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f5b4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f688 <atanf+0x184>
 800f5b8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f5bc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f68c <atanf+0x188>
 800f5c0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f5c4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800f690 <atanf+0x18c>
 800f5c8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800f5cc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800f694 <atanf+0x190>
 800f5d0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f5d4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800f698 <atanf+0x194>
 800f5d8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800f5dc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800f69c <atanf+0x198>
 800f5e0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f5e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f5e8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f5ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f5f0:	d121      	bne.n	800f636 <atanf+0x132>
 800f5f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f5f6:	e794      	b.n	800f522 <atanf+0x1e>
 800f5f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f5fc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f600:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f604:	2301      	movs	r3, #1
 800f606:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f60a:	e7be      	b.n	800f58a <atanf+0x86>
 800f60c:	4b24      	ldr	r3, [pc, #144]	; (800f6a0 <atanf+0x19c>)
 800f60e:	429c      	cmp	r4, r3
 800f610:	dc0b      	bgt.n	800f62a <atanf+0x126>
 800f612:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800f616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f61a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f61e:	2302      	movs	r3, #2
 800f620:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f628:	e7af      	b.n	800f58a <atanf+0x86>
 800f62a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f62e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f632:	2303      	movs	r3, #3
 800f634:	e7a9      	b.n	800f58a <atanf+0x86>
 800f636:	4a1b      	ldr	r2, [pc, #108]	; (800f6a4 <atanf+0x1a0>)
 800f638:	491b      	ldr	r1, [pc, #108]	; (800f6a8 <atanf+0x1a4>)
 800f63a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f63e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f642:	edd3 6a00 	vldr	s13, [r3]
 800f646:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f64a:	2d00      	cmp	r5, #0
 800f64c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f650:	edd2 7a00 	vldr	s15, [r2]
 800f654:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f658:	bfb8      	it	lt
 800f65a:	eef1 7a67 	vneglt.f32	s15, s15
 800f65e:	e760      	b.n	800f522 <atanf+0x1e>
 800f660:	3fc90fdb 	.word	0x3fc90fdb
 800f664:	bfc90fdb 	.word	0xbfc90fdb
 800f668:	3edfffff 	.word	0x3edfffff
 800f66c:	7149f2ca 	.word	0x7149f2ca
 800f670:	3f97ffff 	.word	0x3f97ffff
 800f674:	3c8569d7 	.word	0x3c8569d7
 800f678:	3d4bda59 	.word	0x3d4bda59
 800f67c:	bd6ef16b 	.word	0xbd6ef16b
 800f680:	3d886b35 	.word	0x3d886b35
 800f684:	3dba2e6e 	.word	0x3dba2e6e
 800f688:	3e124925 	.word	0x3e124925
 800f68c:	3eaaaaab 	.word	0x3eaaaaab
 800f690:	bd15a221 	.word	0xbd15a221
 800f694:	bd9d8795 	.word	0xbd9d8795
 800f698:	bde38e38 	.word	0xbde38e38
 800f69c:	be4ccccd 	.word	0xbe4ccccd
 800f6a0:	401bffff 	.word	0x401bffff
 800f6a4:	080108ec 	.word	0x080108ec
 800f6a8:	080108fc 	.word	0x080108fc

0800f6ac <fabsf>:
 800f6ac:	ee10 3a10 	vmov	r3, s0
 800f6b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f6b4:	ee00 3a10 	vmov	s0, r3
 800f6b8:	4770      	bx	lr
	...

0800f6bc <tanf>:
 800f6bc:	ee10 3a10 	vmov	r3, s0
 800f6c0:	b507      	push	{r0, r1, r2, lr}
 800f6c2:	4a12      	ldr	r2, [pc, #72]	; (800f70c <tanf+0x50>)
 800f6c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	dc07      	bgt.n	800f6dc <tanf+0x20>
 800f6cc:	eddf 0a10 	vldr	s1, [pc, #64]	; 800f710 <tanf+0x54>
 800f6d0:	2001      	movs	r0, #1
 800f6d2:	b003      	add	sp, #12
 800f6d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6d8:	f000 b81c 	b.w	800f714 <__kernel_tanf>
 800f6dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f6e0:	db04      	blt.n	800f6ec <tanf+0x30>
 800f6e2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f6e6:	b003      	add	sp, #12
 800f6e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6ec:	4668      	mov	r0, sp
 800f6ee:	f000 f8f5 	bl	800f8dc <__ieee754_rem_pio2f>
 800f6f2:	0040      	lsls	r0, r0, #1
 800f6f4:	f000 0002 	and.w	r0, r0, #2
 800f6f8:	eddd 0a01 	vldr	s1, [sp, #4]
 800f6fc:	ed9d 0a00 	vldr	s0, [sp]
 800f700:	f1c0 0001 	rsb	r0, r0, #1
 800f704:	f000 f806 	bl	800f714 <__kernel_tanf>
 800f708:	e7ed      	b.n	800f6e6 <tanf+0x2a>
 800f70a:	bf00      	nop
 800f70c:	3f490fda 	.word	0x3f490fda
 800f710:	00000000 	.word	0x00000000

0800f714 <__kernel_tanf>:
 800f714:	b508      	push	{r3, lr}
 800f716:	ee10 3a10 	vmov	r3, s0
 800f71a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f71e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800f722:	eef0 7a40 	vmov.f32	s15, s0
 800f726:	da17      	bge.n	800f758 <__kernel_tanf+0x44>
 800f728:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800f72c:	ee17 1a10 	vmov	r1, s14
 800f730:	bb41      	cbnz	r1, 800f784 <__kernel_tanf+0x70>
 800f732:	1c43      	adds	r3, r0, #1
 800f734:	4313      	orrs	r3, r2
 800f736:	d108      	bne.n	800f74a <__kernel_tanf+0x36>
 800f738:	f7ff ffb8 	bl	800f6ac <fabsf>
 800f73c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f740:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f744:	eeb0 0a67 	vmov.f32	s0, s15
 800f748:	bd08      	pop	{r3, pc}
 800f74a:	2801      	cmp	r0, #1
 800f74c:	d0fa      	beq.n	800f744 <__kernel_tanf+0x30>
 800f74e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f752:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f756:	e7f5      	b.n	800f744 <__kernel_tanf+0x30>
 800f758:	494c      	ldr	r1, [pc, #304]	; (800f88c <__kernel_tanf+0x178>)
 800f75a:	428a      	cmp	r2, r1
 800f75c:	db12      	blt.n	800f784 <__kernel_tanf+0x70>
 800f75e:	2b00      	cmp	r3, #0
 800f760:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800f890 <__kernel_tanf+0x17c>
 800f764:	bfb8      	it	lt
 800f766:	eef1 7a40 	vneglt.f32	s15, s0
 800f76a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f76e:	eddf 7a49 	vldr	s15, [pc, #292]	; 800f894 <__kernel_tanf+0x180>
 800f772:	bfb8      	it	lt
 800f774:	eef1 0a60 	vneglt.f32	s1, s1
 800f778:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f77c:	eddf 0a46 	vldr	s1, [pc, #280]	; 800f898 <__kernel_tanf+0x184>
 800f780:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f784:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800f788:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f89c <__kernel_tanf+0x188>
 800f78c:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800f8a0 <__kernel_tanf+0x18c>
 800f790:	ed9f 5a44 	vldr	s10, [pc, #272]	; 800f8a4 <__kernel_tanf+0x190>
 800f794:	493d      	ldr	r1, [pc, #244]	; (800f88c <__kernel_tanf+0x178>)
 800f796:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f79a:	428a      	cmp	r2, r1
 800f79c:	eea7 6a25 	vfma.f32	s12, s14, s11
 800f7a0:	eddf 5a41 	vldr	s11, [pc, #260]	; 800f8a8 <__kernel_tanf+0x194>
 800f7a4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f7a8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800f8ac <__kernel_tanf+0x198>
 800f7ac:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f7b0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800f8b0 <__kernel_tanf+0x19c>
 800f7b4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f7b8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800f8b4 <__kernel_tanf+0x1a0>
 800f7bc:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f7c0:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800f8b8 <__kernel_tanf+0x1a4>
 800f7c4:	eee7 5a05 	vfma.f32	s11, s14, s10
 800f7c8:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800f8bc <__kernel_tanf+0x1a8>
 800f7cc:	eea5 5a87 	vfma.f32	s10, s11, s14
 800f7d0:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800f8c0 <__kernel_tanf+0x1ac>
 800f7d4:	eee5 5a07 	vfma.f32	s11, s10, s14
 800f7d8:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800f8c4 <__kernel_tanf+0x1b0>
 800f7dc:	eea5 5a87 	vfma.f32	s10, s11, s14
 800f7e0:	eddf 5a39 	vldr	s11, [pc, #228]	; 800f8c8 <__kernel_tanf+0x1b4>
 800f7e4:	eee5 5a07 	vfma.f32	s11, s10, s14
 800f7e8:	eeb0 7a46 	vmov.f32	s14, s12
 800f7ec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f7f0:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800f7f4:	eeb0 6a60 	vmov.f32	s12, s1
 800f7f8:	eea7 6a05 	vfma.f32	s12, s14, s10
 800f7fc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800f8cc <__kernel_tanf+0x1b8>
 800f800:	eee6 0a26 	vfma.f32	s1, s12, s13
 800f804:	eee5 0a07 	vfma.f32	s1, s10, s14
 800f808:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800f80c:	db1d      	blt.n	800f84a <__kernel_tanf+0x136>
 800f80e:	ee07 0a10 	vmov	s14, r0
 800f812:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f816:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800f81a:	ee76 6a87 	vadd.f32	s13, s13, s14
 800f81e:	179b      	asrs	r3, r3, #30
 800f820:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800f824:	f003 0302 	and.w	r3, r3, #2
 800f828:	f1c3 0301 	rsb	r3, r3, #1
 800f82c:	ee76 6a60 	vsub.f32	s13, s12, s1
 800f830:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f834:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f838:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f83c:	ee07 3a90 	vmov	s15, r3
 800f840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f844:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f848:	e77c      	b.n	800f744 <__kernel_tanf+0x30>
 800f84a:	2801      	cmp	r0, #1
 800f84c:	d01b      	beq.n	800f886 <__kernel_tanf+0x172>
 800f84e:	4b20      	ldr	r3, [pc, #128]	; (800f8d0 <__kernel_tanf+0x1bc>)
 800f850:	ee16 2a90 	vmov	r2, s13
 800f854:	401a      	ands	r2, r3
 800f856:	ee05 2a90 	vmov	s11, r2
 800f85a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f85e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f862:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f866:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800f86a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800f86e:	ee16 2a10 	vmov	r2, s12
 800f872:	4013      	ands	r3, r2
 800f874:	ee07 3a90 	vmov	s15, r3
 800f878:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f87c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800f880:	eee7 7a06 	vfma.f32	s15, s14, s12
 800f884:	e75e      	b.n	800f744 <__kernel_tanf+0x30>
 800f886:	eef0 7a66 	vmov.f32	s15, s13
 800f88a:	e75b      	b.n	800f744 <__kernel_tanf+0x30>
 800f88c:	3f2ca140 	.word	0x3f2ca140
 800f890:	3f490fda 	.word	0x3f490fda
 800f894:	33222168 	.word	0x33222168
 800f898:	00000000 	.word	0x00000000
 800f89c:	b79bae5f 	.word	0xb79bae5f
 800f8a0:	38a3f445 	.word	0x38a3f445
 800f8a4:	37d95384 	.word	0x37d95384
 800f8a8:	3a1a26c8 	.word	0x3a1a26c8
 800f8ac:	3b6b6916 	.word	0x3b6b6916
 800f8b0:	3cb327a4 	.word	0x3cb327a4
 800f8b4:	3e088889 	.word	0x3e088889
 800f8b8:	3895c07a 	.word	0x3895c07a
 800f8bc:	398137b9 	.word	0x398137b9
 800f8c0:	3abede48 	.word	0x3abede48
 800f8c4:	3c11371f 	.word	0x3c11371f
 800f8c8:	3d5d0dd1 	.word	0x3d5d0dd1
 800f8cc:	3eaaaaab 	.word	0x3eaaaaab
 800f8d0:	fffff000 	.word	0xfffff000

0800f8d4 <__ieee754_sqrtf>:
 800f8d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f8d8:	4770      	bx	lr
	...

0800f8dc <__ieee754_rem_pio2f>:
 800f8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8de:	ee10 6a10 	vmov	r6, s0
 800f8e2:	4b86      	ldr	r3, [pc, #536]	; (800fafc <__ieee754_rem_pio2f+0x220>)
 800f8e4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f8e8:	429d      	cmp	r5, r3
 800f8ea:	b087      	sub	sp, #28
 800f8ec:	4604      	mov	r4, r0
 800f8ee:	dc05      	bgt.n	800f8fc <__ieee754_rem_pio2f+0x20>
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	ed80 0a00 	vstr	s0, [r0]
 800f8f6:	6043      	str	r3, [r0, #4]
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	e020      	b.n	800f93e <__ieee754_rem_pio2f+0x62>
 800f8fc:	4b80      	ldr	r3, [pc, #512]	; (800fb00 <__ieee754_rem_pio2f+0x224>)
 800f8fe:	429d      	cmp	r5, r3
 800f900:	dc38      	bgt.n	800f974 <__ieee754_rem_pio2f+0x98>
 800f902:	2e00      	cmp	r6, #0
 800f904:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800fb04 <__ieee754_rem_pio2f+0x228>
 800f908:	4b7f      	ldr	r3, [pc, #508]	; (800fb08 <__ieee754_rem_pio2f+0x22c>)
 800f90a:	f025 050f 	bic.w	r5, r5, #15
 800f90e:	dd18      	ble.n	800f942 <__ieee754_rem_pio2f+0x66>
 800f910:	429d      	cmp	r5, r3
 800f912:	ee70 7a47 	vsub.f32	s15, s0, s14
 800f916:	bf09      	itett	eq
 800f918:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800fb0c <__ieee754_rem_pio2f+0x230>
 800f91c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800fb10 <__ieee754_rem_pio2f+0x234>
 800f920:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800f924:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800fb14 <__ieee754_rem_pio2f+0x238>
 800f928:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f92c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f930:	edc0 6a00 	vstr	s13, [r0]
 800f934:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f938:	edc0 7a01 	vstr	s15, [r0, #4]
 800f93c:	2001      	movs	r0, #1
 800f93e:	b007      	add	sp, #28
 800f940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f942:	429d      	cmp	r5, r3
 800f944:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f948:	bf09      	itett	eq
 800f94a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800fb0c <__ieee754_rem_pio2f+0x230>
 800f94e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800fb10 <__ieee754_rem_pio2f+0x234>
 800f952:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800f956:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800fb14 <__ieee754_rem_pio2f+0x238>
 800f95a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f95e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f962:	edc0 6a00 	vstr	s13, [r0]
 800f966:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f96a:	edc0 7a01 	vstr	s15, [r0, #4]
 800f96e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f972:	e7e4      	b.n	800f93e <__ieee754_rem_pio2f+0x62>
 800f974:	4b68      	ldr	r3, [pc, #416]	; (800fb18 <__ieee754_rem_pio2f+0x23c>)
 800f976:	429d      	cmp	r5, r3
 800f978:	dc71      	bgt.n	800fa5e <__ieee754_rem_pio2f+0x182>
 800f97a:	f7ff fe97 	bl	800f6ac <fabsf>
 800f97e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800fb1c <__ieee754_rem_pio2f+0x240>
 800f982:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f986:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f98a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f98e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f992:	ee17 0a90 	vmov	r0, s15
 800f996:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800fb04 <__ieee754_rem_pio2f+0x228>
 800f99a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f99e:	281f      	cmp	r0, #31
 800f9a0:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800fb10 <__ieee754_rem_pio2f+0x234>
 800f9a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9a8:	eeb1 6a47 	vneg.f32	s12, s14
 800f9ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f9b0:	ee16 2a90 	vmov	r2, s13
 800f9b4:	dc1c      	bgt.n	800f9f0 <__ieee754_rem_pio2f+0x114>
 800f9b6:	495a      	ldr	r1, [pc, #360]	; (800fb20 <__ieee754_rem_pio2f+0x244>)
 800f9b8:	1e47      	subs	r7, r0, #1
 800f9ba:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800f9be:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800f9c2:	428b      	cmp	r3, r1
 800f9c4:	d014      	beq.n	800f9f0 <__ieee754_rem_pio2f+0x114>
 800f9c6:	6022      	str	r2, [r4, #0]
 800f9c8:	ed94 7a00 	vldr	s14, [r4]
 800f9cc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f9d0:	2e00      	cmp	r6, #0
 800f9d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f9d6:	ed84 0a01 	vstr	s0, [r4, #4]
 800f9da:	dab0      	bge.n	800f93e <__ieee754_rem_pio2f+0x62>
 800f9dc:	eeb1 7a47 	vneg.f32	s14, s14
 800f9e0:	eeb1 0a40 	vneg.f32	s0, s0
 800f9e4:	ed84 7a00 	vstr	s14, [r4]
 800f9e8:	ed84 0a01 	vstr	s0, [r4, #4]
 800f9ec:	4240      	negs	r0, r0
 800f9ee:	e7a6      	b.n	800f93e <__ieee754_rem_pio2f+0x62>
 800f9f0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f9f4:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800f9f8:	2908      	cmp	r1, #8
 800f9fa:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f9fe:	dde2      	ble.n	800f9c6 <__ieee754_rem_pio2f+0xea>
 800fa00:	eddf 5a42 	vldr	s11, [pc, #264]	; 800fb0c <__ieee754_rem_pio2f+0x230>
 800fa04:	eef0 6a40 	vmov.f32	s13, s0
 800fa08:	eee6 6a25 	vfma.f32	s13, s12, s11
 800fa0c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800fa10:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fa14:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800fb14 <__ieee754_rem_pio2f+0x238>
 800fa18:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800fa1c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800fa20:	ee15 2a90 	vmov	r2, s11
 800fa24:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800fa28:	1a5b      	subs	r3, r3, r1
 800fa2a:	2b19      	cmp	r3, #25
 800fa2c:	dc04      	bgt.n	800fa38 <__ieee754_rem_pio2f+0x15c>
 800fa2e:	edc4 5a00 	vstr	s11, [r4]
 800fa32:	eeb0 0a66 	vmov.f32	s0, s13
 800fa36:	e7c7      	b.n	800f9c8 <__ieee754_rem_pio2f+0xec>
 800fa38:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800fb24 <__ieee754_rem_pio2f+0x248>
 800fa3c:	eeb0 0a66 	vmov.f32	s0, s13
 800fa40:	eea6 0a25 	vfma.f32	s0, s12, s11
 800fa44:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800fa48:	eddf 6a37 	vldr	s13, [pc, #220]	; 800fb28 <__ieee754_rem_pio2f+0x24c>
 800fa4c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fa50:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800fa54:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fa58:	ed84 7a00 	vstr	s14, [r4]
 800fa5c:	e7b4      	b.n	800f9c8 <__ieee754_rem_pio2f+0xec>
 800fa5e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800fa62:	db06      	blt.n	800fa72 <__ieee754_rem_pio2f+0x196>
 800fa64:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fa68:	edc0 7a01 	vstr	s15, [r0, #4]
 800fa6c:	edc0 7a00 	vstr	s15, [r0]
 800fa70:	e742      	b.n	800f8f8 <__ieee754_rem_pio2f+0x1c>
 800fa72:	15ea      	asrs	r2, r5, #23
 800fa74:	3a86      	subs	r2, #134	; 0x86
 800fa76:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800fa7a:	ee07 3a90 	vmov	s15, r3
 800fa7e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fa82:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800fb2c <__ieee754_rem_pio2f+0x250>
 800fa86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fa8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa8e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800fa92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fa9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fa9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800faa2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800faa6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800faaa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800faae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fab2:	edcd 7a05 	vstr	s15, [sp, #20]
 800fab6:	d11e      	bne.n	800faf6 <__ieee754_rem_pio2f+0x21a>
 800fab8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac0:	bf14      	ite	ne
 800fac2:	2302      	movne	r3, #2
 800fac4:	2301      	moveq	r3, #1
 800fac6:	491a      	ldr	r1, [pc, #104]	; (800fb30 <__ieee754_rem_pio2f+0x254>)
 800fac8:	9101      	str	r1, [sp, #4]
 800faca:	2102      	movs	r1, #2
 800facc:	9100      	str	r1, [sp, #0]
 800face:	a803      	add	r0, sp, #12
 800fad0:	4621      	mov	r1, r4
 800fad2:	f000 f82f 	bl	800fb34 <__kernel_rem_pio2f>
 800fad6:	2e00      	cmp	r6, #0
 800fad8:	f6bf af31 	bge.w	800f93e <__ieee754_rem_pio2f+0x62>
 800fadc:	edd4 7a00 	vldr	s15, [r4]
 800fae0:	eef1 7a67 	vneg.f32	s15, s15
 800fae4:	edc4 7a00 	vstr	s15, [r4]
 800fae8:	edd4 7a01 	vldr	s15, [r4, #4]
 800faec:	eef1 7a67 	vneg.f32	s15, s15
 800faf0:	edc4 7a01 	vstr	s15, [r4, #4]
 800faf4:	e77a      	b.n	800f9ec <__ieee754_rem_pio2f+0x110>
 800faf6:	2303      	movs	r3, #3
 800faf8:	e7e5      	b.n	800fac6 <__ieee754_rem_pio2f+0x1ea>
 800fafa:	bf00      	nop
 800fafc:	3f490fd8 	.word	0x3f490fd8
 800fb00:	4016cbe3 	.word	0x4016cbe3
 800fb04:	3fc90f80 	.word	0x3fc90f80
 800fb08:	3fc90fd0 	.word	0x3fc90fd0
 800fb0c:	37354400 	.word	0x37354400
 800fb10:	37354443 	.word	0x37354443
 800fb14:	2e85a308 	.word	0x2e85a308
 800fb18:	43490f80 	.word	0x43490f80
 800fb1c:	3f22f984 	.word	0x3f22f984
 800fb20:	0801090c 	.word	0x0801090c
 800fb24:	2e85a300 	.word	0x2e85a300
 800fb28:	248d3132 	.word	0x248d3132
 800fb2c:	43800000 	.word	0x43800000
 800fb30:	0801098c 	.word	0x0801098c

0800fb34 <__kernel_rem_pio2f>:
 800fb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb38:	ed2d 8b04 	vpush	{d8-d9}
 800fb3c:	b0d9      	sub	sp, #356	; 0x164
 800fb3e:	4688      	mov	r8, r1
 800fb40:	9002      	str	r0, [sp, #8]
 800fb42:	49b8      	ldr	r1, [pc, #736]	; (800fe24 <__kernel_rem_pio2f+0x2f0>)
 800fb44:	9866      	ldr	r0, [sp, #408]	; 0x198
 800fb46:	9301      	str	r3, [sp, #4]
 800fb48:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800fb4c:	9901      	ldr	r1, [sp, #4]
 800fb4e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800fb50:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 800fb54:	1d11      	adds	r1, r2, #4
 800fb56:	db25      	blt.n	800fba4 <__kernel_rem_pio2f+0x70>
 800fb58:	1ed0      	subs	r0, r2, #3
 800fb5a:	bf48      	it	mi
 800fb5c:	1d10      	addmi	r0, r2, #4
 800fb5e:	10c0      	asrs	r0, r0, #3
 800fb60:	1c45      	adds	r5, r0, #1
 800fb62:	00e9      	lsls	r1, r5, #3
 800fb64:	eba0 070b 	sub.w	r7, r0, fp
 800fb68:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800fe34 <__kernel_rem_pio2f+0x300>
 800fb6c:	9103      	str	r1, [sp, #12]
 800fb6e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800fb72:	eb0a 0c0b 	add.w	ip, sl, fp
 800fb76:	ae1c      	add	r6, sp, #112	; 0x70
 800fb78:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800fb7c:	2400      	movs	r4, #0
 800fb7e:	4564      	cmp	r4, ip
 800fb80:	dd12      	ble.n	800fba8 <__kernel_rem_pio2f+0x74>
 800fb82:	9901      	ldr	r1, [sp, #4]
 800fb84:	ac1c      	add	r4, sp, #112	; 0x70
 800fb86:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800fb8a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800fb8e:	f04f 0c00 	mov.w	ip, #0
 800fb92:	45d4      	cmp	ip, sl
 800fb94:	dc27      	bgt.n	800fbe6 <__kernel_rem_pio2f+0xb2>
 800fb96:	f8dd e008 	ldr.w	lr, [sp, #8]
 800fb9a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800fe34 <__kernel_rem_pio2f+0x300>
 800fb9e:	4627      	mov	r7, r4
 800fba0:	2600      	movs	r6, #0
 800fba2:	e016      	b.n	800fbd2 <__kernel_rem_pio2f+0x9e>
 800fba4:	2000      	movs	r0, #0
 800fba6:	e7db      	b.n	800fb60 <__kernel_rem_pio2f+0x2c>
 800fba8:	42e7      	cmn	r7, r4
 800fbaa:	bf5d      	ittte	pl
 800fbac:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800fbb0:	ee07 1a90 	vmovpl	s15, r1
 800fbb4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800fbb8:	eef0 7a47 	vmovmi.f32	s15, s14
 800fbbc:	ece6 7a01 	vstmia	r6!, {s15}
 800fbc0:	3401      	adds	r4, #1
 800fbc2:	e7dc      	b.n	800fb7e <__kernel_rem_pio2f+0x4a>
 800fbc4:	ecfe 6a01 	vldmia	lr!, {s13}
 800fbc8:	ed97 7a00 	vldr	s14, [r7]
 800fbcc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fbd0:	3601      	adds	r6, #1
 800fbd2:	455e      	cmp	r6, fp
 800fbd4:	f1a7 0704 	sub.w	r7, r7, #4
 800fbd8:	ddf4      	ble.n	800fbc4 <__kernel_rem_pio2f+0x90>
 800fbda:	ece9 7a01 	vstmia	r9!, {s15}
 800fbde:	f10c 0c01 	add.w	ip, ip, #1
 800fbe2:	3404      	adds	r4, #4
 800fbe4:	e7d5      	b.n	800fb92 <__kernel_rem_pio2f+0x5e>
 800fbe6:	a908      	add	r1, sp, #32
 800fbe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fbec:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800fbf0:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800fe30 <__kernel_rem_pio2f+0x2fc>
 800fbf4:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800fe2c <__kernel_rem_pio2f+0x2f8>
 800fbf8:	9105      	str	r1, [sp, #20]
 800fbfa:	9304      	str	r3, [sp, #16]
 800fbfc:	4656      	mov	r6, sl
 800fbfe:	00b3      	lsls	r3, r6, #2
 800fc00:	9306      	str	r3, [sp, #24]
 800fc02:	ab58      	add	r3, sp, #352	; 0x160
 800fc04:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800fc08:	ac08      	add	r4, sp, #32
 800fc0a:	ab44      	add	r3, sp, #272	; 0x110
 800fc0c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800fc10:	46a4      	mov	ip, r4
 800fc12:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800fc16:	4637      	mov	r7, r6
 800fc18:	2f00      	cmp	r7, #0
 800fc1a:	f1a0 0004 	sub.w	r0, r0, #4
 800fc1e:	dc4a      	bgt.n	800fcb6 <__kernel_rem_pio2f+0x182>
 800fc20:	4628      	mov	r0, r5
 800fc22:	9207      	str	r2, [sp, #28]
 800fc24:	f000 fa3a 	bl	801009c <scalbnf>
 800fc28:	eeb0 8a40 	vmov.f32	s16, s0
 800fc2c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800fc30:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fc34:	f000 f9f0 	bl	8010018 <floorf>
 800fc38:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800fc3c:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fc40:	2d00      	cmp	r5, #0
 800fc42:	9a07      	ldr	r2, [sp, #28]
 800fc44:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fc48:	ee17 9a90 	vmov	r9, s15
 800fc4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc50:	ee38 8a67 	vsub.f32	s16, s16, s15
 800fc54:	dd41      	ble.n	800fcda <__kernel_rem_pio2f+0x1a6>
 800fc56:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800fc5a:	ab08      	add	r3, sp, #32
 800fc5c:	f1c5 0e08 	rsb	lr, r5, #8
 800fc60:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800fc64:	fa47 f00e 	asr.w	r0, r7, lr
 800fc68:	4481      	add	r9, r0
 800fc6a:	fa00 f00e 	lsl.w	r0, r0, lr
 800fc6e:	1a3f      	subs	r7, r7, r0
 800fc70:	f1c5 0007 	rsb	r0, r5, #7
 800fc74:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800fc78:	4107      	asrs	r7, r0
 800fc7a:	2f00      	cmp	r7, #0
 800fc7c:	dd3c      	ble.n	800fcf8 <__kernel_rem_pio2f+0x1c4>
 800fc7e:	f04f 0e00 	mov.w	lr, #0
 800fc82:	f109 0901 	add.w	r9, r9, #1
 800fc86:	4671      	mov	r1, lr
 800fc88:	4576      	cmp	r6, lr
 800fc8a:	dc67      	bgt.n	800fd5c <__kernel_rem_pio2f+0x228>
 800fc8c:	2d00      	cmp	r5, #0
 800fc8e:	dd03      	ble.n	800fc98 <__kernel_rem_pio2f+0x164>
 800fc90:	2d01      	cmp	r5, #1
 800fc92:	d074      	beq.n	800fd7e <__kernel_rem_pio2f+0x24a>
 800fc94:	2d02      	cmp	r5, #2
 800fc96:	d07b      	beq.n	800fd90 <__kernel_rem_pio2f+0x25c>
 800fc98:	2f02      	cmp	r7, #2
 800fc9a:	d12d      	bne.n	800fcf8 <__kernel_rem_pio2f+0x1c4>
 800fc9c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fca0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fca4:	b341      	cbz	r1, 800fcf8 <__kernel_rem_pio2f+0x1c4>
 800fca6:	4628      	mov	r0, r5
 800fca8:	9207      	str	r2, [sp, #28]
 800fcaa:	f000 f9f7 	bl	801009c <scalbnf>
 800fcae:	9a07      	ldr	r2, [sp, #28]
 800fcb0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fcb4:	e020      	b.n	800fcf8 <__kernel_rem_pio2f+0x1c4>
 800fcb6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fcba:	3f01      	subs	r7, #1
 800fcbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fcc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fcc4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800fcc8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fccc:	ecac 0a01 	vstmia	ip!, {s0}
 800fcd0:	ed90 0a00 	vldr	s0, [r0]
 800fcd4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fcd8:	e79e      	b.n	800fc18 <__kernel_rem_pio2f+0xe4>
 800fcda:	d105      	bne.n	800fce8 <__kernel_rem_pio2f+0x1b4>
 800fcdc:	1e70      	subs	r0, r6, #1
 800fcde:	ab08      	add	r3, sp, #32
 800fce0:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800fce4:	11ff      	asrs	r7, r7, #7
 800fce6:	e7c8      	b.n	800fc7a <__kernel_rem_pio2f+0x146>
 800fce8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fcec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fcf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf4:	da30      	bge.n	800fd58 <__kernel_rem_pio2f+0x224>
 800fcf6:	2700      	movs	r7, #0
 800fcf8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fcfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd00:	f040 809a 	bne.w	800fe38 <__kernel_rem_pio2f+0x304>
 800fd04:	1e74      	subs	r4, r6, #1
 800fd06:	46a4      	mov	ip, r4
 800fd08:	2100      	movs	r1, #0
 800fd0a:	45d4      	cmp	ip, sl
 800fd0c:	da47      	bge.n	800fd9e <__kernel_rem_pio2f+0x26a>
 800fd0e:	2900      	cmp	r1, #0
 800fd10:	d063      	beq.n	800fdda <__kernel_rem_pio2f+0x2a6>
 800fd12:	ab08      	add	r3, sp, #32
 800fd14:	3d08      	subs	r5, #8
 800fd16:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d07f      	beq.n	800fe1e <__kernel_rem_pio2f+0x2ea>
 800fd1e:	4628      	mov	r0, r5
 800fd20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fd24:	f000 f9ba 	bl	801009c <scalbnf>
 800fd28:	1c63      	adds	r3, r4, #1
 800fd2a:	aa44      	add	r2, sp, #272	; 0x110
 800fd2c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800fe30 <__kernel_rem_pio2f+0x2fc>
 800fd30:	0099      	lsls	r1, r3, #2
 800fd32:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fd36:	4623      	mov	r3, r4
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	f280 80ad 	bge.w	800fe98 <__kernel_rem_pio2f+0x364>
 800fd3e:	4623      	mov	r3, r4
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f2c0 80cb 	blt.w	800fedc <__kernel_rem_pio2f+0x3a8>
 800fd46:	aa44      	add	r2, sp, #272	; 0x110
 800fd48:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800fd4c:	4e36      	ldr	r6, [pc, #216]	; (800fe28 <__kernel_rem_pio2f+0x2f4>)
 800fd4e:	eddf 7a39 	vldr	s15, [pc, #228]	; 800fe34 <__kernel_rem_pio2f+0x300>
 800fd52:	2000      	movs	r0, #0
 800fd54:	1ae2      	subs	r2, r4, r3
 800fd56:	e0b6      	b.n	800fec6 <__kernel_rem_pio2f+0x392>
 800fd58:	2702      	movs	r7, #2
 800fd5a:	e790      	b.n	800fc7e <__kernel_rem_pio2f+0x14a>
 800fd5c:	6820      	ldr	r0, [r4, #0]
 800fd5e:	b949      	cbnz	r1, 800fd74 <__kernel_rem_pio2f+0x240>
 800fd60:	b118      	cbz	r0, 800fd6a <__kernel_rem_pio2f+0x236>
 800fd62:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800fd66:	6020      	str	r0, [r4, #0]
 800fd68:	2001      	movs	r0, #1
 800fd6a:	f10e 0e01 	add.w	lr, lr, #1
 800fd6e:	3404      	adds	r4, #4
 800fd70:	4601      	mov	r1, r0
 800fd72:	e789      	b.n	800fc88 <__kernel_rem_pio2f+0x154>
 800fd74:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800fd78:	6020      	str	r0, [r4, #0]
 800fd7a:	4608      	mov	r0, r1
 800fd7c:	e7f5      	b.n	800fd6a <__kernel_rem_pio2f+0x236>
 800fd7e:	1e74      	subs	r4, r6, #1
 800fd80:	ab08      	add	r3, sp, #32
 800fd82:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fd86:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800fd8a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fd8e:	e783      	b.n	800fc98 <__kernel_rem_pio2f+0x164>
 800fd90:	1e74      	subs	r4, r6, #1
 800fd92:	ab08      	add	r3, sp, #32
 800fd94:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fd98:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800fd9c:	e7f5      	b.n	800fd8a <__kernel_rem_pio2f+0x256>
 800fd9e:	ab08      	add	r3, sp, #32
 800fda0:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800fda4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800fda8:	4301      	orrs	r1, r0
 800fdaa:	e7ae      	b.n	800fd0a <__kernel_rem_pio2f+0x1d6>
 800fdac:	3001      	adds	r0, #1
 800fdae:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800fdb2:	2f00      	cmp	r7, #0
 800fdb4:	d0fa      	beq.n	800fdac <__kernel_rem_pio2f+0x278>
 800fdb6:	9b06      	ldr	r3, [sp, #24]
 800fdb8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800fdbc:	eb0d 0403 	add.w	r4, sp, r3
 800fdc0:	9b01      	ldr	r3, [sp, #4]
 800fdc2:	18f7      	adds	r7, r6, r3
 800fdc4:	ab1c      	add	r3, sp, #112	; 0x70
 800fdc6:	f106 0c01 	add.w	ip, r6, #1
 800fdca:	3c4c      	subs	r4, #76	; 0x4c
 800fdcc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fdd0:	4430      	add	r0, r6
 800fdd2:	4560      	cmp	r0, ip
 800fdd4:	da04      	bge.n	800fde0 <__kernel_rem_pio2f+0x2ac>
 800fdd6:	4606      	mov	r6, r0
 800fdd8:	e711      	b.n	800fbfe <__kernel_rem_pio2f+0xca>
 800fdda:	9c05      	ldr	r4, [sp, #20]
 800fddc:	2001      	movs	r0, #1
 800fdde:	e7e6      	b.n	800fdae <__kernel_rem_pio2f+0x27a>
 800fde0:	9b04      	ldr	r3, [sp, #16]
 800fde2:	f8dd e008 	ldr.w	lr, [sp, #8]
 800fde6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800fdea:	9306      	str	r3, [sp, #24]
 800fdec:	ee07 3a90 	vmov	s15, r3
 800fdf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fdf4:	2600      	movs	r6, #0
 800fdf6:	ece7 7a01 	vstmia	r7!, {s15}
 800fdfa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800fe34 <__kernel_rem_pio2f+0x300>
 800fdfe:	46b9      	mov	r9, r7
 800fe00:	455e      	cmp	r6, fp
 800fe02:	dd04      	ble.n	800fe0e <__kernel_rem_pio2f+0x2da>
 800fe04:	ece4 7a01 	vstmia	r4!, {s15}
 800fe08:	f10c 0c01 	add.w	ip, ip, #1
 800fe0c:	e7e1      	b.n	800fdd2 <__kernel_rem_pio2f+0x29e>
 800fe0e:	ecfe 6a01 	vldmia	lr!, {s13}
 800fe12:	ed39 7a01 	vldmdb	r9!, {s14}
 800fe16:	3601      	adds	r6, #1
 800fe18:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fe1c:	e7f0      	b.n	800fe00 <__kernel_rem_pio2f+0x2cc>
 800fe1e:	3c01      	subs	r4, #1
 800fe20:	e777      	b.n	800fd12 <__kernel_rem_pio2f+0x1de>
 800fe22:	bf00      	nop
 800fe24:	08010cd0 	.word	0x08010cd0
 800fe28:	08010ca4 	.word	0x08010ca4
 800fe2c:	43800000 	.word	0x43800000
 800fe30:	3b800000 	.word	0x3b800000
 800fe34:	00000000 	.word	0x00000000
 800fe38:	9b03      	ldr	r3, [sp, #12]
 800fe3a:	eeb0 0a48 	vmov.f32	s0, s16
 800fe3e:	1a98      	subs	r0, r3, r2
 800fe40:	f000 f92c 	bl	801009c <scalbnf>
 800fe44:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800fe2c <__kernel_rem_pio2f+0x2f8>
 800fe48:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fe4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe50:	db19      	blt.n	800fe86 <__kernel_rem_pio2f+0x352>
 800fe52:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800fe30 <__kernel_rem_pio2f+0x2fc>
 800fe56:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fe5a:	aa08      	add	r2, sp, #32
 800fe5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe60:	1c74      	adds	r4, r6, #1
 800fe62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe66:	3508      	adds	r5, #8
 800fe68:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800fe6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe70:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fe74:	ee10 3a10 	vmov	r3, s0
 800fe78:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800fe7c:	ee17 3a90 	vmov	r3, s15
 800fe80:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800fe84:	e74b      	b.n	800fd1e <__kernel_rem_pio2f+0x1ea>
 800fe86:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fe8a:	aa08      	add	r2, sp, #32
 800fe8c:	ee10 3a10 	vmov	r3, s0
 800fe90:	4634      	mov	r4, r6
 800fe92:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800fe96:	e742      	b.n	800fd1e <__kernel_rem_pio2f+0x1ea>
 800fe98:	a808      	add	r0, sp, #32
 800fe9a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800fe9e:	9001      	str	r0, [sp, #4]
 800fea0:	ee07 0a90 	vmov	s15, r0
 800fea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fea8:	3b01      	subs	r3, #1
 800feaa:	ee67 7a80 	vmul.f32	s15, s15, s0
 800feae:	ee20 0a07 	vmul.f32	s0, s0, s14
 800feb2:	ed62 7a01 	vstmdb	r2!, {s15}
 800feb6:	e73f      	b.n	800fd38 <__kernel_rem_pio2f+0x204>
 800feb8:	ecf6 6a01 	vldmia	r6!, {s13}
 800febc:	ecb5 7a01 	vldmia	r5!, {s14}
 800fec0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fec4:	3001      	adds	r0, #1
 800fec6:	4550      	cmp	r0, sl
 800fec8:	dc01      	bgt.n	800fece <__kernel_rem_pio2f+0x39a>
 800feca:	4290      	cmp	r0, r2
 800fecc:	ddf4      	ble.n	800feb8 <__kernel_rem_pio2f+0x384>
 800fece:	a858      	add	r0, sp, #352	; 0x160
 800fed0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800fed4:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800fed8:	3b01      	subs	r3, #1
 800feda:	e731      	b.n	800fd40 <__kernel_rem_pio2f+0x20c>
 800fedc:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800fede:	2b02      	cmp	r3, #2
 800fee0:	dc09      	bgt.n	800fef6 <__kernel_rem_pio2f+0x3c2>
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	dc2b      	bgt.n	800ff3e <__kernel_rem_pio2f+0x40a>
 800fee6:	d044      	beq.n	800ff72 <__kernel_rem_pio2f+0x43e>
 800fee8:	f009 0007 	and.w	r0, r9, #7
 800feec:	b059      	add	sp, #356	; 0x164
 800feee:	ecbd 8b04 	vpop	{d8-d9}
 800fef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800fef8:	2b03      	cmp	r3, #3
 800fefa:	d1f5      	bne.n	800fee8 <__kernel_rem_pio2f+0x3b4>
 800fefc:	aa30      	add	r2, sp, #192	; 0xc0
 800fefe:	1f0b      	subs	r3, r1, #4
 800ff00:	4413      	add	r3, r2
 800ff02:	461a      	mov	r2, r3
 800ff04:	4620      	mov	r0, r4
 800ff06:	2800      	cmp	r0, #0
 800ff08:	f1a2 0204 	sub.w	r2, r2, #4
 800ff0c:	dc52      	bgt.n	800ffb4 <__kernel_rem_pio2f+0x480>
 800ff0e:	4622      	mov	r2, r4
 800ff10:	2a01      	cmp	r2, #1
 800ff12:	f1a3 0304 	sub.w	r3, r3, #4
 800ff16:	dc5d      	bgt.n	800ffd4 <__kernel_rem_pio2f+0x4a0>
 800ff18:	ab30      	add	r3, sp, #192	; 0xc0
 800ff1a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800fe34 <__kernel_rem_pio2f+0x300>
 800ff1e:	440b      	add	r3, r1
 800ff20:	2c01      	cmp	r4, #1
 800ff22:	dc67      	bgt.n	800fff4 <__kernel_rem_pio2f+0x4c0>
 800ff24:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800ff28:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800ff2c:	2f00      	cmp	r7, #0
 800ff2e:	d167      	bne.n	8010000 <__kernel_rem_pio2f+0x4cc>
 800ff30:	edc8 6a00 	vstr	s13, [r8]
 800ff34:	ed88 7a01 	vstr	s14, [r8, #4]
 800ff38:	edc8 7a02 	vstr	s15, [r8, #8]
 800ff3c:	e7d4      	b.n	800fee8 <__kernel_rem_pio2f+0x3b4>
 800ff3e:	ab30      	add	r3, sp, #192	; 0xc0
 800ff40:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800fe34 <__kernel_rem_pio2f+0x300>
 800ff44:	440b      	add	r3, r1
 800ff46:	4622      	mov	r2, r4
 800ff48:	2a00      	cmp	r2, #0
 800ff4a:	da24      	bge.n	800ff96 <__kernel_rem_pio2f+0x462>
 800ff4c:	b34f      	cbz	r7, 800ffa2 <__kernel_rem_pio2f+0x46e>
 800ff4e:	eef1 7a47 	vneg.f32	s15, s14
 800ff52:	edc8 7a00 	vstr	s15, [r8]
 800ff56:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800ff5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff5e:	aa31      	add	r2, sp, #196	; 0xc4
 800ff60:	2301      	movs	r3, #1
 800ff62:	429c      	cmp	r4, r3
 800ff64:	da20      	bge.n	800ffa8 <__kernel_rem_pio2f+0x474>
 800ff66:	b10f      	cbz	r7, 800ff6c <__kernel_rem_pio2f+0x438>
 800ff68:	eef1 7a67 	vneg.f32	s15, s15
 800ff6c:	edc8 7a01 	vstr	s15, [r8, #4]
 800ff70:	e7ba      	b.n	800fee8 <__kernel_rem_pio2f+0x3b4>
 800ff72:	ab30      	add	r3, sp, #192	; 0xc0
 800ff74:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800fe34 <__kernel_rem_pio2f+0x300>
 800ff78:	440b      	add	r3, r1
 800ff7a:	2c00      	cmp	r4, #0
 800ff7c:	da05      	bge.n	800ff8a <__kernel_rem_pio2f+0x456>
 800ff7e:	b10f      	cbz	r7, 800ff84 <__kernel_rem_pio2f+0x450>
 800ff80:	eef1 7a67 	vneg.f32	s15, s15
 800ff84:	edc8 7a00 	vstr	s15, [r8]
 800ff88:	e7ae      	b.n	800fee8 <__kernel_rem_pio2f+0x3b4>
 800ff8a:	ed33 7a01 	vldmdb	r3!, {s14}
 800ff8e:	3c01      	subs	r4, #1
 800ff90:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff94:	e7f1      	b.n	800ff7a <__kernel_rem_pio2f+0x446>
 800ff96:	ed73 7a01 	vldmdb	r3!, {s15}
 800ff9a:	3a01      	subs	r2, #1
 800ff9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ffa0:	e7d2      	b.n	800ff48 <__kernel_rem_pio2f+0x414>
 800ffa2:	eef0 7a47 	vmov.f32	s15, s14
 800ffa6:	e7d4      	b.n	800ff52 <__kernel_rem_pio2f+0x41e>
 800ffa8:	ecb2 7a01 	vldmia	r2!, {s14}
 800ffac:	3301      	adds	r3, #1
 800ffae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ffb2:	e7d6      	b.n	800ff62 <__kernel_rem_pio2f+0x42e>
 800ffb4:	edd2 7a00 	vldr	s15, [r2]
 800ffb8:	edd2 6a01 	vldr	s13, [r2, #4]
 800ffbc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ffc0:	3801      	subs	r0, #1
 800ffc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ffc6:	ed82 7a00 	vstr	s14, [r2]
 800ffca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffce:	edc2 7a01 	vstr	s15, [r2, #4]
 800ffd2:	e798      	b.n	800ff06 <__kernel_rem_pio2f+0x3d2>
 800ffd4:	edd3 7a00 	vldr	s15, [r3]
 800ffd8:	edd3 6a01 	vldr	s13, [r3, #4]
 800ffdc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ffe0:	3a01      	subs	r2, #1
 800ffe2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ffe6:	ed83 7a00 	vstr	s14, [r3]
 800ffea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffee:	edc3 7a01 	vstr	s15, [r3, #4]
 800fff2:	e78d      	b.n	800ff10 <__kernel_rem_pio2f+0x3dc>
 800fff4:	ed33 7a01 	vldmdb	r3!, {s14}
 800fff8:	3c01      	subs	r4, #1
 800fffa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fffe:	e78f      	b.n	800ff20 <__kernel_rem_pio2f+0x3ec>
 8010000:	eef1 6a66 	vneg.f32	s13, s13
 8010004:	eeb1 7a47 	vneg.f32	s14, s14
 8010008:	edc8 6a00 	vstr	s13, [r8]
 801000c:	ed88 7a01 	vstr	s14, [r8, #4]
 8010010:	eef1 7a67 	vneg.f32	s15, s15
 8010014:	e790      	b.n	800ff38 <__kernel_rem_pio2f+0x404>
 8010016:	bf00      	nop

08010018 <floorf>:
 8010018:	ee10 3a10 	vmov	r3, s0
 801001c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010020:	3a7f      	subs	r2, #127	; 0x7f
 8010022:	2a16      	cmp	r2, #22
 8010024:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010028:	dc2a      	bgt.n	8010080 <floorf+0x68>
 801002a:	2a00      	cmp	r2, #0
 801002c:	da11      	bge.n	8010052 <floorf+0x3a>
 801002e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8010090 <floorf+0x78>
 8010032:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010036:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801003a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801003e:	dd05      	ble.n	801004c <floorf+0x34>
 8010040:	2b00      	cmp	r3, #0
 8010042:	da23      	bge.n	801008c <floorf+0x74>
 8010044:	4a13      	ldr	r2, [pc, #76]	; (8010094 <floorf+0x7c>)
 8010046:	2900      	cmp	r1, #0
 8010048:	bf18      	it	ne
 801004a:	4613      	movne	r3, r2
 801004c:	ee00 3a10 	vmov	s0, r3
 8010050:	4770      	bx	lr
 8010052:	4911      	ldr	r1, [pc, #68]	; (8010098 <floorf+0x80>)
 8010054:	4111      	asrs	r1, r2
 8010056:	420b      	tst	r3, r1
 8010058:	d0fa      	beq.n	8010050 <floorf+0x38>
 801005a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8010090 <floorf+0x78>
 801005e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010062:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801006a:	ddef      	ble.n	801004c <floorf+0x34>
 801006c:	2b00      	cmp	r3, #0
 801006e:	bfbe      	ittt	lt
 8010070:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8010074:	fa40 f202 	asrlt.w	r2, r0, r2
 8010078:	189b      	addlt	r3, r3, r2
 801007a:	ea23 0301 	bic.w	r3, r3, r1
 801007e:	e7e5      	b.n	801004c <floorf+0x34>
 8010080:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010084:	d3e4      	bcc.n	8010050 <floorf+0x38>
 8010086:	ee30 0a00 	vadd.f32	s0, s0, s0
 801008a:	4770      	bx	lr
 801008c:	2300      	movs	r3, #0
 801008e:	e7dd      	b.n	801004c <floorf+0x34>
 8010090:	7149f2ca 	.word	0x7149f2ca
 8010094:	bf800000 	.word	0xbf800000
 8010098:	007fffff 	.word	0x007fffff

0801009c <scalbnf>:
 801009c:	ee10 3a10 	vmov	r3, s0
 80100a0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80100a4:	d02b      	beq.n	80100fe <scalbnf+0x62>
 80100a6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80100aa:	d302      	bcc.n	80100b2 <scalbnf+0x16>
 80100ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 80100b0:	4770      	bx	lr
 80100b2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80100b6:	d123      	bne.n	8010100 <scalbnf+0x64>
 80100b8:	4b24      	ldr	r3, [pc, #144]	; (801014c <scalbnf+0xb0>)
 80100ba:	eddf 7a25 	vldr	s15, [pc, #148]	; 8010150 <scalbnf+0xb4>
 80100be:	4298      	cmp	r0, r3
 80100c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80100c4:	db17      	blt.n	80100f6 <scalbnf+0x5a>
 80100c6:	ee10 3a10 	vmov	r3, s0
 80100ca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80100ce:	3a19      	subs	r2, #25
 80100d0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80100d4:	4288      	cmp	r0, r1
 80100d6:	dd15      	ble.n	8010104 <scalbnf+0x68>
 80100d8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8010154 <scalbnf+0xb8>
 80100dc:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8010158 <scalbnf+0xbc>
 80100e0:	ee10 3a10 	vmov	r3, s0
 80100e4:	eeb0 7a67 	vmov.f32	s14, s15
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	bfb8      	it	lt
 80100ec:	eef0 7a66 	vmovlt.f32	s15, s13
 80100f0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80100f4:	4770      	bx	lr
 80100f6:	eddf 7a19 	vldr	s15, [pc, #100]	; 801015c <scalbnf+0xc0>
 80100fa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80100fe:	4770      	bx	lr
 8010100:	0dd2      	lsrs	r2, r2, #23
 8010102:	e7e5      	b.n	80100d0 <scalbnf+0x34>
 8010104:	4410      	add	r0, r2
 8010106:	28fe      	cmp	r0, #254	; 0xfe
 8010108:	dce6      	bgt.n	80100d8 <scalbnf+0x3c>
 801010a:	2800      	cmp	r0, #0
 801010c:	dd06      	ble.n	801011c <scalbnf+0x80>
 801010e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010112:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010116:	ee00 3a10 	vmov	s0, r3
 801011a:	4770      	bx	lr
 801011c:	f110 0f16 	cmn.w	r0, #22
 8010120:	da09      	bge.n	8010136 <scalbnf+0x9a>
 8010122:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801015c <scalbnf+0xc0>
 8010126:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8010160 <scalbnf+0xc4>
 801012a:	ee10 3a10 	vmov	r3, s0
 801012e:	eeb0 7a67 	vmov.f32	s14, s15
 8010132:	2b00      	cmp	r3, #0
 8010134:	e7d9      	b.n	80100ea <scalbnf+0x4e>
 8010136:	3019      	adds	r0, #25
 8010138:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801013c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010140:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8010164 <scalbnf+0xc8>
 8010144:	ee07 3a90 	vmov	s15, r3
 8010148:	e7d7      	b.n	80100fa <scalbnf+0x5e>
 801014a:	bf00      	nop
 801014c:	ffff3cb0 	.word	0xffff3cb0
 8010150:	4c000000 	.word	0x4c000000
 8010154:	7149f2ca 	.word	0x7149f2ca
 8010158:	f149f2ca 	.word	0xf149f2ca
 801015c:	0da24260 	.word	0x0da24260
 8010160:	8da24260 	.word	0x8da24260
 8010164:	33000000 	.word	0x33000000

08010168 <_init>:
 8010168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801016a:	bf00      	nop
 801016c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801016e:	bc08      	pop	{r3}
 8010170:	469e      	mov	lr, r3
 8010172:	4770      	bx	lr

08010174 <_fini>:
 8010174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010176:	bf00      	nop
 8010178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801017a:	bc08      	pop	{r3}
 801017c:	469e      	mov	lr, r3
 801017e:	4770      	bx	lr
